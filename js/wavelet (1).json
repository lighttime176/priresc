{ "schema" : "referenceapi_schema.json",
  "schemaVersion" : "1.0",
  "productName" : "Wavelet Toolbox",
  "baseCode" : "WA",
  "helpFolder" : "wavelet",
  "helpLocation" : "wavelet",
  "refItems" : [

    { "href" : "ref\/addlift.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "addlift",
          "fcntype" : "simple" } ],
      "refpurpose" : "(To be removed) Add lifting steps to lifting scheme",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the new lifting scheme obtained by appending the elementary lifting step ELS to the lifting scheme LS.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "LSN = addlift(LS,ELS)",
            "LSN = addlift(LS,ELS,'begin')",
            "LSN = addlift(LS,ELS,'end')" ] } ],
      "inputs" : 
      [ 
        { "name" : "LS",
          "purpose" : "Lifting scheme",
          "htmlid" : "mw_e5d36cdb-4cef-4303-a148-2a358f1c684d",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "ELS",
          "purpose" : "Elementary lifting step",
          "htmlid" : "mw_718f153b-51e8-45a9-877b-0095e86e95ca",
          "value" : 
          [ "cell array",
            "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "addlift.html#mw_96ab9ff8-286b-4168-bbaa-4940a5bca834",
          "open_command" : "openExample('wavelet\/AddPrimalLiftingStepExample')",
          "title" : "Add Primal Lifting Step" } ],
      "seealso" : 
      [ 
        { "url" : "liftfilt.html",
          "name" : "liftfilt" },
        
        { "url" : "liftingscheme.addlift.html",
          "name" : "addlift" },
        
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" },
        
        { "url" : "liftingstep.html",
          "name" : "liftingStep" } ] },
    { "href" : "ref\/allnodes.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "allnodes",
          "fcntype" : "simple" } ],
      "refpurpose" : "Tree nodes",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the indices of all the nodes of the tree T in column vector N.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "N = allnodes(T)",
            "N = allnodes(T,'deppos')" ] } ],
      "examples" : 
      [ 
        { "url" : "allnodes.html#bu_by2l",
          "open_command" : "openExample('wavelet\/ReturnNodesOfWPTreeExample')",
          "title" : "Return Nodes of Wavelet Packet Tree" } ] },
    { "href" : "ref\/appcoef.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "appcoef",
          "fcntype" : "simple" } ],
      "refpurpose" : "1-D approximation coefficients",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the approximation coefficients at the coarsest scale using the wavelet decomposition structure [C,L] of a 1-D signal and the wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "A = appcoef(C,L,wname)",
            "A = appcoef(C,L,LoR,HiR)",
            "A = appcoef(___,N)" ] } ],
      "inputs" : 
      [ 
        { "name" : "C",
          "purpose" : "Wavelet decomposition vector",
          "htmlid" : "mw_1b4c6e5e-4972-4fe7-8a8a-20e63e8a74bb",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "L",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "mw_5fd7abad-6766-4f00-a884-43b3beeed306",
          "value" : 
          [ "vector of positive integers" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_b23bcf36-9f59-444a-9269-85127cf9f69f",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoR",
          "purpose" : "Wavelet lowpass reconstruction filter",
          "htmlid" : "mw_773aa29f-84c2-4586-949c-0791a312e2ec",
          "value" : 
          [ "even-length real-valued vector" ] },
        
        { "name" : "HiR",
          "purpose" : "Wavelet highpass reconstruction filter",
          "htmlid" : "mw_e96e2966-cd72-48b3-ba12-e07e31abee3e",
          "value" : 
          [ "even-length real-valued vector" ] },
        
        { "name" : "N",
          "purpose" : "Approximation coefficients level",
          "htmlid" : "mw_431f22ba-be1d-473a-8a2e-99e2f6893d7b",
          "value" : 
          [ "positive integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_e10ffe10-675d-4725-9f6b-ea715d1083b4",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "appcoef.html#mw_cf4c8214-04a7-4ad6-9646-fb9de3ed1386",
          "open_command" : "openExample('wavelet\/Level3ApproxCoefficientsExample')",
          "title" : "Level 3 Approximation Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "detcoef.html",
          "name" : "detcoef" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" } ] },
    { "href" : "ref\/appcoef2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "appcoef2",
          "fcntype" : "simple" } ],
      "refpurpose" : "2-D approximation coefficients",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the approximation coefficients at the coarsest scale using the wavelet decomposition structure [C,S] of a 2-D signal and the wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "A = appcoef2(C,S,wname)",
            "A = appcoef2(C,S,LoR,HiR)",
            "A = appcoef2(___,N)" ] } ],
      "inputs" : 
      [ 
        { "name" : "C",
          "purpose" : "Wavelet decomposition vector",
          "htmlid" : "mw_6f2b1ee5-7324-4ca5-9c82-95b04d4a05c2",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "S",
          "purpose" : "Bookkeeping matrix",
          "htmlid" : "mw_620d3180-0567-4945-8cfb-d7992b015527",
          "value" : 
          [ "matrix of positive integers" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_3c7d1317-f85f-4083-89df-380581005e70",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoR",
          "purpose" : "Wavelet lowpass reconstruction filter",
          "htmlid" : "mw_56ec962c-934d-45ac-8c47-0688e199a249",
          "value" : 
          [ "even-length real-valued vector" ] },
        
        { "name" : "HiR",
          "purpose" : "Wavelet highpass reconstruction filter",
          "htmlid" : "mw_4320a458-bada-4ca7-8e77-da0cb9cf3000",
          "value" : 
          [ "even-length real-valued vector" ] },
        
        { "name" : "N",
          "purpose" : "Approximation coefficients level",
          "htmlid" : "mw_63ce55c1-fc18-4dde-98aa-f553d5f6d9de",
          "value" : 
          [ "positive integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_6562eb49-1803-404c-9aed-305b0c6e9420",
          "value" : 
          [ "real-valued matrix",
            "real-valued 3-D array" ] } ],
      "examples" : 
      [ 
        { "url" : "appcoef2.html#mw_e4785cc0-a13e-43ff-9464-163c980ef49d",
          "open_command" : "openExample('wavelet\/ReconstructApproximationCoefficientsOfAnImageExample')",
          "title" : "Reconstruct Approximation Coefficients of an Image" } ],
      "seealso" : 
      [ 
        { "url" : "detcoef2.html",
          "name" : "detcoef2" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" } ] },
    { "href" : "ref\/array2cwtfilters.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "array2cwtfilters",
          "fcntype" : "simple" } ],
      "refpurpose" : "Convert deep-learning CWT filter tensor to filter bank matrix",
      "introduced" : "R2022b",
      "description" : "This MATLAB function reconstructs an approximation to the continuous wavelet filter bank matrix psif from the reduced-weight CWT filter tensor psifvec and the bookkeeping matrix filteridx.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "psif = array2cwtfilters(psifvec,filteridx)" ] } ],
      "inputs" : 
      [ 
        { "name" : "psifvec",
          "purpose" : "Reduced-weight CWT filter tensor",
          "htmlid" : "mw_82cf8c1b-7109-4453-a2c6-6ed7cf3e775a",
          "value" : 
          [ "array" ] },
        
        { "name" : "filteridx",
          "purpose" : "Bookkeeping matrix",
          "htmlid" : "mw_d8d5f910-bff8-4bdd-b8e0-1a7a0d2653e5",
          "value" : 
          [ "matrix" ] } ],
      "outputs" : 
      [ 
        { "name" : "psif",
          "purpose" : "CWT filter bank matrix",
          "htmlid" : "mw_4a2456d3-5e21-4865-b933-1a79c51f324f",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "array2cwtfilters.html#mw_6ac6b983-1027-4562-8177-7a55fc07e036",
          "open_command" : "openExample('deeplearning_shared\/ObtainFilterBankMatrixFromDeepLearningCWTFilterTensorExample')",
          "title" : "Obtain Filter Bank Matrix From Deep-Learning CWT Filter Tensor" } ],
      "seealso" : 
      [ 
        { "url" : "dlcwt.html",
          "name" : "dlcwt" },
        
        { "url" : "cwtfilters2array.html",
          "name" : "cwtfilters2array" },
        
        { "url" : "cwt.html",
          "name" : "cwt" },
        
        { "url" : "cwtlayer.html",
          "name" : "cwtLayer" },
        
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "..\/..\/signal\/ref\/stftlayer.html",
          "name" : "stftLayer" } ] },
    { "href" : "ref\/biorfilt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "biorfilt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Biorthogonal wavelet filter set",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns four filters associated with the biorthogonal wavelet specified by decomposition filter DF and reconstruction filter RF.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[LoD,HiD,LoR,HiR] = biorfilt(DF,RF)",
            "[LoD1,HiD1,LoR1,HiR1,LoD2,HiD2,LoR2,HiR2] = biorfilt(DF,RF,'8')" ] } ],
      "inputs" : 
      [ 
        { "name" : "DF",
          "purpose" : "Decomposition scaling filter",
          "htmlid" : "mw_c630dfd1-ea08-4e92-b48c-12fc3d7827fd",
          "value" : 
          [ "vector" ] },
        
        { "name" : "RF",
          "purpose" : "Reconstruction scaling filter",
          "htmlid" : "mw_fa9600f7-a611-4797-b0d4-fac6ada094e1",
          "value" : 
          [ "vector" ] } ],
      "outputs" : 
      [ 
        { "name" : "LoD,HiD",
          "purpose" : "Decomposition filters",
          "htmlid" : "mw_139c5d46-8c80-4ef4-bddf-50176ce3f18c",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Reconstruction filters",
          "htmlid" : "mw_1c7f9c06-ced5-4968-8d62-f2b34888d5eb",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "LoD1,HiD1,LoR1,HiR1",
          "purpose" : "Filters",
          "htmlid" : "mw_f02bf941-5749-4b69-bf21-f78a91123457",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "LoD2,HiD2,LoR2,HiR2",
          "purpose" : "Filters",
          "htmlid" : "mw_9a1a328b-084c-4caa-bd33-6d4cb94dd98a",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "examples" : 
      [ 
        { "url" : "biorfilt.html#mw_d4a491af-eb35-4a3c-97c0-c1c2d80fc68e",
          "open_command" : "openExample('wavelet\/BiorthogonalWavfExample')",
          "title" : "Biorthogonal Filters and Transfer Functions" } ],
      "seealso" : 
      [ 
        { "url" : "biorwavf.html",
          "name" : "biorwavf" },
        
        { "url" : "orthfilt.html",
          "name" : "orthfilt" } ] },
    { "href" : "ref\/biorwavf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "biorwavf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Biorthogonal spline wavelet filter",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the reconstruction (synthesis) and decomposition (analysis) scaling filters, RF and DF, respectively, associated with the biorthogonal wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[RF,DF] = biorwavf(wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Name of biorthogonal wavelet",
          "htmlid" : "mw_e0e42c4a-9b75-41a6-9e2d-9bbe0b8844cc",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "RF",
          "purpose" : "Reconstruction filter",
          "htmlid" : "mw_6d4b83a2-4de6-4d1e-a90e-a3c83013aea8",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "DF",
          "purpose" : "Decomposition filter",
          "htmlid" : "mw_d7d0569f-0573-43ef-80de-b07671da87e2",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "biorwavf.html#mw_752e2c48-dc38-4937-9a4a-a9a6ce581bcd",
          "open_command" : "openExample('wavelet\/BiorthogonalSplineWaveletFilterExample')",
          "title" : "Biorthogonal Spline Wavelet Filter" },
        
        { "url" : "biorwavf.html#mw_b64e2fd3-480b-4d36-9df7-cfbde3ea15fa",
          "open_command" : "openExample('wavelet\/AddingBiorthogonalWaveletFiltersExample')",
          "title" : "Add Biorthogonal Wavelet Filters" } ],
      "seealso" : 
      [ 
        { "url" : "biorfilt.html",
          "name" : "biorfilt" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" } ] },
    { "href" : "ref\/blscalf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "blscalf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Best-localized Daubechies scaling filter",
      "introduced" : "R2022b",
      "description" : "This MATLAB function returns the best-localized Daubechies scaling filter corresponding to wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "scalf = blscalf(wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Best-localized Daubechies wavelet",
          "htmlid" : "mw_135329eb-884a-4cce-91f4-c303d7b15c71",
          "value" : 
          [ "\"bl7\"",
            "\"bl9\"",
            "\"bl10\"" ] } ],
      "outputs" : 
      [ 
        { "name" : "scalf",
          "purpose" : "Scaling filter",
          "htmlid" : "mw_69de0db8-bbb6-4b41-8246-555f4e6b3934",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "blscalf.html#mw_d9ecfeff-33e3-4741-bde5-7e9ce1d063fd",
          "open_command" : "openExample('wavelet\/BestLocalizedDaubechiesWaveletExample')",
          "title" : "Best-Localized Daubechies Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "symwavf.html",
          "name" : "symwavf" },
        
        { "url" : "dbwavf.html",
          "name" : "dbwavf" },
        
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "modwpt.html",
          "name" : "modwpt" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "dwpt.html",
          "name" : "dwpt" },
        
        { "url" : "orthfilt.html",
          "name" : "orthfilt" },
        
        { "url" : "isorthwfb.html",
          "name" : "isorthwfb" } ] },
    { "href" : "ref\/bswfun.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "bswfun",
          "fcntype" : "simple" } ],
      "refpurpose" : "Biorthogonal scaling and wavelet functions",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns approximations on the grid XVAL of the two pairs of biorthogonal scaling and wavelet functions.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[PHIS,PSIS,PHIA,PSIA,XVAL] = bswfun(LoD,HiD,LoR,HiR)",
            "bswfun(LoD,HiD,LoR,HiR,ITER)",
            "bswfun(LoD,HiD,LoR,HiR,'plot')",
            "bswfun(LoD,HiD,LoR,HiR,ITER,'plot')",
            "bswfun(LoD,HiD,LoR,HiR,'plot',ITER)" ] } ],
      "examples" : 
      [ 
        { "url" : "bswfun.html#buo1ltz",
          "open_command" : "openExample('wavelet\/BiorthogonalWaveletFromLiftingExample')",
          "title" : "Biorthogonal Scaling and Wavelet from Lifting Scheme" } ],
      "seealso" : 
      [ 
        { "url" : "wavefun.html",
          "name" : "wavefun" } ] },
    { "href" : "ref\/centfrq.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "centfrq",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet center frequency",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the center frequency in hertz of the wavelet specified by wname (see wavefun for more information).",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "FREQ = centfrq(wname)",
            "FREQ = centfrq(wname,ITER)",
            "[FREQ,XVAL,RECFREQ] = centfrq(wname,ITER,'plot')" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_b1056858-f96b-401d-b4b1-db98696a245b",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "ITER",
          "purpose" : "Number of iterations",
          "htmlid" : "mw_4e8ad9cf-0ffc-4782-b85d-7b54f9a97419",
          "value" : 
          [ "8",
            "positive integer" ],
          "defaultvalue" : "8" } ],
      "outputs" : 
      [ 
        { "name" : "FREQ",
          "purpose" : "Wavelet center frequency",
          "htmlid" : "mw_424d97f0-3bf8-4863-bbb4-22b081dcec16",
          "value" : 
          [ "scalar" ] },
        
        { "name" : "XVAL",
          "purpose" : "Grid",
          "htmlid" : "mw_a2827681-dd38-476a-a5c5-06a4b96cfc12",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "RECFREQ",
          "purpose" : "Center frequency-based approximation",
          "htmlid" : "mw_c8a38083-400a-4211-971a-588cd1820b22",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "centfrq.html#mw_07d51f95-451b-42a3-af7b-952a0138b4e9",
          "open_command" : "openExample('wavelet\/DetermineCenterFrequencyExample')",
          "title" : "Determine Center Frequency" },
        
        { "url" : "centfrq.html#mw_bf4a80e5-e01f-46b2-a99f-305f82bcb811",
          "open_command" : "openExample('wavelet\/ConvertScalesToFrequenciesExample')",
          "title" : "Convert Scales to Frequencies" } ],
      "seealso" : 
      [ 
        { "url" : "scal2frq.html",
          "name" : "scal2frq" } ] },
    { "href" : "ref\/cfs2wpt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "cfs2wpt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet packet tree construction from coefficients",
      "introduced" : "preR2006a",
      "description" : "cfs2wpt builds a wavelet packet tree (T) and the related analyzed signal or image (X) using the following input information:",
      "examples" : 
      [ 
        { "url" : "cfs2wpt.html#bu_by0s",
          "open_command" : "openExample('wavelet\/BuildWaveletPacketTreeExample')",
          "title" : "Build Wavelet Packet Tree" } ] },
    { "href" : "ref\/cgauwavf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "cgauwavf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Complex Gaussian wavelet",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the 1st order derivative of the complex-valued Gaussian wavelet, psi, on an n-point regular grid, x, for the interval [lb,ub].",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[psi,x] = cgauwavf(lb,ub,n)",
            "[psi,x] = cgauwavf(lb,ub,n,p)",
            "[psi,x] = cgauwavf(lb,ub,n,wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lb",
          "purpose" : "Left endpoint",
          "htmlid" : "mw_550bf7d5-3c66-4ec7-8bc9-5b689bf9b46e",
          "value" : 
          [ "real number" ] },
        
        { "name" : "ub",
          "purpose" : "Right endpoint",
          "htmlid" : "mw_d9dc248a-88bd-4aff-8d69-6d3a994f9a45",
          "value" : 
          [ "real number" ] },
        
        { "name" : "n",
          "purpose" : "Number of regularly spaced points",
          "htmlid" : "mw_2addbde7-451a-4402-9be0-4c93412fa0de",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "p",
          "purpose" : "Derivative",
          "htmlid" : "mw_6ba40644-bfdf-4057-afdb-dfbb9d7f17e8",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Gaussian wavelet",
          "htmlid" : "mw_77be5d73-a82f-42ea-91fc-34403c4ced89",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "psi",
          "purpose" : "Derivative of complex-valued Gaussian wavelet",
          "htmlid" : "mw_0c5e927a-26c3-44a9-a9cd-39c09338b714",
          "value" : 
          [ "complex-valued vector" ] },
        
        { "name" : "x",
          "purpose" : "Sample points",
          "htmlid" : "mw_565835e3-02a4-4880-9a32-4e1fabe841c6",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "cgauwavf.html#mw_1935740a-8692-491b-9510-c47c24133fc8",
          "open_command" : "openExample('wavelet\/CreateComplexGaussianWaveletExample')",
          "title" : "Create Complex Gaussian Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wavemngr.html",
          "name" : "wavemngr" } ] },
    { "href" : "ref\/chgwdeccfs.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "chgwdeccfs",
          "fcntype" : "simple" } ],
      "refpurpose" : "Change multisignal 1-D decomposition coefficients",
      "introduced" : "R2007a",
      "description" : "This MATLAB function replaces the approximation coefficients at level DEC.level with those contained in the matrix COEFS.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "DEC = chgwdeccfs(DEC,'ca',COEFS)",
            "DEC = chgwdeccfs(DEC,'cd',COEFS,LEV)",
            "DEC = chgwdeccfs(DEC,'all',CA,CD)",
            "DEC = chgwdeccfs(DEC,'all',V)",
            "DEC = chgwdeccfs(...,IDXSIG)" ] } ],
      "examples" : 
      [ 
        { "url" : "chgwdeccfs.html#mw_b7116ab2-f230-47ba-9e7d-ca53989468d0",
          "open_command" : "openExample('wavelet\/ChangeDecompositionCoefficientsExample')",
          "title" : "Change Decomposition Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "mdwtdec.html",
          "name" : "mdwtdec" },
        
        { "url" : "mdwtrec.html",
          "name" : "mdwtrec" } ] },
    { "href" : "ref\/cmddenoise.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "cmddenoise",
          "fcntype" : "simple" } ],
      "refpurpose" : "Interval-dependent denoising",
      "introduced" : "R2010a",
      "description" : "This MATLAB function returns the denoised signal, sigden, obtained from an interval-dependent denoising of the signal, sig, using the orthogonal or biorthogonal wavelet and scaling filters, wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "sigden = cmddenoise(sig,wname,level)",
            "sigden = cmddenoise(sig,wname,level,sorh)",
            "sigden = cmddenoise(sig,wname,level,sorh,nb_inter)",
            "sigden = cmddenoise(sig,wname,level,sorh,nb_inter,thrParamsIn)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[sigden,coefs] = cmddenoise(___)",
            "[sigden,coefs,thrParamsOut] = cmddenoise(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[sigden,coefs,thrParamsOut,int_DepThr_Cell] = cmddenoise(sig,wname,level,sorh,nb_inter)",
            "[sigden,coefs,thrParamsOut,int_DepThr_Cell,BestNbofInt] = cmddenoise(sig,wname,level,sorh,nb_inter)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sig",
          "purpose" : "Signal for interval-dependent denoising",
          "htmlid" : "btidriu-sig",
          "value" : 
          [ "1-D row or column vector" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet name",
          "htmlid" : "btidriu-wname",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "level",
          "purpose" : "Level of the decimated wavelet transform (multiresolution analysis)",
          "htmlid" : "btidriu-level",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "sorh",
          "purpose" : "Threshold rule",
          "htmlid" : "btidriu-sorh",
          "value" : 
          [ "'s'",
            "'h'" ],
          "defaultvalue" : "'s'" },
        
        { "name" : "nb_inter",
          "purpose" : "Number of intervals",
          "htmlid" : "btidriu-nb_inter",
          "value" : 
          [ "positive integer in the set {1,2,3,4,5,6}",
            "NaN" ] },
        
        { "name" : "thrParamsIn",
          "purpose" : "Intervals and thresholds by level",
          "htmlid" : "btidriu-thrParamsIn",
          "value" : 
          [ "cell array of matrices" ] } ],
      "outputs" : 
      [ 
        { "name" : "sigden",
          "purpose" : "Denoised signal",
          "htmlid" : "btidriu-sigden",
          "value" : 
          [ "1-D row or column vector" ] },
        
        { "name" : "coefs",
          "purpose" : "Approximation coefficients and thresholded wavelet coefficients",
          "htmlid" : "btidriu-coefs",
          "value" : 
          [ "1-D row vector of approximation coefficients and thresholded wavelet coefficients" ] },
        
        { "name" : "thrParamsOut",
          "purpose" : "Intervals and thresholds by level",
          "htmlid" : "btidriu-thrParamsOut",
          "value" : 
          [ "cell array of matrices" ] },
        
        { "name" : "int_DepThr_Cell",
          "purpose" : "Intervals and thresholds assuming 0 to 5 change points",
          "htmlid" : "btidriu-int_DepThr_Cell",
          "value" : 
          [ "cell array of matrices" ] },
        
        { "name" : "BestNbofInt",
          "purpose" : "Optimal number of intervals",
          "htmlid" : "btidriu-BestNbofInt",
          "value" : 
          [ "positive integer ≤ 6" ] } ],
      "examples" : 
      [ 
        { "url" : "cmddenoise.html#btidrru-2",
          "open_command" : "openExample('wavelet\/DenoisingBlocksSignalWithHaarWaveletExample')",
          "title" : "Denoising Blocks Signal with Haar Wavelet" },
        
        { "url" : "cmddenoise.html#btie883",
          "open_command" : "openExample('wavelet\/DenoisingBlocksSignalWithHardThresholdingExample')",
          "title" : "Denoising Blocks Signal with Hard Thresholding" },
        
        { "url" : "cmddenoise.html#btie9jz",
          "open_command" : "openExample('wavelet\/SpecifyTheNumberOfIntervalsExample')",
          "title" : "Specify the Number of Intervals" },
        
        { "url" : "cmddenoise.html#btifntz",
          "open_command" : "openExample('wavelet\/SpecifyIntervalsAndThresholdsExample')",
          "title" : "Specify Intervals and Thresholds" },
        
        { "url" : "cmddenoise.html#btifs5t",
          "open_command" : "openExample('wavelet\/ReturnDenoisedWaveletCoefficientsExample')",
          "title" : "Return Denoised Wavelet Coefficients" },
        
        { "url" : "cmddenoise.html#btift8b",
          "open_command" : "openExample('wavelet\/OutputIntervalsAndThresholdsExample')",
          "title" : "Output Intervals and Thresholds" },
        
        { "url" : "cmddenoise.html#btifuan",
          "open_command" : "openExample('wavelet\/PartitionSignalIntoIncreasingNumbersOfIntervalsExample')",
          "title" : "Partition Signal into Increasing Numbers of Intervals with Thresholds" },
        
        { "url" : "cmddenoise.html#btigb6u",
          "open_command" : "openExample('wavelet\/DetectNumberOfChangePointsExample')",
          "title" : "Detect Number of Change Points" } ],
      "seealso" : 
      [ 
        { "url" : "thselect.html",
          "name" : "thselect" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "wthresh.html",
          "name" : "wthresh" },
        
        { "url" : "wvarchg.html",
          "name" : "wvarchg" },
        
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" } ] },
    { "href" : "ref\/cmorwavf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "cmorwavf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Complex Morlet wavelet",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the complex Morlet wavelet, psi, with time-decay parameter, fb, and center frequency, fc, both equal to 1.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[psi,x] = cmorwavf(lb,ub,n)",
            "[psi,x] = cmorwavf(lb,ub,n,fb,fc)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lb",
          "purpose" : "Left endpoint",
          "htmlid" : "mw_4a4ba461-5a0d-4cb3-bfc1-f7407cb0e387",
          "value" : 
          [ "scalar" ] },
        
        { "name" : "ub",
          "purpose" : "Right endpoint",
          "htmlid" : "mw_121c9626-855d-4f84-b314-fa1b803c8fe0",
          "value" : 
          [ "scalar" ] },
        
        { "name" : "n",
          "purpose" : "Number of regularly spaced points",
          "htmlid" : "mw_29f2321e-200a-415b-9259-24be096a1cd7",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "fb",
          "purpose" : "Time-decay parameter",
          "htmlid" : "mw_fb376df0-97c5-4c60-befe-3708287b42f4",
          "value" : 
          [ "positive scalar" ] },
        
        { "name" : "fc",
          "purpose" : "Center frequency",
          "htmlid" : "mw_2f41cf48-0072-4a4d-9835-c09aea3fb922",
          "value" : 
          [ "positive scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "psi",
          "purpose" : "Complex Morlet wavelet",
          "htmlid" : "mw_5429dd47-cd34-4b1d-b38c-4a293662da41",
          "value" : 
          [ "vector" ] },
        
        { "name" : "x",
          "purpose" : "Sample points",
          "htmlid" : "mw_48b33445-b1d8-4080-948e-9a50d77cf8eb",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "cmorwavf.html#mw_1cb2a96b-52c6-401f-ac2e-a80161603def",
          "open_command" : "openExample('wavelet\/ComplexMorletWaveletExample')",
          "title" : "Complex Morlet Wavelet" },
        
        { "url" : "cmorwavf.html#mw_54409b4a-e81b-4a05-8829-6fcac15db405",
          "open_command" : "openExample('wavelet\/EffectOfBandwidthParameterOnMorletWaveletShapeExample')",
          "title" : "Effect of Bandwidth Parameter on Morlet Wavelet Shape" } ],
      "seealso" : 
      [ 
        { "url" : "waveinfo.html",
          "name" : "waveinfo" } ] },
    { "href" : "ref\/coifwavf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "coifwavf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Coiflet wavelet filter",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the scaling filter f associated with the Coiflet wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "f = coifwavf(wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Name of Coiflet",
          "htmlid" : "mw_241f9c65-a0c6-4ba2-a3fb-e4fcc01d42f3",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "examples" : 
      [ 
        { "url" : "coifwavf.html#mw_14bc1e98-0640-4762-a010-f14bc8f51332",
          "open_command" : "openExample('wavelet\/CoifletWaveletFilterExample')",
          "title" : "Coiflet Wavelet Filter" } ],
      "seealso" : 
      [ 
        { "url" : "waveinfo.html",
          "name" : "waveinfo" } ] },
    { "href" : "ref\/cqt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "cqt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Constant-Q nonstationary Gabor transform",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the constant-Q transform (CQT), cfs, of the input signal x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "cfs = cqt(x)",
            "[cfs,f] = cqt(x)",
            "[cfs,f,g,fshifts] = cqt(x)",
            "[cfs,f,g,fshifts,fintervals] = cqt(x)",
            "[cfs,f,g,fshifts,fintervals,bw] = cqt(x)",
            "[___] = cqt(___,Name,Value)",
            "cqt(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "d124e9156",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "SamplingFrequency",
              "purpose" : "Sampling frequency",
              "htmlid" : "d124e9212",
              "value" : 
              [ "positive scalar" ] },
            
            { "name" : "BinsPerOctave",
              "purpose" : "Number of bins per octave",
              "htmlid" : "d124e9232",
              "value" : 
              [ "12",
                "positive integer from 1 to 96" ],
              "defaultvalue" : "12" },
            
            { "name" : "TransformType",
              "purpose" : "Type of constant-Q transform",
              "htmlid" : "d124e9252",
              "value" : 
              [ "'full'",
                "'sparse'" ],
              "defaultvalue" : "'full'" },
            
            { "name" : "FrequencyLimits",
              "purpose" : "Frequency limits",
              "htmlid" : "d124e9280",
              "value" : 
              [ "two-element real vector" ] },
            
            { "name" : "Window",
              "purpose" : "Window to use as prototype function",
              "htmlid" : "d124e9312",
              "value" : 
              [ "'hann'",
                "'hamming'",
                "'blackmanharris'",
                "'itersine'",
                "'bartlett'" ],
              "defaultvalue" : "'hann'" } ] } ],
      "outputs" : 
      [ 
        { "name" : "cfs",
          "purpose" : "Constant-Q transform",
          "htmlid" : "d124e9364",
          "value" : 
          [ "matrix",
            "multidimensional array",
            "cell array",
            "structure array" ] },
        
        { "name" : "f",
          "purpose" : "Approximate bandpass center frequencies",
          "htmlid" : "d124e9476",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "g",
          "purpose" : "Gabor frames",
          "htmlid" : "d124e9500",
          "value" : 
          [ "cell array of real-valued vectors" ] },
        
        { "name" : "fshifts",
          "purpose" : "Frequency shifts",
          "htmlid" : "d124e9535",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "fintervals",
          "purpose" : "Frequency intervals",
          "htmlid" : "d124e9566",
          "value" : 
          [ "cell array of real-valued vectors" ] },
        
        { "name" : "bw",
          "purpose" : "Bandwidths",
          "htmlid" : "d124e9620",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "cqt.html#mw_2ecaa6d8-6e9d-4cce-b11e-27c1cf0f727e",
          "open_command" : "openExample('wavelet\/ConstantQTransformUsingDefaultValuesExample')",
          "title" : "Constant-Q Transform Using Default Values" },
        
        { "url" : "cqt.html#mw_f9991d24-2eba-4246-8cdb-a7fbdaf1396b",
          "open_command" : "openExample('wavelet\/CenterFrequenciesOfTheConstantQTransformExample')",
          "title" : "Center Frequencies of the Constant-Q Transform" },
        
        { "url" : "cqt.html#mw_e075be1a-8916-46ac-85e3-e39b68d29575",
          "open_command" : "openExample('wavelet\/VisualizeAndApplyConstantQTransformGaborFramesExample')",
          "title" : "Visualize and Apply Constant-Q Transform Gabor Frames" },
        
        { "url" : "cqt.html#mw_b9b54c4d-aef7-44e7-b6dd-569d198f6c04",
          "open_command" : "openExample('wavelet\/ConstantQTransformOfAnAudioSignalExample')",
          "title" : "Constant-Q Transform of Audio Signal" } ],
      "seealso" : 
      [ 
        { "url" : "icqt.html",
          "name" : "icqt" } ] },
    { "href" : "ref\/cwt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "cwt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Continuous 1-D wavelet transform",
      "introduced" : "R2016b",
      "description" : "This MATLAB function returns the continuous wavelet transform (CWT) of x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wt = cwt(x)",
            "wt = cwt(x,wname)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[wt,f] = cwt(___,fs)",
            "[wt,period] = cwt(___,ts)",
            "[wt,f,coi] = cwt(___)",
            "[wt,period,coi] = cwt(___,ts)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___,coi,fb] = cwt(___)",
            "[___,fb,scalingcfs] = cwt(___)",
            "[___] = cwt(___,Name=Value)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "cwt(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "bvaytl3-x",
          "value" : 
          [ "real- or complex-valued vector",
            "timetable",
            "gpuArray" ] },
        
        { "name" : "wname",
          "purpose" : "Analytic wavelet",
          "htmlid" : "bvaytl3-wname",
          "value" : 
          [ "\"morse\"",
            "\"amor\"",
            "\"bump\"" ],
          "defaultvalue" : "\"morse\"" },
        
        { "name" : "fs",
          "purpose" : "Sampling frequency",
          "htmlid" : "bvaytl3-fs",
          "value" : 
          [ "positive scalar" ] },
        
        { "name" : "ts",
          "purpose" : "Sampling period",
          "htmlid" : "bvaytl3-ts",
          "value" : 
          [ "scalar duration" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "ExtendSignal",
              "purpose" : "Extend input signal symmetrically",
              "htmlid" : "bvaytl3-ExtendSignal",
              "value" : 
              [ "true or 1",
                "false or 0" ],
              "defaultvalue" : "true or 1" },
            
            { "name" : "FrequencyLimits",
              "purpose" : "Frequency limits",
              "htmlid" : "d124e10865",
              "value" : 
              [ "two-element scalar vector" ] },
            
            { "name" : "PeriodLimits",
              "purpose" : "Period limits",
              "htmlid" : "d124e10920",
              "value" : 
              [ "two-element duration array" ] },
            
            { "name" : "VoicesPerOctave",
              "purpose" : "Number of voices per octave",
              "htmlid" : "bvaytl3-VoicesPerOctave",
              "value" : 
              [ "10",
                "integer from 1 to 48" ],
              "defaultvalue" : "10" },
            
            { "name" : "TimeBandwidth",
              "purpose" : "Time-bandwidth product of the Morse wavelet",
              "htmlid" : "bvaytl3-TimeBandwidth",
              "value" : 
              [ "60",
                "scalar greater than or equal to 3 and less than or equal to 120" ],
              "defaultvalue" : "60" },
            
            { "name" : "WaveletParameters",
              "purpose" : "Symmetry and time-bandwidth product of the Morse wavelet",
              "htmlid" : "bvaytl3-WaveletParameters",
              "value" : 
              [ "[3,60]",
                "two-element vector of scalars" ],
              "defaultvalue" : "[3,60]" },
            
            { "name" : "FilterBank",
              "purpose" : "CWT filter bank",
              "htmlid" : "d124e11117",
              "value" : 
              [ "cwtfilterbank object" ] } ] } ],
      "outputs" : 
      [ 
        { "name" : "wt",
          "purpose" : "Continuous wavelet transform",
          "htmlid" : "bvaytl3-wt",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "f",
          "purpose" : "Scale-to-frequency conversions",
          "htmlid" : "bvaytl3-f",
          "value" : 
          [ "vector" ] },
        
        { "name" : "period",
          "purpose" : "Scale-to-period conversions",
          "htmlid" : "bvaytl3-period",
          "value" : 
          [ "array" ] },
        
        { "name" : "coi",
          "purpose" : "Cone of influence",
          "htmlid" : "bvaytl3-coi",
          "value" : 
          [ "array of real numbers",
            "array of durations" ] },
        
        { "name" : "fb",
          "purpose" : "CWT filter bank",
          "htmlid" : "d124e11310",
          "value" : 
          [ "cwtfilterbank object" ] },
        
        { "name" : "scalingcfs",
          "purpose" : "Scaling coefficients",
          "htmlid" : "d124e11336",
          "value" : 
          [ "real- or complex-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "cwt.html#bvb0t7_",
          "open_command" : "openExample('wavelet\/CWTdefaultOfSpeechSignalExample')",
          "title" : "Continuous Wavelet Transform Using Default Values" },
        
        { "url" : "cwt.html#bvb0t8e-1",
          "open_command" : "openExample('wavelet\/CWTofSpeechSignalUsingMorletWaveletExample')",
          "title" : "Continuous Wavelet Transform Using Specified Wavelet" },
        
        { "url" : "cwt.html#bvb0t8f-1_1",
          "open_command" : "openExample('wavelet\/CWTofKobeEarthquakeDataExample')",
          "title" : "Continuous Wavelet Transform of Earthquake Data" },
        
        { "url" : "cwt.html#mw_ae84b041-f038-4c11-bf1a-6058481e25a8",
          "open_command" : "openExample('wavelet\/CWTofComplexExponentialsExample')",
          "title" : "Continuous Wavelet Transform of Two Complex Exponentials" },
        
        { "url" : "cwt.html#mw_c5d60d59-2768-4634-a322-93311a78fd8c",
          "open_command" : "openExample('wavelet\/SinusoidAndWaveletCoefficientAmplitudesExample')",
          "title" : "Sinusoid and Wavelet Coefficient Amplitudes" },
        
        { "url" : "cwt.html#mw_865ad1ac-69a8-4e80-b454-b6a7ea050a04",
          "open_command" : "openExample('wavelet\/UsingCWTFilterBankOnMultipleTimeSeriesExample')",
          "title" : "Using CWT Filter Bank on Multiple Time Series" },
        
        { "url" : "cwt.html#mw_6a602304-3548-4949-be64-87bc43b4b074",
          "open_command" : "openExample('wavelet\/CUDACodeFromCWTExample')",
          "title" : "CUDA Code from CWT" },
        
        { "url" : "cwt.html#mw_00e6791c-2525-4b09-9206-f20674403b99",
          "open_command" : "openExample('wavelet\/ChangeDefaultFrequencyAxisLabelsExample')",
          "title" : "Change Default Frequency Axis Labels" },
        
        { "url" : "cwt.html#mw_81dc2164-1d40-4ea3-950d-01f8a480da43",
          "open_command" : "openExample('wavelet\/ChangeScalogramColorationExample')",
          "title" : "Change Scalogram Coloration" },
        
        { "url" : "cwt.html#mw_32f9408a-9a51-44af-902c-dbd0d7c6c359",
          "open_command" : "openExample('wavelet\/ChangingTheTimeBandwidthExample')",
          "title" : "Changing the Time-bandwidth Product" },
        
        { "url" : "cwt.html#mw_f6c38b6d-dbbc-4485-8fac-9f506666abb9",
          "open_command" : "openExample('wavelet\/PlotCWTScalogramInSubplotExample')",
          "title" : "Plot CWT Scalogram in Subplot" } ],
      "seealso" : 
      [ 
        { "url" : "wavelettimefrequencyanalyzer-app.html",
          "name" : "Wavelet Time-Frequency Analyzer" },
        
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "icwt.html",
          "name" : "icwt" },
        
        { "url" : "cwtfreqbounds.html",
          "name" : "cwtfreqbounds" } ] },
    { "href" : "ref\/cwtfilterbank.bpfrequencies.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "BPfrequencies",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.BPfrequencies",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "CWT filter bank bandpass center frequencies",
      "deprecationstatus" : "announce",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the wavelet bandpass center frequencies bpcf for the CWT filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "bpcf = BPfrequencies(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e4753",
          "value" : 
          [ "cwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "bpcf",
          "purpose" : "Wavelet bandpass center frequencies",
          "htmlid" : "d124e4773",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.bpfrequencies.html#mw_869f1977-e33f-401f-bf11-acbd18757813",
          "open_command" : "openExample('wavelet\/WaveletBandpassFrequenciesExample')",
          "title" : "Wavelet Bandpass Center Frequencies" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfilterbank.powerbw.html",
          "name" : "powerbw" },
        
        { "url" : "cwtfilterbank.freqz.html",
          "name" : "freqz" },
        
        { "url" : "cwtfilterbank.centerperiods.html",
          "name" : "centerPeriods" } ] },
    { "href" : "ref\/cwtfilterbank.bpperiods.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "BPperiods",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.BPperiods",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "CWT filter bank bandpass periods",
      "deprecationstatus" : "announce",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the wavelet bandpass periods, p, for the continuous wavelet transform (CWT) filter bank, fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "p = BPperiods(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e4963",
          "value" : 
          [ "cwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "p",
          "purpose" : "Wavelet bandpass filter periods",
          "htmlid" : "d124e4983",
          "value" : 
          [ "real-valued vector",
            "duration array" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.bpperiods.html#mw_d635231d-9ab1-4e70-8597-720425682439",
          "open_command" : "openExample('wavelet\/WaveletFilterBankBandpassPeriodsExample')",
          "title" : "Wavelet Filter Bank Bandpass Periods" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfilterbank.powerbw.html",
          "name" : "powerbw" },
        
        { "url" : "cwtfilterbank.freqz.html",
          "name" : "freqz" },
        
        { "url" : "cwtfilterbank.centerfrequencies.html",
          "name" : "centerFrequencies" } ] },
    { "href" : "ref\/cwtfilterbank.centerfrequencies.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "centerFrequencies",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.centerFrequencies",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "CWT filter bank bandpass center frequencies",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the wavelet bandpass center frequencies bpcf for the CWT filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "bpcf = centerFrequencies(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e5270",
          "value" : 
          [ "cwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "bpcf",
          "purpose" : "Wavelet bandpass center frequencies",
          "htmlid" : "mw_8da055ca-334b-4d3c-b6c7-f2cf02430238",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.centerfrequencies.html#mw_9f3f4b5c-15e9-43e5-80e7-e6add0e0b4ae",
          "open_command" : "openExample('wavelet\/WaveletBandpassFrequenciesExample')",
          "title" : "Wavelet Bandpass Center Frequencies" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfilterbank.powerbw.html",
          "name" : "powerbw" },
        
        { "url" : "cwtfilterbank.freqz.html",
          "name" : "freqz" },
        
        { "url" : "cwtfilterbank.centerperiods.html",
          "name" : "centerPeriods" } ] },
    { "href" : "ref\/cwtfilterbank.centerperiods.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "centerPeriods",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.centerPeriods",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "CWT filter bank bandpass center periods",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the wavelet bandpass center periods p for the continuous wavelet transform (CWT) filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "p = centerPeriods(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e5680",
          "value" : 
          [ "cwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "p",
          "purpose" : "Wavelet bandpass center periods",
          "htmlid" : "mw_ba8012bc-7509-4706-886c-9cfacd2d9140",
          "value" : 
          [ "real-valued vector",
            "duration array" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.centerperiods.html#mw_faa6b01c-657a-4782-adbd-327c36ef6106",
          "open_command" : "openExample('wavelet\/WaveletFilterBankBandpassPeriodsExample')",
          "title" : "Wavelet Filter Bank Bandpass Periods" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfilterbank.powerbw.html",
          "name" : "powerbw" },
        
        { "url" : "cwtfilterbank.freqz.html",
          "name" : "freqz" },
        
        { "url" : "cwtfilterbank.centerfrequencies.html",
          "name" : "centerFrequencies" } ] },
    { "href" : "ref\/cwtfilterbank.freqz.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "freqz",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.freqz",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "CWT filter bank frequency responses",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the frequency responses for the wavelet filters, psidft, and the frequency vector, f, for the continuous wavelet transform (CWT) filter bank, fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[psidft,f] = freqz(fb)",
            "[___] = freqz(___,Name=Value)",
            "freqz(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e42339",
          "value" : 
          [ "cwtfilterbank object" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "IncludeLowpass",
              "purpose" : "Append lowpass filter frequency response",
              "htmlid" : "mw_6a1d1762-6187-4d6d-997f-c8f0e9bb2385",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" },
            
            { "name" : "FrequencyRange",
              "purpose" : "Frequency range for filter responses",
              "htmlid" : "mw_c4100d52-5461-4f22-8507-db76a2d3b3ad",
              "value" : 
              [ "\"onesided\"",
                "\"twosided\"" ],
              "defaultvalue" : "\"onesided\"" } ] } ],
      "outputs" : 
      [ 
        { "name" : "psidft",
          "purpose" : "Frequency responses",
          "htmlid" : "d124e42517",
          "value" : 
          [ "real-valued 2-D matrix" ] },
        
        { "name" : "f",
          "purpose" : "Frequencies",
          "htmlid" : "d124e42552",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.freqz.html#mw_d0842ecc-d687-4f5f-a91c-69305715dc1e",
          "open_command" : "openExample('wavelet\/InvertCWTUsingApproximateSynthesisFiltersExample')",
          "title" : "Invert CWT Using Approximate Synthesis Filters" },
        
        { "url" : "cwtfilterbank.freqz.html#mw_308f529e-06db-4699-821f-92f86edd64c4",
          "open_command" : "openExample('wavelet\/FrequencyResponsesOfACWTFilterBankExample')",
          "title" : "Frequency Responses of Continuous Wavelet Transform Filter Bank" },
        
        { "url" : "cwtfilterbank.freqz.html#mw_0fef1af5-8f05-4f55-9ed1-47e6b45d5f9d",
          "open_command" : "openExample('wavelet\/BoundaryHandlingAndFrequencyRangeExample')",
          "title" : "Boundary Handling and Frequency Range" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfilterbank.powerbw.html",
          "name" : "powerbw" },
        
        { "url" : "cwtfilterbank.centerfrequencies.html",
          "name" : "centerFrequencies" },
        
        { "url" : "cwtfilterbank.centerperiods.html",
          "name" : "centerPeriods" } ] },
    { "href" : "ref\/cwtfilterbank.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "cwtfilterbank" },
        
        { "type" : "function",
          "name" : "cwtfilterbank",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Continuous wavelet transform filter bank",
      "introduced" : "R2018a",
      "description" : "Use cwtfilterbank to create a continuous wavelet transform (CWT) filter bank.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "fb = cwtfilterbank",
            "fb = cwtfilterbank(Name=Value)" ] } ],
      "classpropertygroup" : 
      [ 
        { "classproperty" : 
          [ 
            { "name" : "SignalLength",
              "purpose" : "Length of the signal",
              "htmlid" : "mw_6d2be4d1-35bf-4406-802d-eaa997bd7aec",
              "value" : 
              [ "1024",
                "positive integer ≥ 4" ],
              "defaultvalue" : "1024" },
            
            { "name" : "Wavelet",
              "purpose" : "Analysis wavelet",
              "htmlid" : "mw_9b2362d1-b192-4242-9207-5deeaca87174",
              "value" : 
              [ "\"Morse\"",
                "\"amor\"",
                "\"bump\"" ],
              "defaultvalue" : "\"Morse\"" },
            
            { "name" : "VoicesPerOctave",
              "purpose" : "Number of voices per octave",
              "htmlid" : "mw_34e4b961-286f-4e5d-9fd0-f1958ac1d46f",
              "value" : 
              [ "10",
                "integer between 1 and 48" ],
              "defaultvalue" : "10" },
            
            { "name" : "SamplingFrequency",
              "purpose" : "Sampling frequency in hertz",
              "htmlid" : "mw_8a5c46b8-5e41-45b0-89d2-476ef61b8613",
              "value" : 
              [ "1",
                "positive scalar" ],
              "defaultvalue" : "1" },
            
            { "name" : "FrequencyLimits",
              "purpose" : "Frequency limits",
              "htmlid" : "mw_b65107a9-d496-43b5-9694-054217a681a2",
              "value" : 
              [ "two-element scalar vector" ] },
            
            { "name" : "SamplingPeriod",
              "purpose" : "Sampling period",
              "htmlid" : "mw_b7f1a3b6-d2ad-4a4c-8ffe-fb15f5056e6c",
              "value" : 
              [ "duration scalar" ] },
            
            { "name" : "PeriodLimits",
              "purpose" : "Period limits",
              "htmlid" : "mw_f8ed2960-c383-4fd5-af14-acece5321a26",
              "value" : 
              [ "two-element duration array" ] },
            
            { "name" : "TimeBandwidth",
              "purpose" : "Time-bandwidth product for the Morse wavelet",
              "htmlid" : "mw_d25107ce-ef7e-4c7c-8e57-68d8c166b4ee",
              "value" : 
              [ "60",
                "positive scalar" ],
              "defaultvalue" : "60" },
            
            { "name" : "WaveletParameters",
              "purpose" : "Morse wavelet parameters",
              "htmlid" : "mw_046d55d5-f1e7-4704-9067-9a61fcac2216",
              "value" : 
              [ "[3,60]",
                "two-element vector of scalars" ],
              "defaultvalue" : "[3,60]" },
            
            { "name" : "Boundary",
              "purpose" : "Boundary extension",
              "htmlid" : "mw_9d814fb2-319c-4725-849e-c3849b0ccd75",
              "value" : 
              [ "\"reflection\"",
                "\"periodic\"" ],
              "defaultvalue" : "\"reflection\"" } ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.html#mw_aae97113-11c3-4752-bef2-6b0bb73a7c36",
          "open_command" : "openExample('wavelet\/ContinuousWaveletFilterBankExample')",
          "title" : "Continuous Wavelet Transform Filter Bank" },
        
        { "url" : "cwtfilterbank.html#mw_f8dcf17e-2e38-42d6-8e87-d9246c95d6c0",
          "open_command" : "openExample('wavelet\/FrequencyResolutionOfCWTFilterBanksExample')",
          "title" : "Frequency Resolution of Continuous Wavelet Transform Filter Banks" },
        
        { "url" : "cwtfilterbank.html#mw_4a669c4d-85dd-46c6-9851-bb768139f3fb",
          "open_command" : "openExample('wavelet\/SinusoidAndWaveletCoefficientAmplitudesExample')",
          "title" : "Sinusoid and Wavelet Coefficient Amplitudes" },
        
        { "url" : "cwtfilterbank.html#mw_c07efe81-5d89-4243-85ba-51ec1ccfb2ff",
          "open_command" : "openExample('wavelet\/GeneralizedMorseAndAnalyticMorletWaveletsExample')",
          "title" : "Generalized Morse and Analytic Morlet Wavelets" },
        
        { "url" : "cwtfilterbank.html#mw_112e429b-9031-47f5-9009-c3444d47a159",
          "open_command" : "openExample('wavelet\/ChangingTheTimeBandwidthExample')",
          "title" : "Changing the Time-bandwidth Product" },
        
        { "url" : "cwtfilterbank.html#mw_ad3e7ff7-af28-47cf-ac68-17b5b7eababc",
          "open_command" : "openExample('wavelet\/UsingCWTFilterBankOnMultipleTimeSeriesExample')",
          "title" : "Using CWT Filter Bank on Multiple Time Series" },
        
        { "url" : "cwtfilterbank.html#mw_159e8c83-edf2-4c35-bf0e-cdb62e13d825",
          "open_command" : "openExample('wavelet\/PlotCWTScalogramInSubplotExample')",
          "title" : "Plot CWT Scalogram in Subplot" } ],
      "seealso" : 
      [ 
        { "url" : "wavelettimefrequencyanalyzer-app.html",
          "name" : "Wavelet Time-Frequency Analyzer" },
        
        { "url" : "cwt.html",
          "name" : "cwt" },
        
        { "url" : "cwtfreqbounds.html",
          "name" : "cwtfreqbounds" },
        
        { "url" : "icwt.html",
          "name" : "icwt" } ] },
    { "href" : "ref\/cwtfilterbank.powerbw.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "powerbw",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.powerbw",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "CWT filter bank 3 dB bandwidths",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns 3 dB (half-power) bandwidths for the wavelet filters in the filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "bw = powerbw(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e97717",
          "value" : 
          [ "cwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "bw",
          "purpose" : "3 dB (half-power) bandwidths",
          "htmlid" : "d124e97737",
          "value" : 
          [ "table" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.powerbw.html#mw_a1df7072-7082-4a78-a2a1-5a51ab03e4f3",
          "open_command" : "openExample('wavelet\/HalfPowerWaveletBandwidthsExample')",
          "title" : "Half-Power Wavelet Bandwidths" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfilterbank.freqz.html",
          "name" : "freqz" },
        
        { "url" : "cwtfilterbank.centerfrequencies.html",
          "name" : "centerFrequencies" } ] },
    { "href" : "ref\/cwtfilterbank.qfactor.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "qfactor",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.qfactor",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "CWT filter bank quality factor",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the quality factor for the wavelet bandpass filters in fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "qf = qfactor(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e98558",
          "value" : 
          [ "cwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "qf",
          "purpose" : "Quality factor",
          "htmlid" : "d124e98578",
          "value" : 
          [ "positive number" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.qfactor.html#mw_b0fc994c-b39a-4958-8c17-81363c29cde1",
          "open_command" : "openExample('wavelet\/QualityFactorOfCWTFilterBankExample')",
          "title" : "Quality Factor of CWT Filter Bank" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfilterbank.powerbw.html",
          "name" : "powerbw" } ] },
    { "href" : "ref\/cwtfilterbank.scales.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "scales",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.scales",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "CWT filter bank scales",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the raw (unitless) scales used in creating the wavelet bandpass filters.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "rs = scales(fb)",
            "[rs,cs] = scales(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e102536",
          "value" : 
          [ "cwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "rs",
          "purpose" : "Raw scales",
          "htmlid" : "d124e102556",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "cs",
          "purpose" : "Converted scales",
          "htmlid" : "d124e102585",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.scales.html#mw_c0612066-61d8-45b2-804d-d4879c8ebfe7",
          "open_command" : "openExample('wavelet\/CWTFilterBankScalesExample')",
          "title" : "CWT Filter Bank Scales" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfilterbank.centerperiods.html",
          "name" : "centerPeriods" },
        
        { "url" : "cwtfilterbank.centerfrequencies.html",
          "name" : "centerFrequencies" } ] },
    { "href" : "ref\/cwtfilterbank.scalespectrum.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "scaleSpectrum",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.scaleSpectrum",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Scale-averaged wavelet spectrum",
      "introduced" : "R2020b",
      "description" : "This MATLAB function returns the scale-averaged wavelet power spectrum of the signal x using the CWT filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "savgp = scaleSpectrum(fb,x)",
            "savgp = scaleSpectrum(fb,cfs)",
            "[savgp,scidx] = scaleSpectrum(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = scaleSpectrum(___,Name,Value)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "scaleSpectrum(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e102890",
          "value" : 
          [ "cwtfilterbank object" ] },
        
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_f0c8b87d-5dee-4faf-a4ad-bb7738df0d76",
          "value" : 
          [ "vector" ] },
        
        { "name" : "cfs",
          "purpose" : "CWT coefficients",
          "htmlid" : "mw_62109399-5df6-4386-92b6-cd0b324a0a56",
          "value" : 
          [ "matrix",
            "3-D array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Normalization",
              "purpose" : "Normalization",
              "htmlid" : "mw_0054dd47-c9e9-4623-b8f6-4a1d40b0efbc",
              "value" : 
              [ "'var'",
                "'pdf'",
                "'none'" ],
              "defaultvalue" : "'var'" },
            
            { "name" : "SpectrumType",
              "purpose" : "Type of wavelet spectrum",
              "htmlid" : "mw_f4d8a3c5-f82d-49ee-874f-43eb60d91a1a",
              "value" : 
              [ "'power'",
                "'density'" ],
              "defaultvalue" : "'power'" },
            
            { "name" : "FrequencyLimits",
              "purpose" : "Frequency limits",
              "htmlid" : "mw_1df4492a-9e9f-4056-8ae3-4d4bd186104f",
              "value" : 
              [ "two-element vector" ] },
            
            { "name" : "PeriodLimits",
              "purpose" : "Period limits",
              "htmlid" : "mw_c58f7649-954c-474e-aeb6-59fea6f0a496",
              "value" : 
              [ "two-element vector" ] } ] } ],
      "outputs" : 
      [ 
        { "name" : "savgp",
          "purpose" : "Scale-averaged wavelet power spectrum",
          "htmlid" : "mw_5dc5d3bc-1a14-44b9-be2f-8e6a575e173f",
          "value" : 
          [ "real-valued vector",
            "real-valued 3-D array" ] },
        
        { "name" : "scidx",
          "purpose" : "Scale indices",
          "htmlid" : "mw_fb021087-d5bc-4352-927e-7a68d5f4b513",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.scalespectrum.html#mw_223250aa-098d-4a29-8cbb-4080e0b96130",
          "open_command" : "openExample('wavelet\/ScaleAveragedWaveletSpectrumExample')",
          "title" : "Scale-Averaged Wavelet Spectrum" },
        
        { "url" : "cwtfilterbank.scalespectrum.html#mw_3626a7fb-4e61-4238-83f4-3ae69a8f5ea5",
          "open_command" : "openExample('wavelet\/NormalizeScaleAveragedWaveletSpectrumExample')",
          "title" : "Normalize Scale-Averaged Wavelet Spectrum" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfilterbank.timespectrum.html",
          "name" : "timeSpectrum" } ] },
    { "href" : "ref\/cwtfilterbank.timespectrum.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "timeSpectrum",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.timeSpectrum",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Time-averaged wavelet spectrum",
      "introduced" : "R2020b",
      "description" : "This MATLAB function returns the time-averaged wavelet power spectrum of the signal x using the continuous wavelet transform (CWT) filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "tavgp = timeSpectrum(fb,x)",
            "tavgp = timeSpectrum(fb,cfs)",
            "[tavgp,f] = timeSpectrum(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = timeSpectrum(___,Name,Value)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "timeSpectrum(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e112499",
          "value" : 
          [ "cwtfilterbank object" ] },
        
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_bf405e8e-239e-46b9-be62-3cc05e816fe2",
          "value" : 
          [ "vector" ] },
        
        { "name" : "cfs",
          "purpose" : "CWT coefficients",
          "htmlid" : "mw_6e360afa-1c93-49df-bc18-3038810dccd0",
          "value" : 
          [ "matrix",
            "3-D array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Normalization",
              "purpose" : "Normalization",
              "htmlid" : "mw_fd54db6d-3406-482b-865d-24a57ec7b3b8",
              "value" : 
              [ "'var'",
                "'pdf'",
                "'none'" ],
              "defaultvalue" : "'var'" },
            
            { "name" : "SpectrumType",
              "purpose" : "Type of wavelet spectrum",
              "htmlid" : "mw_3d0e9233-b7df-49e5-b6ea-ccfbdfeaf049",
              "value" : 
              [ "'power'",
                "'density'" ],
              "defaultvalue" : "'power'" },
            
            { "name" : "TimeLimits",
              "purpose" : "Time limits",
              "htmlid" : "mw_ecf23c2c-76cd-4d1f-83a3-e21f50209291",
              "value" : 
              [ "[1 length(x)] or [1 size(cfs,2)]",
                "two-element vector" ],
              "defaultvalue" : "[1 length(x)] or [1 size(cfs,2)]" } ] } ],
      "outputs" : 
      [ 
        { "name" : "tavgp",
          "purpose" : "Time-averaged wavelet power spectrum",
          "htmlid" : "mw_6a96e5cf-8b05-462e-bea1-286c86093966",
          "value" : 
          [ "real-valued vector",
            "real-valued 3-D array" ] },
        
        { "name" : "f",
          "purpose" : "Center frequencies or center periods",
          "htmlid" : "mw_dddf3b85-b184-49ca-ad95-554c71e5f1c6",
          "value" : 
          [ "column vector",
            "duration array" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.timespectrum.html#mw_d09a9067-778d-459c-bdfb-f7f102c5b6dd",
          "open_command" : "openExample('wavelet\/TimeAveragedWaveletSpectrumOfOceanicEddyDataExample')",
          "title" : "Time-Averaged Wavelet Spectrum of Oceanic Eddy Data" },
        
        { "url" : "cwtfilterbank.timespectrum.html#mw_c8815234-76c3-4e58-85f0-753e4aac4841",
          "open_command" : "openExample('wavelet\/NormalizeTimeAveragedWaveletSpectrumExample')",
          "title" : "Normalize Time-Averaged Wavelet Spectrum" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfilterbank.scalespectrum.html",
          "name" : "scaleSpectrum" } ] },
    { "href" : "ref\/cwtfilterbank.wavelets.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wavelets",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.wavelets",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "CWT filter bank time-domain wavelets",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the time-domain wavelets psi for the continuous wavelet transform (CWT) filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "psi = wavelets(fb)",
            "[psi,t] = wavelets(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e121448",
          "value" : 
          [ "cwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "psi",
          "purpose" : "Time-domain wavelets",
          "htmlid" : "d124e121468",
          "value" : 
          [ "complex-valued matrix" ] },
        
        { "name" : "t",
          "purpose" : "Sampling instants",
          "htmlid" : "d124e121499",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.wavelets.html#mw_c659ed31-b775-48f9-b328-53bb482de4a5",
          "open_command" : "openExample('wavelet\/FilterBankTimeDomainWaveletsExample')",
          "title" : "Filter Bank Time Domain Wavelets" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfilterbank.waveletsupport.html",
          "name" : "waveletsupport" } ] },
    { "href" : "ref\/cwtfilterbank.waveletsupport.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "waveletsupport",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.waveletsupport",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "CWT filter bank time supports",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the wavelet time supports, defined as the time interval in which all of the wavelet's energy occurs.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "spsi = waveletsupport(fb)",
            "spsi = waveletsupport(fb,thresh)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e124510",
          "value" : 
          [ "cwtfilterbank object" ] },
        
        { "name" : "thresh",
          "purpose" : "Time support threshold",
          "htmlid" : "d124e124526",
          "value" : 
          [ "10e–4",
            "positive real number" ],
          "defaultvalue" : "10e–4" } ],
      "outputs" : 
      [ 
        { "name" : "spsi",
          "purpose" : "Wavelet time supports",
          "htmlid" : "d124e124560",
          "value" : 
          [ "table" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.waveletsupport.html#mw_1e368599-021c-4d9a-adf1-14e02cb69364",
          "open_command" : "openExample('wavelet\/WaveletFilterBankTimeSupportsExample')",
          "title" : "Wavelet Filter Bank Time Supports" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfilterbank.wavelets.html",
          "name" : "wavelets" } ] },
    { "href" : "ref\/cwtfilterbank.wt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wt",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtfilterbank.wt",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Continuous wavelet transform with filter bank",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the continuous wavelet transform (CWT) coefficients of the signal x, using fb, a CWT filter bank.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "cfs = wt(fb,x)",
            "[cfs,f] = wt(fb,x)",
            "[cfs,f,coi] = wt(fb,x)",
            "[cfs,f,coi,scalcfs] = wt(fb,x)",
            "[cfs,p] = wt(fb,x)",
            "[cfs,p,coi] = wt(fb,x)",
            "[cfs,p,coi,scalcfs] = wt(fb,x)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Continuous wavelet transform filter bank",
          "htmlid" : "d124e153666",
          "value" : 
          [ "cwtfilterbank object" ] },
        
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "d124e153682",
          "value" : 
          [ "real- or complex-valued vector",
            "gpuArray" ] } ],
      "outputs" : 
      [ 
        { "name" : "cfs",
          "purpose" : "Continuous wavelet transform",
          "htmlid" : "d124e153723",
          "value" : 
          [ "matrix",
            "3-D array" ] },
        
        { "name" : "f",
          "purpose" : "Frequencies",
          "htmlid" : "d124e153763",
          "value" : 
          [ "vector" ] },
        
        { "name" : "p",
          "purpose" : "Periods",
          "htmlid" : "d124e153796",
          "value" : 
          [ "array" ] },
        
        { "name" : "coi",
          "purpose" : "Cone of influence",
          "htmlid" : "d124e153825",
          "value" : 
          [ "array of real numbers",
            "array of durations" ] },
        
        { "name" : "scalcfs",
          "purpose" : "Scaling coefficients",
          "htmlid" : "d124e153863",
          "value" : 
          [ "real- or complex-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilterbank.wt.html#mw_73efdd1f-37d1-4464-a80e-d918cbaf0e9f",
          "open_command" : "openExample('wavelet\/ContinuousWaveletTransformUsingAFilterBankExample')",
          "title" : "Continuous Wavelet Transform Using Filter Bank" },
        
        { "url" : "cwtfilterbank.wt.html#mw_0ec214cd-8e73-4af1-a174-e42fa288a145",
          "open_command" : "openExample('wavelet\/ICWTTransformUsingScalingCoefficientsExample')",
          "title" : "Inverse Continuous Wavelet Transform Using Scaling Coefficients" },
        
        { "url" : "cwtfilterbank.wt.html#mw_43a23e5f-ad5e-4916-9e14-4f861f2a4919",
          "open_command" : "openExample('wavelet\/UsingCWTFilterBankOnMultipleTimeSeriesExample')",
          "title" : "Using CWT Filter Bank on Multiple Time Series" } ],
      "seealso" : 
      [ 
        { "url" : "wavelettimefrequencyanalyzer-app.html",
          "name" : "Wavelet Time-Frequency Analyzer" },
        
        { "url" : "cwt.html",
          "name" : "cwt" },
        
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "icwt.html",
          "name" : "icwt" } ] },
    { "href" : "ref\/cwtfilters2array.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "cwtfilters2array",
          "fcntype" : "simple" } ],
      "refpurpose" : "Convert CWT filter bank to reduced-weight tensor for deep learning",
      "introduced" : "R2022b",
      "description" : "This MATLAB function converts the CWT filter bank wfb to a reduced-weight CWT filter tensor psifvec for deep learning.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[psifvec,filteridx] = cwtfilters2array(wfb)",
            "[psifvec,filteridx] = cwtfilters2array(___,thresh)",
            "[psifvec,filteridx] = cwtfilters2array(___,IncludeLowpass=tf)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wfb",
          "purpose" : "CWT filter bank",
          "htmlid" : "mw_73de24b0-80d8-4aba-9577-aec3d72ac4e2",
          "value" : 
          [ "cwtfilterbank object" ] },
        
        { "name" : "thresh",
          "purpose" : "Threshold",
          "htmlid" : "mw_1ec2ce5d-2eff-4ca0-a0c2-727413fcb68d",
          "value" : 
          [ "1e–8",
            "real scalar" ],
          "defaultvalue" : "1e–8" },
        
        { "name" : "tf",
          "purpose" : "Include lowpass filter",
          "htmlid" : "mw_ddcd6c7e-45bc-4263-a40d-3a83a4fb40a1",
          "value" : 
          [ "false or 0",
            "true or 1" ],
          "defaultvalue" : "false or 0" } ],
      "outputs" : 
      [ 
        { "name" : "psifvec",
          "purpose" : "Reduced-weight CWT filter tensor",
          "htmlid" : "mw_e5af1e2b-26d2-4fb1-a3e6-7265c2938405",
          "value" : 
          [ "array" ] },
        
        { "name" : "filteridx",
          "purpose" : "Bookkeeping matrix",
          "htmlid" : "mw_79e39656-e155-407f-86b2-ead90100f8ac",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfilters2array.html#mw_543e39d2-067c-48bf-b0f1-2f314a38b404",
          "open_command" : "openExample('deeplearning_shared\/ObtainReducedWeightCWTFilterTensorExample')",
          "title" : "Obtain Reduced-Weight CWT Filter Tensor" } ],
      "seealso" : 
      [ 
        { "url" : "dlcwt.html",
          "name" : "dlcwt" },
        
        { "url" : "array2cwtfilters.html",
          "name" : "array2cwtfilters" },
        
        { "url" : "dlmodwt.html",
          "name" : "dlmodwt" },
        
        { "url" : "cwtlayer.html",
          "name" : "cwtLayer" },
        
        { "url" : "modwtlayer.html",
          "name" : "modwtLayer" },
        
        { "url" : "..\/..\/signal\/ref\/stftlayer.html",
          "name" : "stftLayer" } ] },
    { "href" : "ref\/cwtfreqbounds.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "cwtfreqbounds",
          "fcntype" : "simple" } ],
      "refpurpose" : "CWT maximum and minimum frequency or period",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the minimum and maximum wavelet bandpass frequencies in cycles\/sample for a signal of length N.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[minfreq,maxfreq] = cwtfreqbounds(N)",
            "[minfreq,maxfreq] = cwtfreqbounds(N,Fs)",
            "[maxperiod,minperiod] = cwtfreqbounds(N,Ts)",
            "[___] = cwtfreqbounds(___,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "N",
          "purpose" : "Signal length",
          "htmlid" : "d124e14333",
          "value" : 
          [ "positive integer ≥ 4" ] },
        
        { "name" : "Fs",
          "purpose" : "Sampling frequency",
          "htmlid" : "d124e14355",
          "value" : 
          [ "positive scalar" ] },
        
        { "name" : "Ts",
          "purpose" : "Sampling period",
          "htmlid" : "d124e14380",
          "value" : 
          [ "scalar duration" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Wavelet",
              "purpose" : "Analysis wavelet",
              "htmlid" : "d124e14435",
              "value" : 
              [ "\"Morse\"",
                "\"amor\"",
                "\"bump\"" ],
              "defaultvalue" : "\"Morse\"" },
            
            { "name" : "Cutoff",
              "purpose" : "Percentage of the peak magnitude",
              "htmlid" : "d124e14477",
              "value" : 
              [ "50 for the Morse wavelet, 10 for the analytic Morlet and bump wavelets",
                "scalar between 0 and 100" ],
              "defaultvalue" : "50 for the Morse wavelet, 10 for the analytic Morlet and bump wavelets" },
            
            { "name" : "StandardDeviations",
              "purpose" : "Number of time standard deviations",
              "htmlid" : "d124e14546",
              "value" : 
              [ "2",
                "positive integer ≥ 2" ],
              "defaultvalue" : "2" },
            
            { "name" : "TimeBandwidth",
              "purpose" : "Time-bandwidth for the Morse wavelet",
              "htmlid" : "d124e14587",
              "value" : 
              [ "60",
                "scalar greater than 3 and less than or equal to 120" ],
              "defaultvalue" : "60" },
            
            { "name" : "WaveletParameters",
              "purpose" : "Morse wavelet parameters",
              "htmlid" : "d124e14624",
              "value" : 
              [ "[3,60]",
                "two-element vector of scalars" ],
              "defaultvalue" : "[3,60]" },
            
            { "name" : "VoicesPerOctave",
              "purpose" : "Number of voices per octave",
              "htmlid" : "d124e14659",
              "value" : 
              [ "10",
                "integer between 1 and 48" ],
              "defaultvalue" : "10" } ] } ],
      "outputs" : 
      [ 
        { "name" : "minfreq",
          "purpose" : "Minimum wavelet bandpass frequency",
          "htmlid" : "d124e14688",
          "value" : 
          [ "scalar" ] },
        
        { "name" : "maxfreq",
          "purpose" : "Maximum wavelet bandpass frequency",
          "htmlid" : "d124e14717",
          "value" : 
          [ "scalar" ] },
        
        { "name" : "maxperiod",
          "purpose" : "Maximum wavelet bandpass period",
          "htmlid" : "d124e14746",
          "value" : 
          [ "scalar duration" ] },
        
        { "name" : "minperiod",
          "purpose" : "Minimum wavelet bandpass period",
          "htmlid" : "d124e14782",
          "value" : 
          [ "scalar duration" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtfreqbounds.html#mw_2998ecd1-f540-4a9f-a432-04ed5c1bac50",
          "open_command" : "openExample('wavelet\/WaveletBandpassFrequenciesUsingDefaultValuesExample')",
          "title" : "Wavelet Bandpass Frequencies Using Default Values" },
        
        { "url" : "cwtfreqbounds.html#mw_30d08af1-fedd-40a0-8406-bec3d86e62d1",
          "open_command" : "openExample('wavelet\/ConstructCWTFilterBankWithPeakMagnitudeAtNyquistExample')",
          "title" : "Construct CWT Filter Bank With Peak Magnitude at Nyquist" },
        
        { "url" : "cwtfreqbounds.html#mw_b78360c4-71ba-4773-94ff-3e4946e7ca08",
          "open_command" : "openExample('wavelet\/DecayHighestFrequencyWaveletInCWTFBToSpecificValueExample')",
          "title" : "Decay Highest Frequency Wavelet in CWT Filter Bank to Specific Value" },
        
        { "url" : "cwtfreqbounds.html#mw_714625f3-8841-45e7-a079-1b2d8f99e370",
          "open_command" : "openExample('wavelet\/FrequencyRangeForZeroAndEffectivelyZeroCutoffValuesExample')",
          "title" : "Frequency Range for Strictly Zero and Effectively Zero Cutoff Values" } ],
      "seealso" : 
      [ 
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwt.html",
          "name" : "cwt" } ] },
    { "href" : "ref\/cwtft2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "cwtft2",
          "fcntype" : "simple" } ],
      "refpurpose" : "2-D continuous wavelet transform",
      "introduced" : "R2013b",
      "description" : "This MATLAB function returns the 2-D continuous wavelet transform (CWT) of X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "cwtstruct = cwtft2(X)",
            "cwtstruct = cwtft2(X,\"plot\")",
            "cwtstruct = cwtft2(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "bt1oh8w-x",
          "value" : 
          [ "array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "angles",
              "purpose" : "Angles",
              "htmlid" : "bt1oh8w-angles",
              "value" : 
              [ "0",
                "scalar",
                "vector" ],
              "defaultvalue" : "0" },
            
            { "name" : "norm",
              "purpose" : "Normalization",
              "htmlid" : "bt1oh8w-norm",
              "value" : 
              [ "\"L2\"",
                "\"L1\"",
                "\"L0\"" ],
              "defaultvalue" : "\"L2\"" },
            
            { "name" : "scales",
              "purpose" : "Scales",
              "htmlid" : "bt1oh8w-scales",
              "value" : 
              [ "2.^(0:5)",
                "scalar",
                "vector" ],
              "defaultvalue" : "2.^(0:5)" },
            
            { "name" : "wavelet",
              "purpose" : "Analyzing wavelet",
              "htmlid" : "bt1oh8w-wavelet",
              "value" : 
              [ "\"morlet\"",
                "character vector",
                "string scalar",
                "structure",
                "cell array" ],
              "defaultvalue" : "\"morlet\"" } ] } ],
      "outputs" : 
      [ 
        { "name" : "cwtstruct",
          "purpose" : "2-D CWT",
          "htmlid" : "bt1oh8w-cwtstruct",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtft2.html#bt1o15b-4",
          "open_command" : "openExample('wavelet\/DCWTWithMorletWaveletExample')",
          "title" : "2-D CWT with Morlet Wavelet" },
        
        { "url" : "cwtft2.html#bt1o1xz",
          "open_command" : "openExample('wavelet\/Plot2DCWTExample')",
          "title" : "Plot 2-D CWT" },
        
        { "url" : "cwtft2.html#bt1oic3-2",
          "open_command" : "openExample('wavelet\/CompareIsotropicandAnisotropicWaveletsExample')",
          "title" : "Compare Isotropic and Anisotropic Wavelets" } ],
      "seealso" : 
      [ 
        { "url" : "cwtftinfo2.html",
          "name" : "cwtftinfo2" } ] },
    { "href" : "ref\/cwtftinfo2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "cwtftinfo2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Supported 2-D CWT wavelets and Fourier transforms",
      "introduced" : "R2013b",
      "description" : "This MATLAB function lists the supported 2-D continuous wavelet transform (CWT) wavelets and corresponding parameters for use with cwtft2.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "cwtftinfo2",
            "cwtftinfo2(wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Wavelet name",
          "htmlid" : "bt1o3sf-wname",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtftinfo2.html#bt1o3wz-2",
          "open_command" : "openExample('wavelet\/AvailableWaveletswithParametersExample')",
          "title" : "Available Wavelets with Parameters" },
        
        { "url" : "cwtftinfo2.html#bt1o343-2",
          "open_command" : "openExample('wavelet\/DisplaytheExpressionforthe2DFourierTransformExample')",
          "title" : "Display the Expression for the 2-D Fourier Transform" } ],
      "seealso" : 
      [ 
        { "url" : "cwtft2.html",
          "name" : "cwtft2" } ] },
    { "href" : "ref\/cwtlayer.filterbank.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "filterbank",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "cwtLayer.filterbank",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Full-weight CWT filter bank for deep learning",
      "introduced" : "R2022b",
      "description" : "This MATLAB function returns the full-weight continuous wavelet transform (CWT) filter bank for the cwtLayer, clayer.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "psif = filterbank(clayer)" ] } ],
      "inputs" : 
      [ 
        { "name" : "clayer",
          "purpose" : "CWT layer",
          "htmlid" : "mw_2246e91c-7b5b-4d25-9f01-6524ac03dc45",
          "value" : 
          [ "cwtLayer object" ] } ],
      "outputs" : 
      [ 
        { "name" : "psif",
          "purpose" : "Full-weight CWT filter bank",
          "htmlid" : "mw_08f55772-e459-4eff-a61f-3a6a0abfd1d0",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "cwtlayer.filterbank.html#mw_97c4c3c3-716c-4516-8dbc-2ad4c9a20aa2",
          "open_command" : "openExample('deeplearning_shared\/ObtainFullWeightCWTFilterBankExample')",
          "title" : "Obtain Full-Weight CWT Filter Bank" } ],
      "seealso" : 
      [ 
        { "url" : "dlcwt.html",
          "name" : "dlcwt" },
        
        { "url" : "cwtfilters2array.html",
          "name" : "cwtfilters2array" },
        
        { "url" : "cwtlayer.html",
          "name" : "cwtLayer" },
        
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" } ] },
    { "href" : "ref\/cwtlayer.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "cwtLayer" },
        
        { "type" : "function",
          "name" : "cwtLayer",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Continuous wavelet transform (CWT) layer",
      "introduced" : "R2022b",
      "description" : "A CWT layer computes the CWT of the input.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "layer = cwtLayer",
            "layer = cwtLayer(Name=Value)" ] } ],
      "classpropertygroup" : 
      [ 
        { "title" : "CWT",
          "classproperty" : 
          [ 
            { "name" : "SignalLength",
              "purpose" : "Signal length in samples",
              "htmlid" : "mw_08f62734-12e7-4df9-a3cd-e2225fa1c4af",
              "value" : 
              [ "1024",
                "positive integer" ],
              "defaultvalue" : "1024" },
            
            { "name" : "Wavelet",
              "purpose" : "Analysis wavelet",
              "htmlid" : "mw_cdd27de6-6072-4c79-95b9-c1414260f3fb",
              "value" : 
              [ "\"Morse\"",
                "\"amor\"",
                "\"bump\"" ],
              "defaultvalue" : "\"Morse\"" },
            
            { "name" : "Threshold",
              "purpose" : "Weight threshold",
              "htmlid" : "mw_1178ce4b-33a7-4b55-b70a-5451196f63d5",
              "value" : 
              [ "1e–8",
                "positive real scalar" ],
              "defaultvalue" : "1e–8" },
            
            { "name" : "IncludeLowpass",
              "purpose" : "Include lowpass filter",
              "htmlid" : "mw_cd2c65c2-c577-4655-94ff-26ff93616193",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" },
            
            { "name" : "VoicesPerOctave",
              "purpose" : "Number of voices per octave",
              "htmlid" : "mw_de0eb8f0-f64f-4acd-9289-3962a3f55098",
              "value" : 
              [ "10",
                "integer between 1 and 48" ],
              "defaultvalue" : "10" },
            
            { "name" : "FrequencyLimits",
              "purpose" : "Frequency limits",
              "htmlid" : "mw_960ded7f-2dac-4ac6-80c5-95ff8400d5d6",
              "value" : 
              [ "two-element scalar vector" ] },
            
            { "name" : "TimeBandwidth",
              "purpose" : "Time-bandwidth product for Morse wavelet",
              "htmlid" : "mw_320232fb-8608-4be5-b699-fa6bec950f13",
              "value" : 
              [ "60",
                "positive scalar" ],
              "defaultvalue" : "60" },
            
            { "name" : "TransformMode",
              "purpose" : "Layer transform mode",
              "htmlid" : "mw_99572986-605c-4c2c-82e7-334a90ff530b",
              "value" : 
              [ "\"mag\"",
                "\"squaremag\"",
                "\"realimag\"" ],
              "defaultvalue" : "\"mag\"" } ] },
        
        { "title" : "Layer",
          "classproperty" : 
          [ 
            { "name" : "WeightLearnRateFactor",
              "purpose" : "Multiplier for weight learning rate",
              "htmlid" : "mw_5ee16608-fe28-4df4-9fe1-7588fa3ad35d",
              "value" : 
              [ "0",
                "nonnegative scalar" ],
              "defaultvalue" : "0" },
            
            { "name" : "Name",
              "purpose" : "Layer name",
              "htmlid" : "mw_fb6e2e30-89ee-423f-996a-c7546c1edb73_sep_shared-cnn-layer-name",
              "value" : 
              [ "''",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "''" },
            
            { "name" : "NumInputs",
              "purpose" : "Number of inputs",
              "htmlid" : "mw_fb6e2e30-89ee-423f-996a-c7546c1edb73_sep_mw_c53eb875-2724-4b88-bdf8-40f8b9cc5dd6",
              "value" : 
              [ "1" ],
              "defaultvalue" : "1" },
            
            { "name" : "InputNames",
              "purpose" : "Input names",
              "htmlid" : "mw_fb6e2e30-89ee-423f-996a-c7546c1edb73_sep_mw_ee6c4945-1b30-43e4-b85e-02a30ae516cf",
              "value" : 
              [ "{\"in\"}" ],
              "defaultvalue" : "{\"in\"}" },
            
            { "name" : "NumOutputs",
              "purpose" : "Number of outputs",
              "htmlid" : "mw_fb6e2e30-89ee-423f-996a-c7546c1edb73_sep_mw_9267d37d-5b0f-4e51-b3e9-6e11522a81b8",
              "value" : 
              [ "1" ],
              "defaultvalue" : "1" },
            
            { "name" : "OutputNames",
              "purpose" : "Output names",
              "htmlid" : "mw_fb6e2e30-89ee-423f-996a-c7546c1edb73_sep_mw_1f7d6a7c-840e-458c-9128-bce094eab496",
              "value" : 
              [ "{'out'}" ],
              "defaultvalue" : "{'out'}" } ] } ],
      "examples" : 
      [ 
        { "url" : "cwtlayer.html#mw_4274414f-9333-46c5-ae54-0ec29aa9b647",
          "open_command" : "openExample('deeplearning_shared\/UseCwtLayerInDeepLearningNetworkExample')",
          "title" : "Use cwtLayer in Deep Learning Network" },
        
        { "url" : "cwtlayer.html#mw_8f6a8d21-440c-43d9-9030-0a09ba7fce3d",
          "open_command" : "openExample('deeplearning_shared\/CompareCWTWithCwtLayerAndFilterBankExample')",
          "title" : "Compare CWT With cwtLayer and Filter Bank" },
        
        { "url" : "cwtlayer.html#mw_120a8be5-c90f-4cf2-97a5-b75b9f001e22",
          "open_command" : "openExample('deeplearning_shared\/CWTFrequencyLimitsExample')",
          "title" : "CWT Frequency Limits" },
        
        { "url" : "cwtlayer.html#mw_548b7496-fc36-4560-98e8-a10c6c786118",
          "open_command" : "openExample('deeplearning_shared\/ResetFrequencyLimitsToDefaultValuesInDeepNetworkDesignerExample')",
          "title" : "Reset Frequency Limits to Default Values in Deep Network Designer" } ],
      "seealso" : 
      [ 
        { "url" : "..\/..\/deeplearning\/ref\/deepnetworkdesigner-app.html",
          "name" : "Deep Network Designer" },
        
        { "url" : "dlcwt.html",
          "name" : "dlcwt" },
        
        { "url" : "cwtfilters2array.html",
          "name" : "cwtfilters2array" },
        
        { "url" : "cwt.html",
          "name" : "cwt" },
        
        { "url" : "cwtfreqbounds.html",
          "name" : "cwtfreqbounds" },
        
        { "url" : "dlmodwt.html",
          "name" : "dlmodwt" },
        
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "modwtlayer.html",
          "name" : "modwtLayer" },
        
        { "url" : "..\/..\/signal\/ref\/stftlayer.html",
          "name" : "stftLayer" },
        
        { "url" : "..\/..\/deeplearning\/ref\/dlarray.html",
          "name" : "dlarray" },
        
        { "url" : "..\/..\/deeplearning\/ref\/dlnetwork.html",
          "name" : "dlnetwork" } ] },
    { "href" : "ref\/dbaux.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dbaux",
          "fcntype" : "simple" } ],
      "refpurpose" : "Daubechies wavelet filter computation",
      "introduced" : "preR2006a",
      "description" : "The dbaux function generates the scaling filter coefficients for the \"extremal phase\" Daubechies wavelets.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "W = dbaux(N)",
            "W = dbaux(N,SUMW)" ] } ],
      "inputs" : 
      [ 
        { "name" : "N",
          "purpose" : "Order of Daubechies scaling filter",
          "htmlid" : "d124e17200",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "SUMW",
          "purpose" : "Sum of coefficients",
          "htmlid" : "d124e17224",
          "value" : 
          [ "1",
            "positive scalar" ],
          "defaultvalue" : "1" } ],
      "outputs" : 
      [ 
        { "name" : "W",
          "purpose" : "Scaling filter coefficients",
          "htmlid" : "d124e17258",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "dbaux.html#mw_a1fd9965-4ed6-40d5-bc47-24207dd01e8a",
          "open_command" : "openExample('wavelet\/DaubechiesExtremalPhaseScalingFilterWithSpecifiedSumExample')",
          "title" : "Daubechies Extremal Phase Scaling Filter with Specified Sum" },
        
        { "url" : "dbaux.html#mw_b14f30f6-353a-438a-a5cc-fd252bfbd1a1",
          "open_command" : "openExample('wavelet\/LeastAsymExtremalPolyExample')",
          "title" : "Symlet and Daubechies Scaling Filters" },
        
        { "url" : "dbaux.html#mw_2fdc7396-86d8-44ae-be6b-e6f357328379",
          "open_command" : "openExample('wavelet\/ExtremalPhaseExample')",
          "title" : "Extremal Phase" } ],
      "seealso" : 
      [ 
        { "url" : "symaux.html",
          "name" : "symaux" },
        
        { "url" : "dbwavf.html",
          "name" : "dbwavf" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" } ] },
    { "href" : "ref\/dbwavf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dbwavf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Daubechies wavelet filter",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the scaling filter associated with the Daubechies wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "f = dbwavf(wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Daubechies wavelet",
          "htmlid" : "mw_ba1f35d6-3256-4d90-94a7-b1ce33564fec",
          "value" : 
          [ "'dbN'" ] } ],
      "examples" : 
      [ 
        { "url" : "dbwavf.html#mw_554682ae-1440-4c91-8ab2-e5467440668d",
          "open_command" : "openExample('wavelet\/ScalingFilterAssociatedWithDaubechiesWaveletExample')",
          "title" : "Scaling Filter Associated With Daubechies Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "dbaux.html",
          "name" : "dbaux" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" } ] },
    { "href" : "ref\/dddtree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dddtree",
          "fcntype" : "simple" } ],
      "refpurpose" : "Dual-tree and double-density 1-D wavelet transform",
      "introduced" : "R2013b",
      "description" : "This MATLAB function returns the typetree discrete wavelet transform (DWT) of the 1-D input signal, x, down to level, level.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wt = dddtree(typetree,x,level,fdf,df)",
            "wt = dddtree(typetree,x,level,fname)",
            "wt = dddtree(typetree,x,level,fname1,fname2)" ] } ],
      "inputs" : 
      [ 
        { "name" : "typetree",
          "purpose" : "Type of wavelet decomposition",
          "htmlid" : "btynujf-typetree",
          "value" : 
          [ "'dwt'",
            "'ddt'",
            "'cplxdt'",
            "'cplxdddt'" ] },
        
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "btynujf-x",
          "value" : 
          [ "vector" ] },
        
        { "name" : "level",
          "purpose" : "Level of wavelet decomposition",
          "htmlid" : "btynujf-level",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "fdf",
          "purpose" : "Level-one analysis filters",
          "htmlid" : "btynujf-fdf",
          "value" : 
          [ "matrix",
            "cell array" ] },
        
        { "name" : "df",
          "purpose" : "Analysis filters for levels > 1",
          "htmlid" : "btynujf-df",
          "value" : 
          [ "matrix",
            "cell array" ] },
        
        { "name" : "fname",
          "purpose" : "Filter name",
          "htmlid" : "btynujf-fname",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "fname1",
          "purpose" : "First-stage filter name",
          "htmlid" : "btynujf-fname1",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "fname2",
          "purpose" : "Filter name for stages > 1",
          "htmlid" : "btynujf-fname2",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "wt",
          "purpose" : "Wavelet transform",
          "htmlid" : "btynujf-wt",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "dddtree.html#btynuxn-2",
          "open_command" : "openExample('wavelet\/ComplexDualTreeWaveletTransformExample')",
          "title" : "Complex Dual-Tree Wavelet Transform" },
        
        { "url" : "dddtree.html#btzrv1a-2",
          "open_command" : "openExample('wavelet\/DoubleDensityWaveletTransformExample')",
          "title" : "Double-Density Wavelet Transform" },
        
        { "url" : "dddtree.html#bt0x_9l-3",
          "open_command" : "openExample('wavelet\/FirstLevelDetailCoefficientsApproximationComplexDualTreeExample')",
          "title" : "First-Level Detail Coefficients Approximation — Complex Dual-Tree" } ],
      "seealso" : 
      [ 
        { "url" : "wfilters.html",
          "name" : "wfilters" },
        
        { "url" : "dddtree2.html",
          "name" : "dddtree2" },
        
        { "url" : "dddtreecfs.html",
          "name" : "dddtreecfs" },
        
        { "url" : "dtfilters.html",
          "name" : "dtfilters" },
        
        { "url" : "idddtree.html",
          "name" : "idddtree" },
        
        { "url" : "dualtree.html",
          "name" : "dualtree" },
        
        { "url" : "dualtree2.html",
          "name" : "dualtree2" } ] },
    { "href" : "ref\/dddtree2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dddtree2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Dual-tree and double-density 2-D wavelet transform",
      "introduced" : "R2013b",
      "description" : "This MATLAB function returns the typetree discrete wavelet transform of the 2-D input image, x, down to level, level.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wt = dddtree2(typetree,x,level,fdf,df)",
            "wt = dddtree2(typetree,x,level,fname)",
            "wt = dddtree2(typetree,x,level,fname1,fname2)" ] } ],
      "inputs" : 
      [ 
        { "name" : "typetree",
          "purpose" : "Type of wavelet decomposition",
          "htmlid" : "bt0ecvx-1-typetree",
          "value" : 
          [ "'dwt'",
            "'ddt'",
            "'realdt'",
            "'cplxdt'",
            "'realdddt'",
            "'cplxdddt'" ] },
        
        { "name" : "x",
          "purpose" : "Input image",
          "htmlid" : "bt0ecvx-1-x",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "level",
          "purpose" : "Level of wavelet decomposition",
          "htmlid" : "bt0ecvx-1-level",
          "value" : 
          [ "integer" ] },
        
        { "name" : "fdf",
          "purpose" : "Level-one analysis filters",
          "htmlid" : "bt0ecvx-1-fdf",
          "value" : 
          [ "matrix",
            "cell array" ] },
        
        { "name" : "df",
          "purpose" : "Analysis filters for levels > 1",
          "htmlid" : "bt0ecvx-1-df",
          "value" : 
          [ "matrix",
            "cell array" ] },
        
        { "name" : "fname",
          "purpose" : "Filter name",
          "htmlid" : "bt0ecvx-1-fname",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "fname1",
          "purpose" : "First-stage filter name",
          "htmlid" : "bt0ecvx-1-fname1",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "fname2",
          "purpose" : "Filter name for stages > 1",
          "htmlid" : "bt0ecvx-1-fname2",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "wt",
          "purpose" : "Wavelet transform",
          "htmlid" : "bt0ecvx-1-wt",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "dddtree2.html#bt0ecvx-6",
          "open_command" : "openExample('wavelet\/RealOrientedDualTreeWaveletsExample')",
          "title" : "Real Oriented Dual-Tree Wavelets" },
        
        { "url" : "dddtree2.html#bt0ecvx-7",
          "open_command" : "openExample('wavelet\/DoubleDensityWvltTxdddtree2Example')",
          "title" : "Double-Density Wavelet Transform" },
        
        { "url" : "dddtree2.html#bt0hi5m-3",
          "open_command" : "openExample('wavelet\/ComplexDualTreeWvltTxdddtree2Example')",
          "title" : "Complex Dual-Tree Wavelet Transform" } ],
      "seealso" : 
      [ 
        { "url" : "dddtree.html",
          "name" : "dddtree" },
        
        { "url" : "dddtreecfs.html",
          "name" : "dddtreecfs" },
        
        { "url" : "dtfilters.html",
          "name" : "dtfilters" },
        
        { "url" : "idddtree2.html",
          "name" : "idddtree2" },
        
        { "url" : "dualtree.html",
          "name" : "dualtree" },
        
        { "url" : "dualtree2.html",
          "name" : "dualtree2" } ] },
    { "href" : "ref\/dddtreecfs.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dddtreecfs",
          "fcntype" : "simple" } ],
      "refpurpose" : "Extract dual-tree\/double-density wavelet coefficients or projections",
      "introduced" : "R2013b",
      "description" : "This MATLAB function extracts the coefficients or subspace projections from the 1-D or 2-D wavelet decomposition, wt.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "out = dddtreecfs(outputtype,wt,outputspec,outputindices)",
            "out = dddtreecfs(outputtype,wt,outputspec,outputindices,'plot')" ] } ],
      "inputs" : 
      [ 
        { "name" : "outputtype",
          "purpose" : "Output type",
          "htmlid" : "btz65cs-outputtype",
          "value" : 
          [ "'e'",
            "'r'" ] },
        
        { "name" : "wt",
          "purpose" : "Wavelet transform",
          "htmlid" : "btz65cs-wt",
          "value" : 
          [ "structure" ] },
        
        { "name" : "outputspec",
          "purpose" : "Output specification",
          "htmlid" : "btz65cs-outputspec",
          "value" : 
          [ "'lowpass'",
            "'scale'",
            "'ind'",
            "'cumind'" ] },
        
        { "name" : "outputindices",
          "purpose" : "Output indices",
          "htmlid" : "btz65cs-outputindices",
          "value" : 
          [ "cell array" ] } ],
      "outputs" : 
      [ 
        { "name" : "out",
          "purpose" : "Signal or image reconstruction or coefficients",
          "htmlid" : "btz65cs-out",
          "value" : 
          [ "cell array",
            "structure",
            "vector",
            "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "dddtreecfs.html#btz65sw-2",
          "open_command" : "openExample('wavelet\/Reconstructionfrom1DComplexDualTreeWaveletTransformExample')",
          "title" : "Reconstruction from 1-D Complex Dual-Tree Wavelet Transform" },
        
        { "url" : "dddtreecfs.html#bt3r02n-2",
          "open_command" : "openExample('wavelet\/Coefficientsfrom1DComplexDualTreeWaveletTransformExample')",
          "title" : "Coefficients from 1-D Complex Dual-Tree Wavelet Transform" },
        
        { "url" : "dddtreecfs.html#bt3r1cl-3",
          "open_command" : "openExample('wavelet\/OneDComplexDualTreeWvltTxStructureExample')",
          "title" : "1-D Complex Dual-Tree Wavelet Transform Structure" },
        
        { "url" : "dddtreecfs.html#bt3r1k_-4",
          "open_command" : "openExample('wavelet\/ExtractDiagonalFeaturesfromImageExample')",
          "title" : "Extract Diagonal Features from Image" },
        
        { "url" : "dddtreecfs.html#mw_024685b3-0fa1-49ca-9b4b-673fc540d863",
          "open_command" : "openExample('wavelet\/DistributionOfAnalysisCoefficientsInWaveletTreeStructureExample')",
          "title" : "Distribution of Analysis Coefficients in Wavelet Tree Structure" } ],
      "seealso" : 
      [ 
        { "url" : "dddtree.html",
          "name" : "dddtree" },
        
        { "url" : "dddtree2.html",
          "name" : "dddtree2" },
        
        { "url" : "plotdt.html",
          "name" : "plotdt" },
        
        { "url" : "dualtree.html",
          "name" : "dualtree" },
        
        { "url" : "dualtree2.html",
          "name" : "dualtree2" } ] },
    { "href" : "ref\/ddencmp.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ddencmp",
          "fcntype" : "simple" } ],
      "refpurpose" : "Default values for denoising or compression",
      "introduced" : "preR2006a",
      "description" : "ddencmp returns default values for denoising or compression for the critically sampled discrete wavelet or wavelet packet transform.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[thr,sorh,keepapp] = ddencmp(in1,in2,x)",
            "[___,crit] = ddencmp(in1,'wp',x)" ] } ],
      "inputs" : 
      [ 
        { "name" : "in1",
          "purpose" : "Purpose",
          "htmlid" : "mw_967091a1-7d45-4109-b49c-6182bde99042",
          "value" : 
          [ "'den'",
            "'cmp'" ] },
        
        { "name" : "in2",
          "purpose" : "Transform type",
          "htmlid" : "mw_e8cf903c-d54f-424c-9223-2426e39498dc",
          "value" : 
          [ "'wv'",
            "'wp'" ] },
        
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_63998c61-d2bd-43a2-9673-b1f4ce52f2b3",
          "value" : 
          [ "real-valued vector or matrix" ] } ],
      "outputs" : 
      [ 
        { "name" : "thr",
          "purpose" : "Threshold",
          "htmlid" : "mw_1d0dc64a-b9e3-4be8-a1ab-985011d2289b",
          "value" : 
          [ "real number" ] },
        
        { "name" : "sorh",
          "purpose" : "Thresholding type",
          "htmlid" : "mw_500e9f6c-51e7-42ec-88df-b2e431ac13b7",
          "value" : 
          [ "character" ] },
        
        { "name" : "keepapp",
          "purpose" : "Threshold approximation setting",
          "htmlid" : "mw_e310af35-4c3b-469d-aefe-77a4d4d28d91",
          "value" : 
          [ "1" ] },
        
        { "name" : "crit",
          "purpose" : "Entropy type",
          "htmlid" : "mw_9d00592b-b710-441d-9ab0-0848da84d22a",
          "value" : 
          [ "character vector" ] } ],
      "examples" : 
      [ 
        { "url" : "ddencmp.html#bty1d8q-1",
          "open_command" : "openExample('wavelet\/DefaultGlobalThresholdforWaveletDenoisingExample')",
          "title" : "Default Global Threshold for Wavelet Denoising" },
        
        { "url" : "ddencmp.html#bty1d8q-2",
          "open_command" : "openExample('wavelet\/DefaultGlobalThresholdforWaveletPacketCompressionExample')",
          "title" : "Default Global Threshold for Wavelet Packet Compression" } ],
      "seealso" : 
      [ 
        { "url" : "wdencmp.html",
          "name" : "wdencmp" },
        
        { "url" : "wenergy.html",
          "name" : "wenergy" },
        
        { "url" : "wpdencmp.html",
          "name" : "wpdencmp" },
        
        { "url" : "wdenoise.html",
          "name" : "wdenoise" } ] },
    { "href" : "ref\/depo2ind.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "depo2ind",
          "fcntype" : "simple" } ],
      "refpurpose" : "Node depth-position to node index",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function computes the indices N of the nodes whose depths and positions are encoded within [D,P].",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "N = depo2ind(ORD,[D P])" ] } ],
      "examples" : 
      [ 
        { "url" : "depo2ind.html#mw_6167a1e5-ee90-407b-ae0b-c7fe5026313a",
          "open_command" : "openExample('wavelet\/ConvertDepthPositionToNodeIndexExample')",
          "title" : "Convert Depth-Position to Node Index" } ],
      "seealso" : 
      [ 
        { "url" : "ind2depo.html",
          "name" : "ind2depo" } ] },
    { "href" : "ref\/detcoef.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "detcoef",
          "fcntype" : "simple" } ],
      "refpurpose" : "1-D detail coefficients",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function extracts the detail coefficients at the coarsest scale from the wavelet decomposition structure [C, L].",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "D = detcoef(C,L)",
            "D = detcoef(C,L,N)",
            "D = detcoef(C,L,N,'cells')" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[D1,...,Dp] = detcoef(C,L,N)" ] } ],
      "inputs" : 
      [ 
        { "name" : "C",
          "purpose" : "Wavelet decomposition vector",
          "htmlid" : "mw_d5d1a99e-b106-4d5a-9002-4bd0911c2675",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "L",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "mw_810f8811-65d3-4d9d-bae0-2d9067a97e1d",
          "value" : 
          [ "vector of positive integers" ] },
        
        { "name" : "N",
          "purpose" : "Detail level",
          "htmlid" : "mw_9acca19b-b0af-4d64-952d-16594697e7b7",
          "value" : 
          [ "positive integer",
            "vector of positive integers" ] } ],
      "outputs" : 
      [ 
        { "name" : "D",
          "purpose" : "Detail coefficients",
          "htmlid" : "mw_9429c5e3-5197-4659-a1f2-10cd299ce481",
          "value" : 
          [ "real-valued vector",
            "cell array" ] },
        
        { "name" : "D1,...,Dp",
          "purpose" : "Detail coefficients",
          "htmlid" : "mw_90d1e110-cb98-4a9d-8ac5-1945399cccb1",
          "value" : 
          [ "real-valued vectors" ] } ],
      "examples" : 
      [ 
        { "url" : "detcoef.html#mw_aee12ef6-1805-4b7f-b021-987d41d04582",
          "open_command" : "openExample('wavelet\/DetailCoefficientsFor1DSignalExample')",
          "title" : "Detail Coefficients for 1-D Signal" } ],
      "seealso" : 
      [ 
        { "url" : "appcoef.html",
          "name" : "appcoef" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" } ] },
    { "href" : "ref\/detcoef2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "detcoef2",
          "fcntype" : "simple" } ],
      "refpurpose" : "2-D detail coefficients",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function extracts from the wavelet decomposition structure [c,s] the detail coefficients of orientation o at level n.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "y = detcoef2(o,c,s,n)",
            "[h,v,d] = detcoef2('all',c,s,n)",
            "y = detcoef2('compact',c,s,n)" ] } ],
      "inputs" : 
      [ 
        { "name" : "o",
          "purpose" : "Orientation",
          "htmlid" : "mw_b9613713-4e61-423e-950e-cca560db70b1",
          "value" : 
          [ "'h'",
            "'v'",
            "'d'" ] },
        
        { "name" : "c",
          "purpose" : "Wavelet decomposition vector",
          "htmlid" : "mw_0f3a673f-2992-4843-ae0f-b9e10ec8712d",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "s",
          "purpose" : "Bookkeeping matrix",
          "htmlid" : "mw_63157831-b6ac-4121-95b6-d9fd171a3585",
          "value" : 
          [ "integer-valued matrix" ] },
        
        { "name" : "n",
          "purpose" : "Detail level",
          "htmlid" : "mw_91710198-9837-410b-bfdc-c2728c302aef",
          "value" : 
          [ "integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "y",
          "purpose" : "Detail coefficients",
          "htmlid" : "mw_a899f214-b551-4729-a8a7-b1ce54b4833b",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "h",
          "purpose" : "Horizontal detail coefficients",
          "htmlid" : "mw_09cf57bc-3330-4b93-a910-445cde51c817",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "v",
          "purpose" : "Vertical detail coefficients",
          "htmlid" : "mw_e81701d6-fe13-4c82-8ca5-291a4f343e89",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "d",
          "purpose" : "Diagonal detail coefficients",
          "htmlid" : "mw_3804afb4-f6e9-4671-9dda-14dae7e60694",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "detcoef2.html#mw_b8a8ae04-f498-4bb4-8aff-920250595144",
          "open_command" : "openExample('wavelet\/ExtractDetailCoefficientsFromImageExample')",
          "title" : "Extract Detail Coefficients From Image" } ],
      "seealso" : 
      [ 
        { "url" : "appcoef2.html",
          "name" : "appcoef2" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" },
        
        { "url" : "waverec2.html",
          "name" : "waverec2" } ] },
    { "href" : "ref\/disp.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "disp",
          "fcntype" : "simple" } ],
      "refpurpose" : "WPTREE information",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function displays the content of the WPTREE object T.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "disp(T)" ] } ],
      "seealso" : 
      [ 
        { "url" : "get.html",
          "name" : "get" },
        
        { "url" : "wptree.read.html",
          "name" : "read" },
        
        { "url" : "set.html",
          "name" : "set" },
        
        { "url" : "write.html",
          "name" : "write" } ] },
    { "href" : "ref\/displs.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "displs",
          "fcntype" : "simple" } ],
      "refpurpose" : "(To be removed) Display lifting scheme",
      "deprecationstatus" : "announce",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the character array describing the lifting scheme LS.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "S = displs(LS,FRM)" ] } ],
      "inputs" : 
      [ 
        { "name" : "LS",
          "purpose" : "Lifting scheme",
          "htmlid" : "mw_fe78ce02-8234-4b7e-9f19-7c78633b8f43",
          "value" : 
          [ "lifting scheme" ] },
        
        { "name" : "FRM",
          "purpose" : "Formatting operator",
          "htmlid" : "mw_fbc74cd4-7161-4cf9-a9af-91cd5b724394",
          "value" : 
          [ "formatting operator" ] } ],
      "examples" : 
      [ 
        { "url" : "displs.html#mw_8a6058c5-588e-4b95-833a-536bd97b9386",
          "open_command" : "openExample('wavelet\/DisplayLiftingSchemeExample')",
          "title" : "Display Lifting Scheme" } ],
      "seealso" : 
      [ 
        { "url" : "liftingscheme.disp.html",
          "name" : "disp" },
        
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" } ] },
    { "href" : "ref\/dlcwt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dlcwt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Deep learning continuous wavelet transform",
      "introduced" : "R2022b",
      "description" : "This MATLAB function returns the deep learning continuous wavelet transform (CWT) of x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "cfs = dlcwt(x,psifvec,filteridx)",
            "cfs = dlcwt(x,psifvec,filteridx,DataFormat=fmt)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_731b442c-eda6-41db-bca1-8e766fecbf44",
          "value" : 
          [ "dlarray object",
            "numeric array" ] },
        
        { "name" : "psifvec",
          "purpose" : "CWT filter bank",
          "htmlid" : "mw_a8b2421c-0cf4-480e-961c-3391112d7cea",
          "value" : 
          [ "array" ] },
        
        { "name" : "filteridx",
          "purpose" : "Bookkeeping matrix",
          "htmlid" : "mw_7538e762-a7d0-441c-977c-c675cb58a69c",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "fmt",
          "purpose" : "Input data format",
          "htmlid" : "mw_768b54b8-607e-45e1-9ea7-931ce9ec8e4b",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "cfs",
          "purpose" : "Continuous wavelet transform",
          "htmlid" : "mw_3c690011-fe97-4653-9e95-931c9478c769",
          "value" : 
          [ "formatted dlarray object",
            "unformatted dlarray object" ] } ],
      "examples" : 
      [ 
        { "url" : "dlcwt.html#mw_474758b6-fda7-489b-b553-b27cf0e2b9b6",
          "open_command" : "openExample('deeplearning_shared\/DeepLearningContinuousWaveletTransformOfECGSignalExample')",
          "title" : "Deep Learning Continuous Wavelet Transform of ECG Signal" },
        
        { "url" : "dlcwt.html#mw_70caa521-dc1e-4595-91ff-8e3217a4cb8f",
          "open_command" : "openExample('deeplearning_shared\/DeepLearningContinuousWaveletTransformOfMultisignalExample')",
          "title" : "Deep Learning Continuous Wavelet Transform of Multisignal" } ],
      "seealso" : 
      [ 
        { "url" : "cwt.html",
          "name" : "cwt" },
        
        { "url" : "cwtfilters2array.html",
          "name" : "cwtfilters2array" },
        
        { "url" : "array2cwtfilters.html",
          "name" : "array2cwtfilters" },
        
        { "url" : "dlmodwt.html",
          "name" : "dlmodwt" },
        
        { "url" : "..\/..\/signal\/ref\/dlstft.html",
          "name" : "dlstft" },
        
        { "url" : "cwtlayer.html",
          "name" : "cwtLayer" },
        
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "modwtlayer.html",
          "name" : "modwtLayer" },
        
        { "url" : "..\/..\/signal\/ref\/stftlayer.html",
          "name" : "stftLayer" } ] },
    { "href" : "ref\/dlmodwt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dlmodwt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Deep learning maximal overlap discrete wavelet transform and multiresolution analysis",
      "introduced" : "R2022a",
      "description" : "This MATLAB function returns the maximal overlap discrete wavelet transform (MODWT) of x using the lowpass (scaling) and highpass (wavelet) filters associated with the Daubechies least-asymmetric wavelet with four vanishing moments (\"sym4\") .",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "w = dlmodwt(x)",
            "w = dlmodwt(x,Lo,Hi)",
            "w = dlmodwt(x,Lo,Hi,level)",
            "[w,mra] = dlmodwt(___)",
            "[___] = dlmodwt(___,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input array",
          "htmlid" : "mw_48d96555-857f-44ca-a0d9-ed6b005a9809",
          "value" : 
          [ "dlarray object",
            "numeric array" ] },
        
        { "name" : "Lo,Hi",
          "purpose" : "Filters",
          "htmlid" : "mw_c6a49684-6802-480e-9243-de08aa910f08",
          "value" : 
          [ "numeric vectors",
            "dlarray objects" ] },
        
        { "name" : "level",
          "purpose" : "Transform level",
          "htmlid" : "mw_0d9930b3-799b-41bd-9fc3-df97ae13e21f",
          "value" : 
          [ "floor(log2(T)), where T is the size of x along the time dimension",
            "positive integer" ],
          "defaultvalue" : "floor(log2(T)), where T is the size of x along the time dimension" },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "BOUNDARY",
              "purpose" : "Extension method",
              "htmlid" : "mw_b589326c-d104-4619-8780-9a7764533d1b",
              "value" : 
              [ "\"periodic\"",
                "\"reflection\"" ],
              "defaultvalue" : "\"periodic\"" },
            
            { "name" : "DataFormat",
              "purpose" : "Data format of input",
              "htmlid" : "mw_69ed3138-57c0-4ac1-af4a-5c360554260b",
              "value" : 
              [ "character vector",
                "string scalar" ] } ] } ],
      "outputs" : 
      [ 
        { "name" : "w",
          "purpose" : "Maximal overlap discrete wavelet transform",
          "htmlid" : "mw_46bfd646-7f7f-4a6f-ac94-12612a15be30",
          "value" : 
          [ "formatted dlarray object",
            "unformatted dlarray object" ] },
        
        { "name" : "mra",
          "purpose" : "Multiresolution analysis",
          "htmlid" : "mw_52728658-7332-420f-9178-d25108889dc1",
          "value" : 
          [ "formatted dlarray object",
            "unformatted dlarray object" ] } ],
      "examples" : 
      [ 
        { "url" : "dlmodwt.html#mw_ae804afb-46bb-4076-b031-86ac8307737b",
          "open_command" : "openExample('wavelet\/DeepLearningMaximalOverlapDiscreteWaveletTransformExample')",
          "title" : "Deep Learning Maximal Overlap Discrete Wavelet Transform" } ],
      "seealso" : 
      [ 
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "modwtmra.html",
          "name" : "modwtmra" },
        
        { "url" : "modwtlayer.html",
          "name" : "modwtLayer" },
        
        { "url" : "..\/..\/deeplearning\/ref\/dlarray.html",
          "name" : "dlarray" } ] },
    { "href" : "ref\/drawtree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "drawtree",
          "fcntype" : "simple" } ],
      "refpurpose" : "(To be removed) Draw wavelet packet decomposition tree (GUI)",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function draws the wavelet packet tree T, and F = drawtree(T) also returns the figure's handle.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "drawtree(T)",
            "F = drawtree(T)",
            "drawtree(T,F)" ] } ] },
    { "href" : "ref\/dtfilters.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dtfilters",
          "fcntype" : "simple" } ],
      "refpurpose" : "Analysis and synthesis filters for oversampled wavelet filter banks",
      "introduced" : "R2013b",
      "description" : "This MATLAB function returns the decomposition (analysis) filters corresponding to name.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "df = dtfilters(name)",
            "[df,rf] = dtfilters(name)" ] } ],
      "inputs" : 
      [ 
        { "name" : "name",
          "purpose" : "Filter name",
          "htmlid" : "btz4uti-1-name",
          "value" : 
          [ "\"dtf1\"",
            "\"dddtf1\"",
            "\"self1\"",
            "\"self2\"" ] } ],
      "outputs" : 
      [ 
        { "name" : "df",
          "purpose" : "Decomposition (analysis) filters",
          "htmlid" : "btz4uti-1-df",
          "value" : 
          [ "matrix",
            "cell array" ] },
        
        { "name" : "rf",
          "purpose" : "Reconstruction (synthesis) filters",
          "htmlid" : "btz4uti-1-rf",
          "value" : 
          [ "matrix",
            "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "dtfilters.html#btz4uti-7",
          "open_command" : "openExample('wavelet\/FiltersforComplexDualTreeWaveletTransformExample')",
          "title" : "Filters for Complex Dual-Tree Wavelet Transform" },
        
        { "url" : "dtfilters.html#btz42jq-2",
          "open_command" : "openExample('wavelet\/FiltersforDoubleDensityWaveletTransformExample')",
          "title" : "Filters for Double-Density Wavelet Transform" },
        
        { "url" : "dtfilters.html#mw_00cc7753-51c1-4746-8f7a-5bcac9c6f91c",
          "open_command" : "openExample('wavelet\/DTAndDDWaveletTransformsUsingFilterNamesAndFiltersExample')",
          "title" : "Dual-Tree and Double-Density Wavelet Transforms Using Filter Names and Filters" } ],
      "seealso" : 
      [ 
        { "url" : "dddtree.html",
          "name" : "dddtree" },
        
        { "url" : "dddtree2.html",
          "name" : "dddtree2" } ] },
    { "href" : "ref\/dtree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dtree",
          "fcntype" : "simple" } ],
      "refpurpose" : "DTREE constructor",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns a complete data tree (DTREE) object of order ORD and depth D.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = dtree(ORD,D,X)",
            "T = dtree(ORD,D,X,U)",
            "[T,NB] = dtree(...)",
            "[T,NB] = dtree('PropName1',PropValue1,'PropName2',PropValue2,...)" ] } ],
      "seealso" : 
      [ 
        { "url" : "ntree.html",
          "name" : "ntree" },
        
        { "url" : "wtbo.html",
          "name" : "wtbo" } ] },
    { "href" : "ref\/dtree.nodejoin.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "nodejoin",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dtree.nodejoin",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Recompose node",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the modified tree T corresponding to a recomposition of the node N.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = nodejoin(T,N)",
            "T = nodejoin(T)",
            "T = nodejoin(T,0)" ] } ],
      "seealso" : 
      [ 
        { "url" : "dtree.nodesplt.html",
          "name" : "nodesplt" } ] },
    { "href" : "ref\/dtree.nodesplt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "nodesplt",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dtree.nodesplt",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Split (decompose) node",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the modified tree T corresponding to the decomposition of the node N.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = nodesplt(T,N)" ] } ],
      "seealso" : 
      [ 
        { "url" : "dtree.nodejoin.html",
          "name" : "nodejoin" } ] },
    { "href" : "ref\/dualtree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dualtree",
          "fcntype" : "simple" } ],
      "refpurpose" : "Kingsbury Q-shift 1-D dual-tree complex wavelet transform",
      "introduced" : "R2020a",
      "description" : "This MATLAB function returns the 1-D dual-tree complex wavelet transform (DTCWT) of X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[A,D] = dualtree(X)",
            "[___,Ascale] = dualtree(X)",
            "[___] = dualtree(X,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "mw_efc242dc-f57c-4a4f-a728-de9946550483",
          "value" : 
          [ "vector",
            "matrix",
            "timetable" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Level",
              "purpose" : "Level of decomposition",
              "htmlid" : "mw_f18b1337-07f9-44bf-82c0-06993064dc4e",
              "value" : 
              [ "positive integer" ] },
            
            { "name" : "LevelOneFilter",
              "purpose" : "Biorthogonal filter",
              "htmlid" : "mw_4b22a2c3-c1a7-4977-bb7d-90a1b9039b81",
              "value" : 
              [ "'nearsym5_7'",
                "'nearsym13_19'",
                "'antonini'",
                "'legall'" ],
              "defaultvalue" : "'nearsym5_7'" },
            
            { "name" : "FilterLength",
              "purpose" : "Orthogonal Hilbert Q-shift analysis filter pair length",
              "htmlid" : "mw_b6b8df52-91d6-4528-8c30-6d908fb498f7",
              "value" : 
              [ "10",
                "6",
                "14",
                "16",
                "18" ],
              "defaultvalue" : "10" } ] } ],
      "outputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Final-level approximation coefficients",
          "htmlid" : "mw_c3ca2727-0871-4704-accc-bc962c35fc67",
          "value" : 
          [ "real-valued vector",
            "real-valued matrix" ] },
        
        { "name" : "D",
          "purpose" : "Wavelet coefficients",
          "htmlid" : "mw_f43e4973-39dc-45ca-93e6-df125369902e",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "Ascale",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_7f061818-abef-4866-a4bb-16a9f477e360",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "dualtree.html#mw_a0581c8c-ac92-4cc5-b0e1-1b6f442128e0",
          "open_command" : "openExample('wavelet\/PlotDualtreeComplexWaveletTransformCoefficientsExample')",
          "title" : "Plot Dual-Tree Complex Wavelet Transform Coefficients" },
        
        { "url" : "dualtree.html#mw_2526947d-18f9-4b0d-b93b-98330a8bd650",
          "open_command" : "openExample('wavelet\/DistributionOfEnergyAcrossScalesExample')",
          "title" : "Distribution of Energy Across Scales" } ],
      "seealso" : 
      [ 
        { "url" : "idualtree.html",
          "name" : "idualtree" },
        
        { "url" : "dualtree2.html",
          "name" : "dualtree2" },
        
        { "url" : "dualtree3.html",
          "name" : "dualtree3" },
        
        { "url" : "qbiorthfilt.html",
          "name" : "qbiorthfilt" },
        
        { "url" : "qorthwavf.html",
          "name" : "qorthwavf" } ] },
    { "href" : "ref\/dualtree2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dualtree2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Kingsbury Q-shift 2-D dual-tree complex wavelet transform",
      "introduced" : "R2020a",
      "description" : "This MATLAB function returns the 2-D dual-tree complex wavelet transform (DTCWT) of X using Kingsbury Q-shift filters.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[A,D] = dualtree2(X)",
            "[___,Ascale] = dualtree2(X)",
            "[___] = dualtree2(X,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "mw_3388e5e8-df2c-47c5-a32f-5d08af881bb7",
          "value" : 
          [ "real-valued matrix",
            "real-valued 3-D array",
            "real-valued 4-D array" ],
          "defaultvalue" : "real-valued matrix" },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Level",
              "purpose" : "Level of decomposition",
              "htmlid" : "mw_11b63436-80d5-49dd-b06a-058469feb48d",
              "value" : 
              [ "positive integer" ] },
            
            { "name" : "LevelOneFilter",
              "purpose" : "Biorthogonal filter",
              "htmlid" : "mw_1cb21644-2495-4b7b-b516-c53c2c734052",
              "value" : 
              [ "'nearsym5_7'",
                "'nearsym13_19'",
                "'antonini'",
                "'legall'" ],
              "defaultvalue" : "'nearsym5_7'" },
            
            { "name" : "FilterLength",
              "purpose" : "Orthogonal Hilbert Q-shift analysis filter pair length",
              "htmlid" : "mw_3944ff08-de74-4991-becb-187752a8a4f9",
              "value" : 
              [ "10",
                "6",
                "14",
                "16",
                "18" ],
              "defaultvalue" : "10" } ] } ],
      "outputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Final-level approximation coefficients",
          "htmlid" : "mw_af5c6145-bfe8-4b21-a430-cbe04b9410fa",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "D",
          "purpose" : "Wavelet coefficients",
          "htmlid" : "mw_f45a6ffc-3dc7-4a69-8003-f3924691195f",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "Ascale",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_dec70b4f-a099-43c7-becc-70a22ecd7d7c",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "dualtree2.html#mw_4e5d7c5a-5658-4180-b320-4c27c4b9cbec",
          "open_command" : "openExample('wavelet\/DDualTreeComplexWaveletTransformExample')",
          "title" : "2-D Dual-Tree Complex Wavelet Transform" } ],
      "seealso" : 
      [ 
        { "url" : "dualtree.html",
          "name" : "dualtree" },
        
        { "url" : "idualtree2.html",
          "name" : "idualtree2" },
        
        { "url" : "dualtree3.html",
          "name" : "dualtree3" },
        
        { "url" : "qbiorthfilt.html",
          "name" : "qbiorthfilt" },
        
        { "url" : "qorthwavf.html",
          "name" : "qorthwavf" } ] },
    { "href" : "ref\/dualtree3.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dualtree3",
          "fcntype" : "simple" } ],
      "refpurpose" : "3-D dual-tree complex wavelet transform",
      "introduced" : "R2017a",
      "description" : "This MATLAB function returns the 3-D dual-tree complex wavelet transform of x at the maximum level, floor(log2(min(size(x)))).",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[a,d] = dualtree3(x)",
            "[a,d] = dualtree3(x,level)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[a,d] = dualtree3(___,Name,Value)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[a,d] = dualtree3(___,'excludeL1')" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "bvkkzkw-x",
          "value" : 
          [ "real 3-D array" ] },
        
        { "name" : "level",
          "purpose" : "Transform level",
          "htmlid" : "bvkkzkw-level",
          "value" : 
          [ "floor(log2(min(size(x))))",
            "positive integer" ],
          "defaultvalue" : "floor(log2(min(size(x))))" },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "FilterLength",
              "purpose" : "Hilbert Q-shift filter-pair length",
              "htmlid" : "bvkkzkw-FilterLength",
              "value" : 
              [ "6",
                "10",
                "14",
                "16",
                "18" ],
              "defaultvalue" : "10" },
            
            { "name" : "LevelOneFilter",
              "purpose" : "First-level biorthogonal analysis filter",
              "htmlid" : "bvkkzkw-LevelOneFilter",
              "value" : 
              [ "'nearsym5_7'",
                "'nearsym13_19'",
                "'antonini'",
                "'legall'" ],
              "defaultvalue" : "'nearsym5_7'" } ] } ],
      "outputs" : 
      [ 
        { "name" : "a",
          "purpose" : "Final-level scaling coefficients",
          "htmlid" : "bvkkzkw-a",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "d",
          "purpose" : "Wavelet coefficients",
          "htmlid" : "bvkkzkw-d",
          "value" : 
          [ "1-by-level cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "dualtree3.html#bvkk7mt-2",
          "open_command" : "openExample('wavelet\/ThreeDimensionalDualTreeTransformOfVolumetricDataExample')",
          "title" : "Three-Dimensional Dual-Tree Transform of Volumetric Data" },
        
        { "url" : "dualtree3.html#bvk891p",
          "open_command" : "openExample('wavelet\/DDualTreeTransformOfMRIDataExample')",
          "title" : "3-D Dual-Tree Transform of MRI Data" } ],
      "seealso" : 
      [ 
        { "url" : "idualtree3.html",
          "name" : "idualtree3" },
        
        { "url" : "wavedec3.html",
          "name" : "wavedec3" },
        
        { "url" : "waverec3.html",
          "name" : "waverec3" },
        
        { "url" : "dddtree2.html",
          "name" : "dddtree2" },
        
        { "url" : "qbiorthfilt.html",
          "name" : "qbiorthfilt" },
        
        { "url" : "dualtree2.html",
          "name" : "dualtree2" },
        
        { "url" : "dualtree.html",
          "name" : "dualtree" },
        
        { "url" : "qorthwavf.html",
          "name" : "qorthwavf" } ] },
    { "href" : "ref\/dwpt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dwpt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multisignal 1-D wavelet packet transform",
      "introduced" : "R2020a",
      "description" : "This MATLAB function returns the terminal (final-level) nodes of the discrete wavelet packet transform (DWPT) of X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wpt = dwpt(X)",
            "wpt = dwpt(X,wname)",
            "wpt = dwpt(X,LoD,HiD)",
            "[wpt,l] = dwpt(___)",
            "[wpt,l,packetlevels] = dwpt(___)",
            "[wpt,l,packetlevels,f] = dwpt(___)",
            "[wpt,l,packetlevels,f,re] = dwpt(___)",
            "[___] = dwpt(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "mw_dbbde990-aa97-4c1a-b47e-08b41a118563",
          "value" : 
          [ "real-valued vector",
            "real-valued matrix",
            "timetable" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_42fb0ccc-b3d1-4a63-b730-f7c24bc1356e",
          "value" : 
          [ "'fk18'",
            "character vector",
            "string scalar" ],
          "defaultvalue" : "'fk18'" },
        
        { "name" : "LoD,HiD",
          "purpose" : "Wavelet analysis filters",
          "htmlid" : "mw_1c8b8204-e04d-4046-9d4e-287f73c34a3f",
          "value" : 
          [ "real-valued vectors" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Level",
              "purpose" : "Wavelet decomposition level",
              "htmlid" : "mw_787a5b72-4a18-4c03-8a04-adb282f40877",
              "value" : 
              [ "floor(log_{2}(Ns))",
                "positive integer" ],
              "defaultvalue" : "floor(log_{2}(Ns))" },
            
            { "name" : "FullTree",
              "purpose" : "Wavelet packet tree handling",
              "htmlid" : "mw_699e8532-7bd4-4fc9-9707-aba9cac29cb3",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" },
            
            { "name" : "Boundary",
              "purpose" : "Wavelet packet transform boundary handling",
              "htmlid" : "mw_87a3f222-fa34-4c9a-85d8-dc03c3df8bb5",
              "value" : 
              [ "'reflection'",
                "'periodic'" ],
              "defaultvalue" : "'reflection'" } ] } ],
      "outputs" : 
      [ 
        { "name" : "wpt",
          "purpose" : "Wavelet packet transform",
          "htmlid" : "mw_646ac46c-b961-4ef6-a94d-1edcc249db4f",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "l",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "mw_6165bec7-6d82-4e85-82a1-5edf8ba527f3",
          "value" : 
          [ "vector of positive integers" ] },
        
        { "name" : "packetlevels",
          "purpose" : "Transform levels",
          "htmlid" : "mw_7d86aa05-367f-4352-8f06-40c9382c3ef1",
          "value" : 
          [ "vector of positive integers" ] },
        
        { "name" : "f",
          "purpose" : "Center frequencies",
          "htmlid" : "mw_584aa6e9-9fba-4f96-9b5c-da96ae1fe01e",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "re",
          "purpose" : "Relative energy",
          "htmlid" : "mw_5bd8e35c-af1a-483e-a827-1e1ada0d4a1d",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "dwpt.html#mw_b82888d4-953f-4967-8842-1bbe4195c43f",
          "open_command" : "openExample('wavelet\/MultichannelDiscreteWaveletPacketTransformExample')",
          "title" : "Multichannel Discrete Wavelet Packet Transform" } ],
      "seealso" : 
      [ 
        { "url" : "modwpt.html",
          "name" : "modwpt" },
        
        { "url" : "idwpt.html",
          "name" : "idwpt" } ] },
    { "href" : "ref\/dwt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dwt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Single-level 1-D discrete wavelet transform",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the single-level discrete wavelet transform (DWT) of the vector x using the wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[cA,cD] = dwt(x,wname)",
            "[cA,cD] = dwt(x,LoD,HiD)",
            "[cA,cD] = dwt(___,'mode',extmode)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "d124e28547",
          "value" : 
          [ "vector" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "d124e28577",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoD,HiD",
          "purpose" : "Wavelet decomposition filters",
          "htmlid" : "mw_0d4dd016-0ce2-4d29-9c9a-5272def8f2bf",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "extmode",
          "purpose" : "Extension mode",
          "htmlid" : "d124e28642",
          "value" : 
          [ "'zpd'",
            "'sp0'",
            "'spd'" ] } ],
      "outputs" : 
      [ 
        { "name" : "cA",
          "purpose" : "Approximation coefficients",
          "htmlid" : "d124e28758",
          "value" : 
          [ "vector" ] },
        
        { "name" : "cD",
          "purpose" : "Detail coefficients",
          "htmlid" : "d124e28806",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "dwt.html#mw_8364b09b-8176-45c4-b065-7ab3ff614412",
          "open_command" : "openExample('wavelet\/DWTUsingWaveletNameExample')",
          "title" : "DWT Using Wavelet Name" },
        
        { "url" : "dwt.html#mw_2aa07de3-b507-42d5-94e4-3360c63b6652",
          "open_command" : "openExample('wavelet\/DWTUsingWaveletandScalingFiltersExample')",
          "title" : "DWT Using Wavelet and Scaling Filters" },
        
        { "url" : "dwt.html#mw_52eb0d4c-321d-4c49-a23a-0e512edd7972",
          "open_command" : "openExample('wavelet\/SinglelevelDiscreteWaveletTransformOnAGPUExample')",
          "title" : "Single-Level Discrete Wavelet Transform on a GPU" } ],
      "seealso" : 
      [ 
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "idwt.html",
          "name" : "idwt" },
        
        { "url" : "dwtmode.html",
          "name" : "dwtmode" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" } ] },
    { "href" : "ref\/dwt2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dwt2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Single-level 2-D discrete wavelet transform",
      "introduced" : "preR2006a",
      "description" : "dwt2 computes the single-level 2-D wavelet decomposition.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[cA,cH,cV,cD] = dwt2(X,wname)",
            "[cA,cH,cV,cD] = dwt2(X,LoD,HiD)",
            "[cA,cH,cV,cD] = dwt2(___,'mode',extmode)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "d124e29366",
          "value" : 
          [ "numeric array",
            "logical array" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "d124e29408",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoD",
          "purpose" : "Wavelet decomposition lowpass filter",
          "htmlid" : "d124e29438",
          "value" : 
          [ "even-length real-valued vector" ] },
        
        { "name" : "HiD",
          "purpose" : "Wavelet decomposition highpass filter",
          "htmlid" : "d124e29467",
          "value" : 
          [ "even-length real-valued vector" ] },
        
        { "name" : "extmode",
          "purpose" : "Extension mode",
          "htmlid" : "d124e29496",
          "value" : 
          [ "'zpd'",
            "'sp0'",
            "'spd'" ] } ],
      "outputs" : 
      [ 
        { "name" : "cA",
          "purpose" : "Approximation coefficients",
          "htmlid" : "d124e29606",
          "value" : 
          [ "array" ] },
        
        { "name" : "cH",
          "purpose" : "Horizontal detail coefficients",
          "htmlid" : "d124e29646",
          "value" : 
          [ "array" ] },
        
        { "name" : "cV",
          "purpose" : "Vertical detail coefficients",
          "htmlid" : "d124e29686",
          "value" : 
          [ "array" ] },
        
        { "name" : "cD",
          "purpose" : "Diagonal detail coefficients",
          "htmlid" : "d124e29726",
          "value" : 
          [ "array" ] } ],
      "examples" : 
      [ 
        { "url" : "dwt2.html#mw_955ee201-cf75-4ec1-be8e-c77b79d7ae9d",
          "open_command" : "openExample('wavelet\/DWT2DOfImageExample')",
          "title" : "Single-Level 2-D Discrete Wavelet Transform of an Image" },
        
        { "url" : "dwt2.html#mw_1336a46e-066e-4a78-ad7c-fb85cb9dd63a",
          "open_command" : "openExample('wavelet\/SingleLevel2DDWTwithFiltersExample')",
          "title" : "Single-Level 2-D Discrete Wavelet Transform Using Filters" },
        
        { "url" : "dwt2.html#mw_7e27415b-0852-4b58-a8a7-170ad1ccf802",
          "open_command" : "openExample('wavelet\/SingleLevel2DDiscreteWaveletTransformOnAGPUExample')",
          "title" : "Single-Level 2-D Discrete Wavelet Transform on a GPU" } ],
      "seealso" : 
      [ 
        { "url" : "dwtmode.html",
          "name" : "dwtmode" },
        
        { "url" : "idwt2.html",
          "name" : "idwt2" },
        
        { "url" : "haart2.html",
          "name" : "haart2" },
        
        { "url" : "ihaart2.html",
          "name" : "ihaart2" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" },
        
        { "url" : "waverec2.html",
          "name" : "waverec2" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" } ] },
    { "href" : "ref\/dwt3.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dwt3",
          "fcntype" : "simple" } ],
      "refpurpose" : "Single-level 3-D discrete wavelet transform",
      "introduced" : "R2010a",
      "description" : "This MATLAB function returns the single-level three-dimensional wavelet decomposition wt of the input data x using the wname wavelet.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wt = dwt3(x,wname)",
            "wt = dwt3(x,wname,'mode',extM)",
            "wt = dwt3(x,w,___)",
            "wt = dwt3(x,wf,___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_cb2962e9-3f56-4c2d-8ea6-a6db57ce0dc0",
          "value" : 
          [ "3-D array" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_7d58db25-a93e-4742-8d10-f3fabd13bc40",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "w",
          "purpose" : "Analyzing wavelets",
          "htmlid" : "mw_a520dbc6-e283-4e95-ad1d-4b89abbef8d4",
          "value" : 
          [ "cell array of character vectors",
            "string array",
            "structure" ] },
        
        { "name" : "wf",
          "purpose" : "Wavelet filters",
          "htmlid" : "mw_d0a3e944-5a4b-42b8-b6a0-24c0e74acec9",
          "value" : 
          [ "cell array",
            "structure" ] },
        
        { "name" : "extM",
          "purpose" : "Extension mode",
          "htmlid" : "mw_77fc847a-e0aa-487b-88e8-f5ad3e43271c",
          "value" : 
          [ "'zpd'",
            "'sp0'",
            "'spd'" ] } ],
      "outputs" : 
      [ 
        { "name" : "wt",
          "purpose" : "Single-level 3-D wavelet decomposition",
          "htmlid" : "mw_ecc7c794-27a0-484b-90cd-51000025a7ce",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "dwt3.html#mw_b84664c9-36cc-4559-b060-cfdc87e2593f",
          "open_command" : "openExample('wavelet\/SingleLevelThreeDimensionalWaveletDecompositionExample')",
          "title" : "Single-Level Three-Dimensional Wavelet Decomposition" } ],
      "seealso" : 
      [ 
        { "url" : "dwtmode.html",
          "name" : "dwtmode" },
        
        { "url" : "idwt3.html",
          "name" : "idwt3" },
        
        { "url" : "wavedec3.html",
          "name" : "wavedec3" },
        
        { "url" : "waverec3.html",
          "name" : "waverec3" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" } ] },
    { "href" : "ref\/dwtfilterbank.dwtpassbands.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dwtpassbands",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dwtfilterbank.dwtpassbands",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "DWT filter bank passbands",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the theoretical discrete wavelet transform (DWT) passbands for the DWT filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "dwtbands = dwtpassbands(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Discrete wavelet transform filter bank",
          "htmlid" : "d124e32331",
          "value" : 
          [ "dwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "dwtbands",
          "purpose" : "Theoretical DWT passbands",
          "htmlid" : "d124e32358",
          "value" : 
          [ "real-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "dwtfilterbank.dwtpassbands.html#mw_66e28208-a5fa-41b9-9e7a-45f7fe79505d",
          "open_command" : "openExample('wavelet\/DWTFilterBankPassbandsExample')",
          "title" : "DWT Filter Bank Passbands" } ],
      "seealso" : 
      [ 
        { "url" : "dwtfilterbank.powerbw.html",
          "name" : "powerbw" },
        
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" } ] },
    { "href" : "ref\/dwtfilterbank.filters.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "filters",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dwtfilterbank.filters",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "DWT filter bank filters",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the lowpass (scaling) and highpass (wavelet) filters, Lo and Hi, respectively, for the discrete wavelet transform (DWT) filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[Lo,Hi] = filters(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Discrete wavelet transform filter bank",
          "htmlid" : "d124e40964",
          "value" : 
          [ "dwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "Lo",
          "purpose" : "Lowpass (scaling) filters",
          "htmlid" : "d124e40991",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "Hi",
          "purpose" : "Highpass (wavelet) filters",
          "htmlid" : "d124e41017",
          "value" : 
          [ "real-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "dwtfilterbank.filters.html#mw_eb11f2e4-6a40-48cf-a753-7ac79784f76a",
          "open_command" : "openExample('wavelet\/DWTFilterBankFiltersExample')",
          "title" : "DWT Filter Bank Filters" } ],
      "seealso" : 
      [ 
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" } ] },
    { "href" : "ref\/dwtfilterbank.framebounds.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "framebounds",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dwtfilterbank.framebounds",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "DWT filter bank frame bounds",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the frame bounds for the discrete wavelet transform (DWT) filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[a,b] = framebounds(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Discrete wavelet transform filter bank",
          "htmlid" : "d124e41738",
          "value" : 
          [ "dwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "a",
          "purpose" : "Lower frame bound",
          "htmlid" : "d124e41765",
          "value" : 
          [ "positive real number" ] },
        
        { "name" : "b",
          "purpose" : "Upper frame bound",
          "htmlid" : "d124e41785",
          "value" : 
          [ "positive real number" ] } ],
      "examples" : 
      [ 
        { "url" : "dwtfilterbank.framebounds.html#mw_efe4abd6-70cd-49bf-9186-0ee8cd4a26dc",
          "open_command" : "openExample('wavelet\/DWTFilterBankFrameBoundsExample')",
          "title" : "DWT Filter Bank Frame Bounds" } ],
      "seealso" : 
      [ 
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" },
        
        { "url" : "dwtfilterbank.isbiorthogonal.html",
          "name" : "isBiorthogonal" },
        
        { "url" : "dwtfilterbank.isorthogonal.html",
          "name" : "isOrthogonal" } ] },
    { "href" : "ref\/dwtfilterbank.freqz.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "freqz",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dwtfilterbank.freqz",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "DWT filter bank frequency responses",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the complex-valued frequency responses for the wavelet filters psidft and the frequency vector f for the discrete wavelet transform (DWT) filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[psidft,f] = freqz(fb)",
            "[psidft,f,phidft] = freqz(fb)",
            "freqz(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Discrete wavelet transform filter bank",
          "htmlid" : "d124e42732",
          "value" : 
          [ "dwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "psidft",
          "purpose" : "Wavelet filter frequency responses",
          "htmlid" : "d124e42759",
          "value" : 
          [ "complex-valued matrix" ] },
        
        { "name" : "f",
          "purpose" : "Frequencies",
          "htmlid" : "d124e42792",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "phidft",
          "purpose" : "Scaling function frequency responses",
          "htmlid" : "d124e42823",
          "value" : 
          [ "complex-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "dwtfilterbank.freqz.html#mw_372893df-3897-4b92-80a8-122301f79d1a",
          "open_command" : "openExample('wavelet\/DWTFilterBankFrequencyResponsesExample')",
          "title" : "DWT Filter Bank Frequency Responses" } ],
      "seealso" : 
      [ 
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" },
        
        { "url" : "dwtfilterbank.wavelets.html",
          "name" : "wavelets" },
        
        { "url" : "dwtfilterbank.scalingfunctions.html",
          "name" : "scalingfunctions" } ] },
    { "href" : "ref\/dwtfilterbank.isbiorthogonal.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "isBiorthogonal",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dwtfilterbank.isBiorthogonal",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Determine if DWT filter bank is biorthogonal",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns true if the discrete wavelet transform (DWT) filter bank fb is a biorthogonal filter bank and false otherwise.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "tf = isBiorthogonal(fb)",
            "tf = isBiorthogonal(fb,tol)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Discrete wavelet transform filter bank",
          "htmlid" : "d124e58917",
          "value" : 
          [ "dwtfilterbank object" ] },
        
        { "name" : "tol",
          "purpose" : "Tolerance",
          "htmlid" : "d124e58940",
          "value" : 
          [ "10^{-5}",
            "positive scalar" ],
          "defaultvalue" : "10^{-5}" } ],
      "examples" : 
      [ 
        { "url" : "dwtfilterbank.isbiorthogonal.html#mw_2ddde3d1-2daa-4d52-9aca-1f88b36e2ffc",
          "open_command" : "openExample('wavelet\/BiorthogonalityTestOfDWTFilterBankExample')",
          "title" : "Biorthogonality Test of DWT Filter Bank" } ],
      "seealso" : 
      [ 
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" },
        
        { "url" : "dwtfilterbank.isorthogonal.html",
          "name" : "isOrthogonal" },
        
        { "url" : "isbiorthwfb.html",
          "name" : "isbiorthwfb" } ] },
    { "href" : "ref\/dwtfilterbank.isorthogonal.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "isOrthogonal",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dwtfilterbank.isOrthogonal",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Determine if DWT filter bank is orthogonal",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns true if the discrete wavelet transform (DWT) filter bank fb is an orthogonal filter bank and false otherwise.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "tf = isOrthogonal(fb)",
            "tf = isOrthogonal(fb,tol)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Discrete wavelet transform filter bank",
          "htmlid" : "d124e59941",
          "value" : 
          [ "dwtfilterbank object" ] },
        
        { "name" : "tol",
          "purpose" : "Tolerance",
          "htmlid" : "d124e59964",
          "value" : 
          [ "10^{-5}",
            "positive scalar" ],
          "defaultvalue" : "10^{-5}" } ],
      "examples" : 
      [ 
        { "url" : "dwtfilterbank.isorthogonal.html#mw_090df6c2-14ee-400d-8519-a2e2cdde7e58",
          "open_command" : "openExample('wavelet\/OrthogonalityTestOfDWTFilterBankExample')",
          "title" : "Orthogonality Test of DWT Filter Bank" } ],
      "seealso" : 
      [ 
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" },
        
        { "url" : "dwtfilterbank.isbiorthogonal.html",
          "name" : "isBiorthogonal" },
        
        { "url" : "isorthwfb.html",
          "name" : "isorthwfb" } ] },
    { "href" : "ref\/dwtfilterbank.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "dwtfilterbank" },
        
        { "type" : "function",
          "name" : "dwtfilterbank",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Discrete wavelet transform filter bank",
      "introduced" : "R2018a",
      "description" : "Use dwtfilterbank to create a discrete wavelet transform (DWT) filter bank",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "fb = dwtfilterbank",
            "fb = dwtfilterbank(Name,Value)" ] } ],
      "classpropertygroup" : 
      [ 
        { "classproperty" : 
          [ 
            { "name" : "SignalLength",
              "purpose" : "Signal length",
              "htmlid" : "mw_1451d7a7-9ad9-4805-b938-9a5bd1505492",
              "value" : 
              [ "1024",
                "positive integer greater than or equal to 2" ],
              "defaultvalue" : "1024" },
            
            { "name" : "Wavelet",
              "purpose" : "Name of wavelet",
              "htmlid" : "mw_9b9a9e34-70bf-48a9-be7b-f0936b95af8d",
              "value" : 
              [ "'sym4'",
                "'Custom'",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "'sym4'" },
            
            { "name" : "FilterType",
              "purpose" : "Wavelet filter type",
              "htmlid" : "mw_8681877f-75d9-4cde-b230-95e3e0fbe275",
              "value" : 
              [ "'Analysis'",
                "'Synthesis'" ],
              "defaultvalue" : "'Analysis'" },
            
            { "name" : "Level",
              "purpose" : "Wavelet transform level",
              "htmlid" : "mw_76030fe3-1a77-4307-95e7-9fc6b883f4a0",
              "value" : 
              [ "7",
                "positive integer" ],
              "defaultvalue" : "7" },
            
            { "name" : "SamplingFrequency",
              "purpose" : "Sampling frequency in hertz",
              "htmlid" : "mw_f52e1aa1-aac0-45c6-ae15-7cb0b727f889",
              "value" : 
              [ "1",
                "positive scalar" ],
              "defaultvalue" : "1" },
            
            { "name" : "CustomWaveletFilter",
              "purpose" : "Custom wavelet filter coefficients",
              "htmlid" : "mw_a03bbf4c-48f8-40a4-bc1a-f6b42539b44f",
              "value" : 
              [ "even-length column vector",
                "two-column matrix with even number of rows" ] },
            
            { "name" : "CustomScalingFilter",
              "purpose" : "Custom scaling filter coefficients",
              "htmlid" : "mw_15328c1c-fdea-4385-81e2-a16040047ee4",
              "value" : 
              [ "even-length column vector",
                "two-column matrix with even number of rows" ] } ] } ],
      "examples" : 
      [ 
        { "url" : "dwtfilterbank.html#mw_5304b473-26cd-4548-a2d1-9971d92b14f6",
          "open_command" : "openExample('wavelet\/DiscreteWaveletTransformFilterBankWithDefaultValuesExample')",
          "title" : "Discrete Wavelet Transform Filter Bank with Default Values" },
        
        { "url" : "dwtfilterbank.html#mw_5660c0ee-afd0-4690-8145-4556550e2e26",
          "open_command" : "openExample('wavelet\/CreateDWTFilterBankUsingCustomFiltersExample')",
          "title" : "Create DWT Filter Bank Using Custom Filters" } ],
      "seealso" : 
      [ 
        { "url" : "wavemngr.html",
          "name" : "wavemngr" },
        
        { "url" : "dwt.html",
          "name" : "dwt" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "modwt.html",
          "name" : "modwt" } ] },
    { "href" : "ref\/dwtfilterbank.powerbw.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "powerbw",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dwtfilterbank.powerbw",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "DWT filter bank power bandwidth",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns a MATLAB table bwtable containing the theoretical and measured bandwidths of the discrete wavelet transform (DWT) filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "bwtable = powerbw(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Discrete wavelet transform filter bank",
          "htmlid" : "d124e97980",
          "value" : 
          [ "dwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "bwtable",
          "purpose" : "Theoretical and measured bandwidths",
          "htmlid" : "d124e98007",
          "value" : 
          [ "table" ] } ],
      "examples" : 
      [ 
        { "url" : "dwtfilterbank.powerbw.html#mw_bb4f9989-b01f-409b-9efa-b7bf49e9fb37",
          "open_command" : "openExample('wavelet\/DWTFilterBankPowerBandwidthExample')",
          "title" : "DWT Filter Bank Power Bandwidth" } ],
      "seealso" : 
      [ 
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" },
        
        { "url" : "dwtfilterbank.dwtpassbands.html",
          "name" : "dwtpassbands" } ] },
    { "href" : "ref\/dwtfilterbank.qfactor.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "qfactor",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dwtfilterbank.qfactor",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "DWT filter bank quality factor",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the quality factor for the discrete wavelet transform (DWT) filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "qf = qfactor(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Discrete wavelet transform filter bank",
          "htmlid" : "d124e98732",
          "value" : 
          [ "dwtfilterbank object" ] } ],
      "examples" : 
      [ 
        { "url" : "dwtfilterbank.qfactor.html#mw_57217e6f-d10d-4375-8cc1-b7f055f569e2",
          "open_command" : "openExample('wavelet\/DWTFilterBankQualityFactorExample')",
          "title" : "DWT Filter Bank Quality Factor" } ],
      "seealso" : 
      [ 
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" } ] },
    { "href" : "ref\/dwtfilterbank.scalingfunctions.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "scalingfunctions",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dwtfilterbank.scalingfunctions",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "DWT filter bank time-domain scaling functions",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the time-centered scaling functions for each level of the discrete wavelet transform (DWT) filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "phi = scalingfunctions(fb)",
            "[phi,t] = scalingfunctions(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Discrete wavelet transform filter bank",
          "htmlid" : "d124e103405",
          "value" : 
          [ "dwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "phi",
          "purpose" : "Time-centered scaling functions",
          "htmlid" : "d124e103432",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "t",
          "purpose" : "Sampling instants",
          "htmlid" : "d124e103467",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "dwtfilterbank.scalingfunctions.html#mw_4897890e-2cfd-4611-a4f3-f00d0cb15c28",
          "open_command" : "openExample('wavelet\/DWTFilterBankScalingFunctionsExample')",
          "title" : "DWT Filter Bank Scaling Functions" } ],
      "seealso" : 
      [ 
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" },
        
        { "url" : "dwtfilterbank.wavelets.html",
          "name" : "wavelets" },
        
        { "url" : "dwtfilterbank.freqz.html",
          "name" : "freqz" } ] },
    { "href" : "ref\/dwtfilterbank.wavelets.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wavelets",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dwtfilterbank.wavelets",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "DWT filter bank time-domain wavelets",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the time-domain and centered wavelets corresponding to the wavelet passband filters in the discrete wavelet transform (DWT) filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "psi = wavelets(fb)",
            "[psi,t] = wavelets(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Discrete wavelet transform filter bank",
          "htmlid" : "d124e121641",
          "value" : 
          [ "dwtfilterbank object" ] } ],
      "outputs" : 
      [ 
        { "name" : "psi",
          "purpose" : "Time-centered wavelets",
          "htmlid" : "d124e121668",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "t",
          "purpose" : "Sampling instants",
          "htmlid" : "d124e121701",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "dwtfilterbank.wavelets.html#mw_9b40c08a-f68e-450d-b208-20831579adef",
          "open_command" : "openExample('wavelet\/DWTFilterBankWaveletsExample')",
          "title" : "DWT Filter Bank Wavelets" } ],
      "seealso" : 
      [ 
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" },
        
        { "url" : "dwtfilterbank.scalingfunctions.html",
          "name" : "scalingfunctions" },
        
        { "url" : "dwtfilterbank.freqz.html",
          "name" : "freqz" } ] },
    { "href" : "ref\/dwtfilterbank.waveletsupport.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "waveletsupport",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "dwtfilterbank.waveletsupport",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "DWT filter bank time supports",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the wavelet time supports of the discrete wavelet transform (DWT) filter bank fb.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "spsi = waveletsupport(fb)",
            "spsi = waveletsupport(fb,thresh)",
            "[spsi,sphi] = waveletsupport(fb)",
            "[spsi,sphi,tlow,thigh] = waveletsupport(fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fb",
          "purpose" : "Discrete wavelet transform filter bank",
          "htmlid" : "d124e124903",
          "value" : 
          [ "dwtfilterbank object" ] },
        
        { "name" : "thresh",
          "purpose" : "Threshold for the integrated energy",
          "htmlid" : "d124e124926",
          "value" : 
          [ "1e-6",
            "positive scalar" ],
          "defaultvalue" : "1e-6" } ],
      "outputs" : 
      [ 
        { "name" : "spsi",
          "purpose" : "Wavelet time supports",
          "htmlid" : "d124e124970",
          "value" : 
          [ "real-valued column vector" ] },
        
        { "name" : "sphi",
          "purpose" : "Scaling function time supports",
          "htmlid" : "d124e124992",
          "value" : 
          [ "real-valued column vector" ] },
        
        { "name" : "tlow",
          "purpose" : "First instants",
          "htmlid" : "d124e125014",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "thigh",
          "purpose" : "Last instants",
          "htmlid" : "d124e125058",
          "value" : 
          [ "real-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "dwtfilterbank.waveletsupport.html#mw_658b60b3-919e-4921-b4e7-6d43a6cfdc56",
          "open_command" : "openExample('wavelet\/DWTFilterBankWaveletTimeSupportsExample')",
          "title" : "DWT Filter Bank Wavelet Time Supports" } ],
      "seealso" : 
      [ 
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" },
        
        { "url" : "dwtfilterbank.scalingfunctions.html",
          "name" : "scalingfunctions" },
        
        { "url" : "dwtfilterbank.wavelets.html",
          "name" : "wavelets" } ] },
    { "href" : "ref\/dwtleader.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dwtleader",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multifractal 1-D wavelet leader estimates",
      "introduced" : "R2016b",
      "description" : "This MATLAB function returns the singularity spectrum, dh, and the Hölder exponents, h, for the 1-D real-valued data, x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[dh,h] = dwtleader(x)",
            "[dh,h,cp] = dwtleader(x)",
            "[dh,h,cp,tauq] = dwtleader(x)",
            "[dh,h,cp,tauq,leaders] = dwtleader(___)",
            "[dh,h,cp,tauq,leaders,structfunc] = dwtleader(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___]= dwtleader(x,wname)",
            "[___] = dwtleader(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "bveevq4-x",
          "value" : 
          [ "vector of real values" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet name",
          "htmlid" : "bveevq4-wname",
          "value" : 
          [ "'bior1.5'",
            "character vector",
            "string scalar" ],
          "defaultvalue" : "'bior1.5'" },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "RegressionWeight",
              "purpose" : "Weight option",
              "htmlid" : "d124e31270",
              "value" : 
              [ "'uniform'",
                "'scale'" ],
              "defaultvalue" : "'uniform'" },
            
            { "name" : "MinRegressionLevel",
              "purpose" : "Minimum regression level",
              "htmlid" : "bveevq4-MinRegressionLevel",
              "value" : 
              [ "3",
                "positive integer" ],
              "defaultvalue" : "3" },
            
            { "name" : "MaxRegressionLevel",
              "purpose" : "Maximum regression level",
              "htmlid" : "bveevq4-MaxRegressionLevel",
              "value" : 
              [ "positive integer" ] } ] } ],
      "outputs" : 
      [ 
        { "name" : "dh",
          "purpose" : "Singularity spectrum",
          "htmlid" : "bveevq4-dh",
          "value" : 
          [ "vector" ] },
        
        { "name" : "h",
          "purpose" : "Hölder exponent estimates",
          "htmlid" : "bveevq4-h",
          "value" : 
          [ "1-by-11 vector of real scalars" ] },
        
        { "name" : "cp",
          "purpose" : "Cumulants",
          "htmlid" : "bveevq4-cp",
          "value" : 
          [ "vector" ] },
        
        { "name" : "tauq",
          "purpose" : "Scaling exponents",
          "htmlid" : "bveevq4-tauq",
          "value" : 
          [ "column vector" ] },
        
        { "name" : "leaders",
          "purpose" : "Wavelet leaders",
          "htmlid" : "bveevq4-leaders",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "structfunc",
          "purpose" : "Multiresolution structure functions",
          "htmlid" : "bveevq4-structfunc",
          "value" : 
          [ "struct" ] } ],
      "examples" : 
      [ 
        { "url" : "dwtleader.html#bvfgqrt",
          "open_command" : "openExample('wavelet\/MultifractalSpectrumOfHeartRateVariabilityExample')",
          "title" : "Multifractal Spectrum of Heart-Rate Variability" },
        
        { "url" : "dwtleader.html#bvegawz-2",
          "open_command" : "openExample('wavelet\/BrownianNoiseSingularitySpectrumExample')",
          "title" : "Brownian Noise Singularity Spectrum" },
        
        { "url" : "dwtleader.html#mw_d297f1d2-6bf4-4934-ac13-e2b34ba7342d",
          "open_command" : "openExample('wavelet\/MultifractalRandomWalkCumulantsExponentsExample')",
          "title" : "Multifractal Random Walk Cumulants" } ],
      "seealso" : 
      [ 
        { "url" : "wtmm.html",
          "name" : "wtmm" },
        
        { "url" : "wfbm.html",
          "name" : "wfbm" } ] },
    { "href" : "ref\/dwtmode.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dwtmode",
          "fcntype" : "simple" } ],
      "refpurpose" : "Discrete wavelet transform extension mode",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function sets the signal or image extension mode for both discrete wavelet and wavelet packet transforms to mode.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "dwtmode(mode)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "dwtmode",
            "dwtmode('status')",
            "st = dwtmode",
            "st = dwtmode('status')",
            "st = dwtmode('status','nodisp')" ] },
        
        { "title" : "",
          "syntax" : 
          [ "dwtmode('save',mode)",
            "dwtmode('save')",
            "dwtmode('save',CURRENTMODE)" ] } ],
      "inputs" : 
      [ 
        { "name" : "mode",
          "purpose" : "Discrete wavelet transform extension mode",
          "htmlid" : "d124e32096",
          "value" : 
          [ "'zpd'",
            "'sp0'",
            "'spd'" ] } ],
      "outputs" : 
      [ 
        { "name" : "st",
          "purpose" : "DWT extension mode",
          "htmlid" : "d124e32206",
          "value" : 
          [ "character array" ] } ],
      "examples" : 
      [ 
        { "url" : "dwtmode.html#mw_7aa5662b-dc33-40e6-9bdc-6ed40f324b87",
          "open_command" : "openExample('wavelet\/DisplayAndChangeSignalExtensionModeExample')",
          "title" : "Display and Change Signal Extension Mode" } ],
      "seealso" : 
      [ 
        { "url" : "dwt.html",
          "name" : "dwt" },
        
        { "url" : "dwt2.html",
          "name" : "dwt2" },
        
        { "url" : "idwt.html",
          "name" : "idwt" },
        
        { "url" : "idwt2.html",
          "name" : "idwt2" },
        
        { "url" : "wextend.html",
          "name" : "wextend" } ] },
    { "href" : "ref\/dyaddown.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dyaddown",
          "fcntype" : "simple" } ],
      "refpurpose" : "Dyadic downsampling",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function downsamples even-indexed elements of X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Y = dyaddown(X)",
            "Y = dyaddown(X,EVENODD)",
            "Y = dyaddown(___,'type')" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Data to be downsampled",
          "htmlid" : "mw_45fed8fa-a462-4ffb-bda6-76c2b08f62a9",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "EVENODD",
          "purpose" : "Even- or odd-indexed elements of X",
          "htmlid" : "mw_64486859-e519-4bce-8f66-e5b4e3df0cbf",
          "value" : 
          [ "0",
            "positive integer" ],
          "defaultvalue" : "0" },
        
        { "name" : "'type'",
          "purpose" : "Type of downsampling",
          "htmlid" : "mw_28081fed-815b-4b3c-bc81-4701ded75b0d",
          "value" : 
          [ "'c'",
            "'r'",
            "'m'" ],
          "defaultvalue" : "'c'" } ],
      "outputs" : 
      [ 
        { "name" : "Y",
          "purpose" : "Dyadic downsampled version of X",
          "htmlid" : "mw_b354008c-33e2-41e0-936a-55e9786000ca",
          "value" : 
          [ "vector",
            "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "dyaddown.html#mw_c050a131-6733-422f-9e63-dd10bbc48752",
          "open_command" : "openExample('wavelet\/PerformDyadicDownsamplingExample')",
          "title" : "Perform Dyadic Downsampling" } ],
      "seealso" : 
      [ 
        { "url" : "dyadup.html",
          "name" : "dyadup" } ] },
    { "href" : "ref\/dyadup.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dyadup",
          "fcntype" : "simple" } ],
      "refpurpose" : "Dyadic upsampling",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function upsamples odd-indexed elements of X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Y = dyadup(X)",
            "Y = dyadup(X,EVENODD)",
            "Y = dyadup(___,'type')" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Data to be upsampled",
          "htmlid" : "mw_4094e9e6-da36-4258-a3f9-7d47d2fb54d4",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "EVENODD",
          "purpose" : "Even- or odd-indexed samples of X",
          "htmlid" : "mw_b23931b9-bf71-4d94-8274-04c927b7e31a",
          "value" : 
          [ "1",
            "positive integer" ],
          "defaultvalue" : "1" },
        
        { "name" : "'type'",
          "purpose" : "Type of upsampling",
          "htmlid" : "mw_10360a1f-3dd5-4744-a63e-1fcf0a29edf8",
          "value" : 
          [ "'c'",
            "'r'",
            "'m'" ],
          "defaultvalue" : "'c'" } ],
      "outputs" : 
      [ 
        { "name" : "Y",
          "purpose" : "Dyadic upsampled version of X",
          "htmlid" : "mw_28efb937-4d9e-45a5-a119-ba78203eebe7",
          "value" : 
          [ "vector",
            "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "dyadup.html#mw_6eb4c17c-2669-43ed-a7ae-e0eefe6bbb5b",
          "open_command" : "openExample('wavelet\/PerformDyadicUpsamplingExample')",
          "title" : "Perform Dyadic Upsampling" } ],
      "seealso" : 
      [ 
        { "url" : "dyaddown.html",
          "name" : "dyaddown" } ] },
    { "href" : "ref\/emd.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "emd",
          "fcntype" : "simple" } ],
      "refpurpose" : "Empirical mode decomposition",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns intrinsic mode functions imf and residual signal residual corresponding to the empirical mode decomposition of x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[imf,residual] = emd(x)",
            "[imf,residual,info] = emd(x)",
            "[___] = emd(___,Name,Value)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "emd(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Time-domain signal",
          "htmlid" : "d124e34989",
          "value" : 
          [ "vector",
            "timetable" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "SiftRelativeTolerance",
              "purpose" : "Cauchy-type convergence criterion",
              "htmlid" : "d124e35036",
              "value" : 
              [ "0.2",
                "positive scalar" ],
              "defaultvalue" : "0.2" },
            
            { "name" : "SiftMaxIterations",
              "purpose" : "Maximum number of sifting iterations",
              "htmlid" : "d124e35065",
              "value" : 
              [ "100",
                "positive scalar integer" ],
              "defaultvalue" : "100" },
            
            { "name" : "MaxNumIMF",
              "purpose" : "Maximum number of IMFs extracted",
              "htmlid" : "d124e35096",
              "value" : 
              [ "10",
                "positive scalar integer" ],
              "defaultvalue" : "10" },
            
            { "name" : "MaxNumExtrema",
              "purpose" : "Maximum number of extrema in the residual signal",
              "htmlid" : "d124e35127",
              "value" : 
              [ "1",
                "positive scalar integer" ],
              "defaultvalue" : "1" },
            
            { "name" : "MaxEnergyRatio",
              "purpose" : "Signal to residual energy ratio",
              "htmlid" : "d124e35158",
              "value" : 
              [ "20",
                "scalar" ],
              "defaultvalue" : "20" },
            
            { "name" : "Interpolation",
              "purpose" : "Interpolation method for envelope construction",
              "htmlid" : "d124e35190",
              "value" : 
              [ "'spline'",
                "'pchip'" ],
              "defaultvalue" : "'spline'" },
            
            { "name" : "Display",
              "purpose" : "Toggle information display in the command window",
              "htmlid" : "d124e35240",
              "value" : 
              [ "0",
                "1" ],
              "defaultvalue" : "0" } ] } ],
      "outputs" : 
      [ 
        { "name" : "imf",
          "purpose" : "Intrinsic mode function",
          "htmlid" : "d124e35269",
          "value" : 
          [ "matrix",
            "timetable" ] },
        
        { "name" : "residual",
          "purpose" : "Residual of the signal",
          "htmlid" : "d124e35311",
          "value" : 
          [ "column vector",
            "single data column timetable" ] },
        
        { "name" : "info",
          "purpose" : "Additional information for diagnostics",
          "htmlid" : "d124e35352",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "emd.html#mw_718f517b-3d96-4628-ae9a-38293f04111c",
          "open_command" : "openExample('predmaint_shared\/PerformEMDAndComputeHilbertSpectrumOfNonStationarySignalExample')",
          "title" : "Perform Empirical Mode Decomposition and Visualize Hilbert Spectrum of Signal" },
        
        { "url" : "emd.html#mw_ca27ca8e-6bd1-4f04-b0ff-797de365e69c",
          "open_command" : "openExample('predmaint_shared\/ZeroCrossingsAndExtremaInIntrinsicModeFunctionOfSinusoidExample')",
          "title" : "Zero Crossings and Extrema in Intrinsic Mode Function of Sinusoid" },
        
        { "url" : "emd.html#mw_6dfb7ae7-6d4f-4dbb-838e-d42637beaf25",
          "open_command" : "openExample('predmaint_shared\/ComputeIntrinsicModeFunctionsOfVibrationSignalExample')",
          "title" : "Compute Intrinsic Mode Functions of Vibration Signal" },
        
        { "url" : "emd.html#mw_03854969-5af7-4f55-858f-dd79daeb8199",
          "open_command" : "openExample('predmaint_shared\/VisualizeIntrinsicModeFunctionsOfNonStationarySignalExample')",
          "title" : "Visualize Residual and Intrinsic Mode Functions of Signal" } ],
      "seealso" : 
      [ 
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "hht.html",
          "name" : "hht" },
        
        { "url" : "vmd.html",
          "name" : "vmd" } ] },
    { "href" : "ref\/ewt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ewt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Empirical wavelet transform",
      "introduced" : "R2020b",
      "description" : "This MATLAB function returns the multiresolution analysis (MRA) components corresponding to the empirical wavelet transform (EWT) of x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "mra = ewt(x)",
            "[mra,cfs] = ewt(x)",
            "[mra,cfs,wfb] = ewt(x)",
            "[mra,cfs,wfb,info] = ewt(x)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = ewt(___,Name,Value)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "ewt(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_e02d44b4-2e00-4d57-acf9-d1a3e2d004f4",
          "value" : 
          [ "vector",
            "timetable" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "PeakThresholdPercent",
              "purpose" : "Threshold percentage of maximum peak",
              "htmlid" : "mw_fcaa6e47-92e9-4fa8-bb3b-233088f82cb5",
              "value" : 
              [ "70",
                "real number in the interval (0, 100)" ],
              "defaultvalue" : "70" },
            
            { "name" : "SegmentMethod",
              "purpose" : "Segmentation method",
              "htmlid" : "mw_36d01b34-2017-435f-8898-bdd2a0fcb582",
              "value" : 
              [ "'geomean'",
                "'localmin'" ],
              "defaultvalue" : "'geomean'" },
            
            { "name" : "MaxNumPeaks",
              "purpose" : "Maximum number of peaks",
              "htmlid" : "mw_fc9bad3d-5d35-4e72-8896-a005ec63980e",
              "value" : 
              [ "positive integer" ] },
            
            { "name" : "FrequencyResolution",
              "purpose" : "Frequency resolution bandwidth",
              "htmlid" : "mw_c5d5ba5b-918a-4c4d-9422-3dbe6ab84ab4",
              "value" : 
              [ "real number less than or equal to 0.25" ] },
            
            { "name" : "LogSpectrum",
              "purpose" : "Logarithm of spectrum",
              "htmlid" : "mw_241072d7-73bf-476e-843f-7af372d50cf7",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" } ] } ],
      "outputs" : 
      [ 
        { "name" : "mra",
          "purpose" : "Multiresolution analysis",
          "htmlid" : "mw_b8a8fe6a-a589-4c23-a74d-d422a064dd69",
          "value" : 
          [ "matrix",
            "timetable" ] },
        
        { "name" : "cfs",
          "purpose" : "EWT analysis coefficients",
          "htmlid" : "mw_63097b9d-4289-4245-8ab3-5c0068885b2d",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "wfb",
          "purpose" : "Empirical wavelet filter bank",
          "htmlid" : "mw_c5f70d3d-ac48-45f9-b39a-3576d26da6fc",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "info",
          "purpose" : "Filter bank information",
          "htmlid" : "mw_b1bc0a39-005a-44a5-b614-fbcce3500ea1",
          "value" : 
          [ "structure array" ] } ],
      "examples" : 
      [ 
        { "url" : "ewt.html#mw_06bc61bc-9389-4a04-8f3b-26d3f89ce8fe",
          "open_command" : "openExample('wavelet\/PerformEWTAndVisualizeHilbertSpectrumOfSignalExample')",
          "title" : "Perform Empirical Wavelet Transform and Visualize Hilbert Spectrum of Signal" },
        
        { "url" : "ewt.html#mw_943a4190-cc94-40fa-a394-08f6c66f57f4",
          "open_command" : "openExample('wavelet\/VisualizeEmpiricalWaveletTransformFilterBankExample')",
          "title" : "Visualize Empirical Wavelet Transform Filter Bank" },
        
        { "url" : "ewt.html#mw_d6c1b6d8-c0c6-4834-b82e-17cd8d9d729e",
          "open_command" : "openExample('wavelet\/EmpiricalWaveletTransformOfECGSignalExample')",
          "title" : "Empirical Wavelet Transform of ECG Signal" } ],
      "seealso" : 
      [ 
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "emd.html",
          "name" : "emd" },
        
        { "url" : "modwtmra.html",
          "name" : "modwtmra" },
        
        { "url" : "vmd.html",
          "name" : "vmd" },
        
        { "url" : "hht.html",
          "name" : "hht" } ] },
    { "href" : "ref\/fbspwavf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "fbspwavf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Complex frequency B-spline wavelet",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns values of the complex frequency B-Spline wavelet defined by the order parameter M (M is an integer such that 1 ≤ M), a bandwidth parameter FB, and a wavelet center frequency FC.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[PSI,X] = fbspwavf(LB,UB,N,M,FB,FC)" ] } ],
      "seealso" : 
      [ 
        { "url" : "waveinfo.html",
          "name" : "waveinfo" } ] },
    { "href" : "ref\/fejerkorovkin.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "fejerkorovkin",
          "fcntype" : "simple" } ],
      "refpurpose" : "Fejér-Korovkin wavelet filters",
      "introduced" : "R2015b",
      "description" : "This MATLAB function returns the Fejér-Korovkin scaling filter specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Lo = fejerkorovkin(wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Name",
          "htmlid" : "buv7ds0-wname",
          "value" : 
          [ "'fk4'",
            "'fk6'",
            "'fk8'",
            "'fk14'",
            "'fk18'",
            "'fk22'" ] } ],
      "outputs" : 
      [ 
        { "name" : "Lo",
          "purpose" : "Scaling filter",
          "htmlid" : "buv7ds0-Lo",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "fejerkorovkin.html#buv7eso",
          "open_command" : "openExample('wavelet\/FejerKorovkinFiltersExample')",
          "title" : "Fejér-Korovkin Filters" } ],
      "seealso" : 
      [ 
        { "url" : "coifwavf.html",
          "name" : "coifwavf" },
        
        { "url" : "dbwavf.html",
          "name" : "dbwavf" },
        
        { "url" : "symwavf.html",
          "name" : "symwavf" } ] },
    { "href" : "ref\/filt2ls.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "filt2ls",
          "fcntype" : "simple" } ],
      "refpurpose" : "(To be removed) Transform quadruplet of filters to lifting scheme",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the lifting scheme LS associated with the four input filters LoD, HiD, LoR, and HiR that verify the perfect reconstruction condition.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "LS = filt2ls(LoD,HiD,LoR,HiR)" ] } ],
      "inputs" : 
      [ 
        { "name" : "LoD,HiD",
          "purpose" : "Wavelet decomposition filters",
          "htmlid" : "mw_ee75441c-d065-44bc-9c0a-7178ae4bb353",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_d67c492e-5b44-48cd-bcfd-662ba20f6cb7",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "outputs" : 
      [ 
        { "name" : "LS",
          "purpose" : "Lifting scheme",
          "htmlid" : "mw_0282924f-7d4c-4422-a7dc-72cad2f44551",
          "value" : 
          [ "liftingScheme object" ] } ],
      "examples" : 
      [ 
        { "url" : "filt2ls.html#mw_c1d0a1b7-e1d1-483c-aab6-38d51277e264",
          "open_command" : "openExample('wavelet\/CreateLiftingSchemeFromFiltersExample')",
          "title" : "Create Lifting Scheme From Filters" } ],
      "seealso" : 
      [ 
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" },
        
        { "url" : "liftingscheme.ls2filt.html",
          "name" : "ls2filt" } ] },
    { "href" : "ref\/filters2lp.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "filters2lp",
          "fcntype" : "simple" } ],
      "refpurpose" : "Filters to Laurent polynomials",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the Laurent polynomials LoDz and HiDz that correspond to the z-transform of the lowpass and highpass analysis filters, respectively, associated with the lowpass filter specified by Lo.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[LoDz,HiDz] = filters2lp(Lo)",
            "[___,LoRz,HiRz] = filters2lp(Lo)",
            "[___,PRCond,AACond] = filters2lp(Lo)",
            "[___] = filters2lp(Lo,PmaxLoRz)",
            "[___] = filters2lp(Lo,PmaxLoRz,AddPOW)" ] } ],
      "inputs" : 
      [ 
        { "name" : "Lo",
          "purpose" : "Wavelet lowpass filter",
          "htmlid" : "mw_c3dba6ee-422c-4c05-a48d-bda363ac3917",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "PmaxLoRz",
          "purpose" : "Maximum power",
          "htmlid" : "mw_998c3dd6-dd7d-459a-91ba-cb36246498a6",
          "value" : 
          [ "0",
            "integer" ],
          "defaultvalue" : "0" },
        
        { "name" : "AddPOW",
          "purpose" : "Integer",
          "htmlid" : "mw_87a752f4-0854-4cc8-a583-e9ceed5972d4",
          "value" : 
          [ "0",
            "integer" ],
          "defaultvalue" : "0" } ],
      "outputs" : 
      [ 
        { "name" : "LoDz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_2c0df37a-761d-4dd6-ac0e-86bca33e5d44",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "HiDz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_d26ed661-cf8d-40f8-8488-e617aa24e9dd",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "LoRz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_838ecfe6-2677-418b-b7da-cfee66cec635",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "HiRz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_8ca56b4b-00fd-4a11-8ac5-37d820d9dbdd",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "PRCond,AACond",
          "purpose" : "Perfect reconstruction and anti-aliasing conditions",
          "htmlid" : "mw_c34cd12c-76db-4e37-bd43-27a3271331e8",
          "value" : 
          [ "laurentPolynomial objects" ] } ],
      "examples" : 
      [ 
        { "url" : "filters2lp.html#mw_2ad0be4f-604f-4fad-8e47-2947efa9efb6",
          "open_command" : "openExample('wavelet\/LaurentPolynomialsAssociatedWithWaveletFiltersExample')",
          "title" : "Laurent Polynomials Associated With Wavelet Filters" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.lp2filters.html",
          "name" : "lp2filters" },
        
        { "url" : "qmf.html",
          "name" : "qmf" },
        
        { "url" : "wave2lp.html",
          "name" : "wave2lp" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/gauswavf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "gauswavf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Gaussian wavelet",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the 1st order derivative of the Gaussian wavelet, psi, on an n-point regular grid, x, for the interval [lb,ub].",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[psi,x] = gauswavf(lb,ub,n)",
            "[psi,x] = gauswavf(lb,ub,n,p)",
            "[psi,x] = gauswavf(lb,ub,n,wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lb",
          "purpose" : "Left endpoint",
          "htmlid" : "mw_f2547252-6f55-4c29-af71-ae213dac2196",
          "value" : 
          [ "real number" ] },
        
        { "name" : "ub",
          "purpose" : "Right endpoint",
          "htmlid" : "mw_b853a9ff-59e0-4bbc-8e5c-09c9555c7197",
          "value" : 
          [ "real number" ] },
        
        { "name" : "n",
          "purpose" : "Number of regularly spaced points",
          "htmlid" : "mw_380694e8-5813-46d3-adbb-dfe8c64abbe3",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "p",
          "purpose" : "Derivative",
          "htmlid" : "mw_6fcc1d5b-adfa-4c85-bad9-3523263e225d",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Gaussian wavelet",
          "htmlid" : "mw_e2e2b39b-c8e3-4e8a-b52f-fcf17af35f3c",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "psi",
          "purpose" : "Derivative of Gaussian wavelet",
          "htmlid" : "mw_cc6dffb6-9bd9-40a9-834d-7a72dd549587",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "x",
          "purpose" : "Sample points",
          "htmlid" : "mw_5e08bd89-90e8-4765-a8b8-d15e6313885c",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "gauswavf.html#mw_259a4512-b19a-4e64-9fa4-3b57bc5e4f1d",
          "open_command" : "openExample('wavelet\/CreateGaussianWaveletExample')",
          "title" : "Create Gaussian Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wavemngr.html",
          "name" : "wavemngr" } ] },
    { "href" : "ref\/get.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "get",
          "fcntype" : "simple" } ],
      "refpurpose" : "WPTREE contents",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the content of the specified fields for the WPTREE object T.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[FieldValue1,FieldValue2, ...] = get(T,'FieldName1','FieldName2', ...)",
            "[FieldValue1,FieldValue2, ...] = get(T)" ] } ],
      "seealso" : 
      [ 
        { "url" : "disp.html",
          "name" : "disp" },
        
        { "url" : "wptree.read.html",
          "name" : "read" },
        
        { "url" : "set.html",
          "name" : "set" },
        
        { "url" : "write.html",
          "name" : "write" } ] },
    { "href" : "ref\/haart.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "haart",
          "fcntype" : "simple" } ],
      "refpurpose" : "Haar 1-D wavelet transform",
      "introduced" : "R2016b",
      "description" : "This MATLAB function performs the 1-D Haar discrete wavelet transform of the even-length vector, x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[a,d] = haart(x)",
            "[a,d] = haart(x,level)",
            "[a,d] = haart(___,integerflag)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "bveevxd-x",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "level",
          "purpose" : "Maximum level",
          "htmlid" : "bveevxd-level",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "integerflag",
          "purpose" : "Integer-valued data handling",
          "htmlid" : "bveevxd-integerflag",
          "value" : 
          [ "'noninteger'",
            "'integer'" ],
          "defaultvalue" : "'noninteger'" } ],
      "outputs" : 
      [ 
        { "name" : "a",
          "purpose" : "Approximation coefficients",
          "htmlid" : "bveevxd-a",
          "value" : 
          [ "scalar",
            "vector",
            "matrix" ] },
        
        { "name" : "d",
          "purpose" : "Detail coefficients",
          "htmlid" : "bveevxd-d",
          "value" : 
          [ "scalar",
            "vector",
            "matrix",
            "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "haart.html#bvevc2t-2",
          "open_command" : "openExample('wavelet\/HaarTransformOfECGDataExample')",
          "title" : "Haar Transform of ECG Data" },
        
        { "url" : "haart.html#bvfno16-1",
          "open_command" : "openExample('wavelet\/HaarTransformOfElectricityConsumptionDataExample')",
          "title" : "Haar Transform of Electricity Consumption Data Down to Specified Level" },
        
        { "url" : "haart.html#bvfno17-1",
          "open_command" : "openExample('wavelet\/HaarTransformOfIntegerDataSeriesExample')",
          "title" : "Haar Transform of Integer Data Series" } ],
      "seealso" : 
      [ 
        { "url" : "ihaart.html",
          "name" : "ihaart" },
        
        { "url" : "ihaart2.html",
          "name" : "ihaart2" },
        
        { "url" : "haart2.html",
          "name" : "haart2" } ] },
    { "href" : "ref\/haart2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "haart2",
          "fcntype" : "simple" } ],
      "refpurpose" : "2-D Haar wavelet transform",
      "introduced" : "R2016b",
      "description" : "This MATLAB function performs the 2-D Haar discrete wavelet transform (DWT) of the matrix, x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[a,h,v,d] = haart2(x)",
            "[a,h,v,d] = haart2(x,level)",
            "[a,h,v,d] = haart2(___,integerflag)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "bveev1f-1-x",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "level",
          "purpose" : "Maximum level",
          "htmlid" : "bveev1f-1-level",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "integerflag",
          "purpose" : "Integer-valued data handling",
          "htmlid" : "bveev1f-1-integerflag",
          "value" : 
          [ "'noninteger'",
            "'integer'" ],
          "defaultvalue" : "'noninteger'" } ],
      "outputs" : 
      [ 
        { "name" : "a",
          "purpose" : "Approximation coefficients",
          "htmlid" : "bveev1f-1-a",
          "value" : 
          [ "scalar",
            "matrix" ] },
        
        { "name" : "h",
          "purpose" : "Horizontal detail coefficients",
          "htmlid" : "bveev1f-1-h",
          "value" : 
          [ "matrix",
            "cell array" ] },
        
        { "name" : "v",
          "purpose" : "Vertical detail coefficients",
          "htmlid" : "bveev1f-1-v",
          "value" : 
          [ "matrix",
            "cell array" ] },
        
        { "name" : "d",
          "purpose" : "Diagonal detail coefficients",
          "htmlid" : "bveev1f-1-d",
          "value" : 
          [ "matrix",
            "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "haart2.html#bveev1f-2_1",
          "open_command" : "openExample('wavelet\/HaarTransformAndLevelDetailsOf2DDataExample')",
          "title" : "Haar Transform and First Level Details of 2-D Data" },
        
        { "url" : "haart2.html#bvfuoph-1",
          "open_command" : "openExample('wavelet\/HaarTransformOfAnImageToASpecifiedLevelExample')",
          "title" : "Haar Transform of Image Down to a Specified Level" },
        
        { "url" : "haart2.html#bvfuopj-1",
          "open_command" : "openExample('wavelet\/HaarTransformUsingIntegerImageDataExample')",
          "title" : "Haar Transform Using Integer Image Data" } ],
      "seealso" : 
      [ 
        { "url" : "ihaart.html",
          "name" : "ihaart" },
        
        { "url" : "ihaart2.html",
          "name" : "ihaart2" },
        
        { "url" : "haart.html",
          "name" : "haart" } ] },
    { "href" : "ref\/hanscalf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "hanscalf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Han real orthogonal scaling filters with sum and linear-phase moments",
      "introduced" : "R2022b",
      "description" : "This MATLAB function returns the Han real-valued orthogonal scaling filter corresponding to wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "scalf = hanscalf(wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Han scaling filter",
          "htmlid" : "mw_9a27c360-ad59-43fd-8d8b-77d79f2bb2c7",
          "value" : 
          [ "\"hanSR.LP\"" ] } ],
      "outputs" : 
      [ 
        { "name" : "scalf",
          "purpose" : "Scaling filter",
          "htmlid" : "mw_03ec6d3b-71ec-4f94-8563-4b479e16bc4d",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "hanscalf.html#mw_2a778431-2502-4b84-8072-5f8d3608d2d5",
          "open_command" : "openExample('wavelet\/HanRealOrthogonalWaveletExample')",
          "title" : "Han Real Orthogonal Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "symwavf.html",
          "name" : "symwavf" },
        
        { "url" : "dbwavf.html",
          "name" : "dbwavf" },
        
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "modwpt.html",
          "name" : "modwpt" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "dwpt.html",
          "name" : "dwpt" },
        
        { "url" : "orthfilt.html",
          "name" : "orthfilt" },
        
        { "url" : "isorthwfb.html",
          "name" : "isorthwfb" } ] },
    { "href" : "ref\/hht.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "hht",
          "fcntype" : "simple" } ],
      "refpurpose" : "Hilbert-Huang transform",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the Hilbert spectrum hs of the signal specified by intrinsic mode functions imf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "hs = hht(imf)",
            "hs = hht(imf,fs)",
            "[hs,f,t] = hht(___)",
            "[hs,f,t,imfinsf,imfinse] = hht(___)",
            "[___] = hht(___,Name=Value)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "hht(___)",
            "hht(___,freqlocation)" ] } ],
      "inputs" : 
      [ 
        { "name" : "imf",
          "purpose" : "Intrinsic mode function",
          "htmlid" : "d124e47261",
          "value" : 
          [ "matrix",
            "timetable" ] },
        
        { "name" : "fs",
          "purpose" : "Sample Rate",
          "htmlid" : "d124e47297",
          "value" : 
          [ "2π",
            "positive scalar" ],
          "defaultvalue" : "2π" },
        
        { "name" : "freqlocation",
          "purpose" : "Location of frequency axis on plot",
          "htmlid" : "d124e47324",
          "value" : 
          [ "\"yaxis\"",
            "\"xaxis\"" ],
          "defaultvalue" : "\"yaxis\"" },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "FrequencyLimits",
              "purpose" : "Frequency limits to compute Hilbert spectrum",
              "htmlid" : "d124e47384",
              "value" : 
              [ "[0,fs\/2]",
                "1-by-2 integer-valued vector" ],
              "defaultvalue" : "[0,fs\/2]" },
            
            { "name" : "FrequencyResolution",
              "purpose" : "Frequency resolution to discretize frequency range",
              "htmlid" : "d124e47410",
              "value" : 
              [ "(f_high-f_low)\/100",
                "positive scalar" ],
              "defaultvalue" : "(f_high-f_low)\/100" },
            
            { "name" : "MinThreshold",
              "purpose" : "Minimum threshold value of Hilbert spectrum",
              "htmlid" : "d124e47464",
              "value" : 
              [ "-inf",
                "scalar" ],
              "defaultvalue" : "-inf" } ] } ],
      "outputs" : 
      [ 
        { "name" : "hs",
          "purpose" : "Hilbert spectrum of signal",
          "htmlid" : "d124e47500",
          "value" : 
          [ "sparse matrix" ] },
        
        { "name" : "f",
          "purpose" : "Frequency values",
          "htmlid" : "d124e47520",
          "value" : 
          [ "vector" ] },
        
        { "name" : "t",
          "purpose" : "Time values",
          "htmlid" : "d124e47571",
          "value" : 
          [ "vector",
            "duration array" ] },
        
        { "name" : "imfinsf",
          "purpose" : "Instantaneous frequency of each IMF",
          "htmlid" : "d124e47619",
          "value" : 
          [ "vector",
            "matrix",
            "timetable" ] },
        
        { "name" : "imfinse",
          "purpose" : "Instantaneous energy of each IMF",
          "htmlid" : "mw_34fca2c5-6c78-465f-9f31-ff5ad6b60158",
          "value" : 
          [ "vector",
            "matrix",
            "timetable" ] } ],
      "examples" : 
      [ 
        { "url" : "hht.html#mw_91fa26f0-af46-4c1e-92e1-4bcf330350d6",
          "open_command" : "openExample('predmaint_shared\/HilbertSpectrumOfQuadraticChirpExample')",
          "title" : "Hilbert Spectrum of Quadratic Chirp" },
        
        { "url" : "hht.html#mw_133e405f-fe22-4f33-8937-e393dc70f328",
          "open_command" : "openExample('predmaint_shared\/PerformEMDAndComputeHilbertSpectrumOfNonStationarySignalExample')",
          "title" : "Perform Empirical Mode Decomposition and Visualize Hilbert Spectrum of Signal" },
        
        { "url" : "hht.html#mw_6f663078-e183-4279-835c-e1cd231f251d",
          "open_command" : "openExample('predmaint_shared\/HilbertSpectrumofWhaleSongExample')",
          "title" : "Hilbert Spectrum of Whale Song" },
        
        { "url" : "hht.html#mw_29f88450-d3e0-4612-a04a-a102c316e338",
          "open_command" : "openExample('predmaint_shared\/ComputeHilbertSpectrumParametersOfSignalExample')",
          "title" : "Compute Hilbert Spectrum Parameters of Signal" },
        
        { "url" : "hht.html#mw_20d96e54-52fa-4e94-bafa-9724254d8ce2",
          "open_command" : "openExample('predmaint_shared\/VMDOfMulticomponentSignalExample')",
          "title" : "VMD of Multicomponent Signal" },
        
        { "url" : "hht.html#mw_025b9602-e0a8-4b16-9224-21b3b95eb156",
          "open_command" : "openExample('predmaint_shared\/ComputeHilbertSpectrumOfVibrationSignalExample')",
          "title" : "Compute Hilbert Spectrum of Vibration Signal" } ],
      "seealso" : 
      [ 
        { "url" : "emd.html",
          "name" : "emd" },
        
        { "url" : "vmd.html",
          "name" : "vmd" } ] },
    { "href" : "ref\/icqt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "icqt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse constant-Q transform using nonstationary Gabor frames",
      "introduced" : "R2018a",
      "description" : "This MATLAB function returns the inverse constant-Q transform, xrec, of the coefficients cfs.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = icqt(cfs,g,fshifts)",
            "xrec = icqt(___,'SignalType',sigtype)",
            "[xrec,gdual] = icqt(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "cfs",
          "purpose" : "Constant-Q coefficients",
          "htmlid" : "d124e48496",
          "value" : 
          [ "matrix",
            "cell array",
            "structure array" ] },
        
        { "name" : "g",
          "purpose" : "Nonstationary Gabor constant-Q analysis filters",
          "htmlid" : "d124e48522",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "fshifts",
          "purpose" : "Frequency bin shifts",
          "htmlid" : "d124e48546",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "sigtype",
          "purpose" : "Signal type",
          "htmlid" : "d124e48570",
          "value" : 
          [ "'real'",
            "'complex'" ],
          "defaultvalue" : "'real'" } ],
      "outputs" : 
      [ 
        { "name" : "xrec",
          "purpose" : "Inverse constant-Q transform",
          "htmlid" : "d124e48606",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "gdual",
          "purpose" : "Dual frames",
          "htmlid" : "d124e48635",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "icqt.html#mw_3b99f506-f3e8-49db-b730-130659612105",
          "open_command" : "openExample('wavelet\/PerfectReconstructionOfTheConstantQTransformExample')",
          "title" : "Perfect Reconstruction of Constant-Q Transform" } ],
      "seealso" : 
      [ 
        { "url" : "cqt.html",
          "name" : "cqt" } ] },
    { "href" : "ref\/icwt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "icwt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse continuous 1-D wavelet transform",
      "introduced" : "R2016b",
      "description" : "This MATLAB function inverts the continuous wavelet transform (CWT) coefficient matrix cfs using Morlet's single integral formula.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = icwt(cfs)",
            "xrec = icwt(cfs,wname)",
            "xrec = icwt(___,f,freqrange)",
            "xrec = icwt(___,period,periodrange)",
            "xrec = icwt(___,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "cfs",
          "purpose" : "Continuous wavelet transform coefficients",
          "htmlid" : "bvb9ne5-wt",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "wname",
          "purpose" : "Analytic wavelet",
          "htmlid" : "bvb9ne5-wname",
          "value" : 
          [ "'morse\"",
            "\"amor\"",
            "\"bump\"" ],
          "defaultvalue" : "'morse\"" },
        
        { "name" : "f",
          "purpose" : "CWT frequencies",
          "htmlid" : "bvb9ne5-f",
          "value" : 
          [ "vector" ] },
        
        { "name" : "freqrange",
          "purpose" : "Frequency range",
          "htmlid" : "bvb9ne5-freqrange",
          "value" : 
          [ "two-element vector",
            "2-by-2 matrix" ] },
        
        { "name" : "period",
          "purpose" : "Time periods",
          "htmlid" : "bvb9ne5-period",
          "value" : 
          [ "vector" ] },
        
        { "name" : "periodrange",
          "purpose" : "Period range",
          "htmlid" : "bvb9ne5-periodrange",
          "value" : 
          [ "two-element vector",
            "2-by-2 matrix" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "TimeBandwidth",
              "purpose" : "Time-bandwidth of Morse wavelet",
              "htmlid" : "bvb9ne5-TimeBandwidth",
              "value" : 
              [ "60",
                "scalar greater than 3 and less than or equal to 120" ],
              "defaultvalue" : "60" },
            
            { "name" : "WaveletParameters",
              "purpose" : "Symmetry and time bandwidth of Morse wavelet",
              "htmlid" : "bvb9ne5-WaveletParameters",
              "value" : 
              [ "[3,60]",
                "two-element vector of scalars" ],
              "defaultvalue" : "[3,60]" },
            
            { "name" : "SignalMean",
              "purpose" : "Signal mean",
              "htmlid" : "bvb9ne5-SignalMean",
              "value" : 
              [ "scalar",
                "vector" ] },
            
            { "name" : "ScalingCoefficients",
              "purpose" : "Scaling coefficients",
              "htmlid" : "d124e49403",
              "value" : 
              [ "real- or complex-valued vector" ] },
            
            { "name" : "AnalysisFilterBank",
              "purpose" : "Analysis filters",
              "htmlid" : "mw_faa83b5f-3713-4526-8cf7-ebb611df8374",
              "value" : 
              [ "real-valued matrix" ] },
            
            { "name" : "VoicesPerOctave",
              "purpose" : "Number of voices per octave",
              "htmlid" : "bvb9ne5-VoicesPerOctave",
              "value" : 
              [ "10",
                "integer from 1 to 48" ],
              "defaultvalue" : "10" } ] } ],
      "outputs" : 
      [ 
        { "name" : "xrec",
          "purpose" : "Inverse 1-D continuous wavelet transform",
          "htmlid" : "bvb9ne5-xrec",
          "value" : 
          [ "real- or complex-valued row vector" ] } ],
      "examples" : 
      [ 
        { "url" : "icwt.html#bvdchf4",
          "open_command" : "openExample('wavelet\/InverseCWTOfSpeechSignalExample')",
          "title" : "Inverse Continuous Wavelet Transform of Speech Signal" },
        
        { "url" : "icwt.html#bvdchf9-1",
          "open_command" : "openExample('wavelet\/InverseCWTofSpeechSignalUsingBumpWaveletExample')",
          "title" : "Inverse Continuous Wavelet Transform Using Specified Wavelet" },
        
        { "url" : "icwt.html#bvdchf9-1_1",
          "open_command" : "openExample('wavelet\/ReconstructFrequencyLocalizedEarthquakeDataExample')",
          "title" : "Reconstruct Frequency-Localized Data" },
        
        { "url" : "icwt.html#bvdchf_-1",
          "open_command" : "openExample('wavelet\/ReconstructElNinoDataFromTimePeriodExample')",
          "title" : "Reconstruct Data from Specific Time Period" },
        
        { "url" : "icwt.html#mw_544701fb-73b5-4a20-9f65-6cebe3609e18",
          "open_command" : "openExample('wavelet\/ReconstructComplexDataWithTrendExample')",
          "title" : "Reconstruct Complex Data with Time-varying Trend" },
        
        { "url" : "icwt.html#mw_1106985a-6593-415b-8ffd-8be96c8b643c",
          "open_command" : "openExample('wavelet\/ReconstructSignalUsingAnalysisFiltersExample')",
          "title" : "Reconstruct Signal Using Analysis Filter Bank" } ],
      "seealso" : 
      [ 
        { "url" : "cwt.html",
          "name" : "cwt" },
        
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfreqbounds.html",
          "name" : "cwtfreqbounds" },
        
        { "url" : "wcoherence.html",
          "name" : "wcoherence" },
        
        { "url" : "wsst.html",
          "name" : "wsst" } ] },
    { "href" : "ref\/idddtree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "idddtree",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse dual-tree and double-density 1-D wavelet transform",
      "introduced" : "R2013b",
      "description" : "This MATLAB function returns the inverse wavelet transform of the wavelet decomposition (analysis filter bank), wt.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = idddtree(wt)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wt",
          "purpose" : "Wavelet transform",
          "htmlid" : "btzsu0d-wt",
          "value" : 
          [ "structure" ] } ],
      "outputs" : 
      [ 
        { "name" : "xrec",
          "purpose" : "Synthesized 1-D signal",
          "htmlid" : "btzsu0d-xrec",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "idddtree.html#btzsu88-2",
          "open_command" : "openExample('wavelet\/PerfectReconstructionUsingtheDualTreeDoubleDensityWaveleExample')",
          "title" : "Perfect Reconstruction Using Dual-Tree Double-Density Wavelet Filter Bank" } ],
      "seealso" : 
      [ 
        { "url" : "dddtree.html",
          "name" : "dddtree" },
        
        { "url" : "dddtreecfs.html",
          "name" : "dddtreecfs" },
        
        { "url" : "plotdt.html",
          "name" : "plotdt" } ] },
    { "href" : "ref\/idddtree2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "idddtree2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse dual-tree and double-density 2-D wavelet transform",
      "introduced" : "R2013b",
      "description" : "This MATLAB function returns the inverse wavelet transform of the 2-D decomposition (analysis filter bank), wt.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = idddtree2(wt)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wt",
          "purpose" : "Wavelet transform",
          "htmlid" : "bt0p1ig-1-wt",
          "value" : 
          [ "structure" ] } ],
      "outputs" : 
      [ 
        { "name" : "xrec",
          "purpose" : "Synthesized 2-D image",
          "htmlid" : "bt0p1ig-1-xrec",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "idddtree2.html#bt0p1ig-6",
          "open_command" : "openExample('wavelet\/PerfectReconstructionUsingtheComplexOrientedDualTreeWaveExample')",
          "title" : "Perfect Reconstruction Using Complex Oriented Dual-Tree Wavelet Filter Bank" } ],
      "seealso" : 
      [ 
        { "url" : "dddtree2.html",
          "name" : "dddtree2" },
        
        { "url" : "dddtreecfs.html",
          "name" : "dddtreecfs" } ] },
    { "href" : "ref\/idualtree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "idualtree",
          "fcntype" : "simple" } ],
      "refpurpose" : "Kingsbury Q-shift 1-D inverse dual-tree complex wavelet transform",
      "introduced" : "R2020a",
      "description" : "This MATLAB function returns the inverse 1-D complex dual-tree transform of the final-level approximation coefficients, A, and cell array of wavelet coefficients, D.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = idualtree(A,D)",
            "xrec = idualtree(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Final-level approximation coefficients",
          "htmlid" : "mw_6405b6b5-9122-40e1-9f7f-5e85605f3e4d",
          "value" : 
          [ "real-valued vector",
            "real-valued matrix" ] },
        
        { "name" : "D",
          "purpose" : "Wavelet coefficients",
          "htmlid" : "mw_1877e61f-07e3-4d8b-9caa-052a3d38a1c4",
          "value" : 
          [ "cell array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "LevelOneFilter",
              "purpose" : "Biorthogonal filter",
              "htmlid" : "mw_32e35940-4f64-43c1-90e3-4d63b519e588",
              "value" : 
              [ "'nearsym5_7'",
                "'nearsym13_19'",
                "'antonini'",
                "'legall'" ],
              "defaultvalue" : "'nearsym5_7'" },
            
            { "name" : "FilterLength",
              "purpose" : "Orthogonal Hilbert Q-shift synthesis filter pair length",
              "htmlid" : "mw_fc9f6c31-6375-438b-86b6-ba0adb0eeff6",
              "value" : 
              [ "10",
                "6",
                "14",
                "16",
                "18" ],
              "defaultvalue" : "10" },
            
            { "name" : "DetailGain",
              "purpose" : "Wavelet coefficients subband gains",
              "htmlid" : "mw_396f2736-f908-4f87-a6f2-a6ceb55ab74b",
              "value" : 
              [ "real-valued vector" ] },
            
            { "name" : "LowpassGain",
              "purpose" : "Gain",
              "htmlid" : "mw_9ac1815c-2297-4846-8b0d-f14cf4824e4a",
              "value" : 
              [ "1",
                "real number" ],
              "defaultvalue" : "1" } ] } ],
      "examples" : 
      [ 
        { "url" : "idualtree.html#mw_fadb908e-c4f3-4f92-995f-aeab5b801db3",
          "open_command" : "openExample('wavelet\/Inverse1DDualtreeComplexWaveletTransformExample')",
          "title" : "Inverse 1-D Dual-Tree Complex Wavelet Transform" } ],
      "seealso" : 
      [ 
        { "url" : "dualtree.html",
          "name" : "dualtree" },
        
        { "url" : "qbiorthfilt.html",
          "name" : "qbiorthfilt" },
        
        { "url" : "qorthwavf.html",
          "name" : "qorthwavf" },
        
        { "url" : "dualtree3.html",
          "name" : "dualtree3" },
        
        { "url" : "dualtree2.html",
          "name" : "dualtree2" } ] },
    { "href" : "ref\/idualtree2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "idualtree2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Kingsbury Q-shift 2-D inverse dual-tree complex wavelet transform",
      "introduced" : "R2020a",
      "description" : "This MATLAB function returns the inverse 2-D complex dual-tree transform of the final-level approximation coefficients, A, and cell array of wavelet coefficients, D.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "imrec = idualtree2(A,D)",
            "imrec = idualtree2(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Final-level approximation coefficients",
          "htmlid" : "mw_ed9f6deb-7f63-41f4-b888-c44d9808e19f",
          "value" : 
          [ "real-valued array" ] },
        
        { "name" : "D",
          "purpose" : "Wavelet coefficients",
          "htmlid" : "mw_62e9f810-f6c7-4f60-be49-275973b5898b",
          "value" : 
          [ "cell array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "LevelOneFilter",
              "purpose" : "Biorthogonal filter",
              "htmlid" : "mw_28322dae-3295-49af-be84-6c8281073f13",
              "value" : 
              [ "'nearsym5_7'",
                "'nearsym13_19'",
                "'antonini'",
                "'legall'" ],
              "defaultvalue" : "'nearsym5_7'" },
            
            { "name" : "FilterLength",
              "purpose" : "Orthogonal Hilbert Q-shift synthesis filter pair length",
              "htmlid" : "mw_476f9be4-9eac-4f2d-aaff-aed50bc77579",
              "value" : 
              [ "10",
                "6",
                "14",
                "16",
                "18" ],
              "defaultvalue" : "10" },
            
            { "name" : "DetailGain",
              "purpose" : "Wavelet coefficients subband gains",
              "htmlid" : "mw_6957e681-79bd-4846-8589-9aa1e3e54c8a",
              "value" : 
              [ "real-valued matrix" ] },
            
            { "name" : "LowpassGain",
              "purpose" : "Gain",
              "htmlid" : "mw_3c3e7346-77dd-41a0-88d2-089200519e9f",
              "value" : 
              [ "1",
                "real number" ],
              "defaultvalue" : "1" } ] } ],
      "examples" : 
      [ 
        { "url" : "idualtree2.html#mw_605a2267-8804-47d8-8da1-604d67065e2a",
          "open_command" : "openExample('wavelet\/Inverse2DDualTreeWaveletTransformExample')",
          "title" : "Inverse 2-D Dual-Tree Wavelet Transform Using Specific Subbands" } ],
      "seealso" : 
      [ 
        { "url" : "dualtree2.html",
          "name" : "dualtree2" },
        
        { "url" : "qbiorthfilt.html",
          "name" : "qbiorthfilt" },
        
        { "url" : "qorthwavf.html",
          "name" : "qorthwavf" },
        
        { "url" : "dualtree3.html",
          "name" : "dualtree3" },
        
        { "url" : "dualtree.html",
          "name" : "dualtree" } ] },
    { "href" : "ref\/idualtree3.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "idualtree3",
          "fcntype" : "simple" } ],
      "refpurpose" : "3-D dual-tree complex wavelet reconstruction",
      "introduced" : "R2017a",
      "description" : "This MATLAB function returns the inverse 3-D dual-tree complex wavelet transform of the final-level approximation coefficients, a, and cell array of wavelet coefficients, d.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = idualtree3(a,d)",
            "xrec = idualtree3(a,d,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "a",
          "purpose" : "Final-level scaling coefficients",
          "htmlid" : "bvkkzk4-a",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "d",
          "purpose" : "Wavelet coefficients",
          "htmlid" : "bvkkzk4-d",
          "value" : 
          [ "cell array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "FilterLength",
              "purpose" : "Hilbert Q-shift filter-pair length",
              "htmlid" : "bvkkzk4-FilterLength",
              "value" : 
              [ "6",
                "10",
                "14",
                "16",
                "18" ],
              "defaultvalue" : "10" },
            
            { "name" : "LevelOneFilter",
              "purpose" : "First-level biorthogonal analysis filter",
              "htmlid" : "bvkkzk4-LevelOneFilter",
              "value" : 
              [ "'nearsym5_7'",
                "'nearsym13_19'",
                "'antonini'",
                "'legall'" ],
              "defaultvalue" : "'nearsym5_7'" },
            
            { "name" : "OriginalDataSize",
              "purpose" : "Size of the original data",
              "htmlid" : "bvkkzk4-OriginalDataSize",
              "value" : 
              [ "three-element vector of even integers" ] } ] } ],
      "outputs" : 
      [ 
        { "name" : "xrec",
          "purpose" : "Inverse 3-D dual-tree complex wavelet transform",
          "htmlid" : "bvkkzk4-xrec",
          "value" : 
          [ "3-D array" ] } ],
      "examples" : 
      [ 
        { "url" : "idualtree3.html#bvkk913-2",
          "open_command" : "openExample('wavelet\/BasisWaveletsExample')",
          "title" : "Wavelet Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "dualtree3.html",
          "name" : "dualtree3" },
        
        { "url" : "wavedec3.html",
          "name" : "wavedec3" },
        
        { "url" : "waverec3.html",
          "name" : "waverec3" },
        
        { "url" : "dddtree2.html",
          "name" : "dddtree2" },
        
        { "url" : "dualtree2.html",
          "name" : "dualtree2" },
        
        { "url" : "dualtree.html",
          "name" : "dualtree" } ] },
    { "href" : "ref\/idwpt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "idwpt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multisignal 1-D inverse wavelet packet transform",
      "introduced" : "R2020a",
      "description" : "This MATLAB function inverts the discrete wavelet packet transform (DWPT) of the terminal node wavelet packet tree wpt using the bookkeeping vector l.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = idwpt(wpt,l)",
            "xrec = idwpt(wpt,l,wname)",
            "xrec = idwpt(wpt,l,LoR,HiR)",
            "xrec = idwpt(___, 'Boundary',ExtensionMode)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wpt",
          "purpose" : "Terminal node wavelet packet tree",
          "htmlid" : "mw_c1b48fae-e5bb-41de-b91f-ce151d05dccc",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "l",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "mw_f01d5abc-2799-466e-8bcb-15dcbd8736b5",
          "value" : 
          [ "vector of positive integers" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_a6d567d5-4509-4f49-8e34-6d0152515b02",
          "value" : 
          [ "'fk18'",
            "character vector",
            "string scalar" ],
          "defaultvalue" : "'fk18'" },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet synthesis filters",
          "htmlid" : "mw_b7a2c01b-326e-43a0-be1d-c32d1064921d",
          "value" : 
          [ "real-valued vectors" ] },
        
        { "name" : "ExtensionMode",
          "purpose" : "Wavelet packet transform boundary handling",
          "htmlid" : "mw_8e9ce6c1-ed03-4776-b13d-af75ab3fd2bb",
          "value" : 
          [ "'reflection'",
            "'periodic'" ],
          "defaultvalue" : "'reflection'" } ],
      "examples" : 
      [ 
        { "url" : "idwpt.html#mw_faf48cc2-6463-4d95-b50f-19afc9dd5cd9",
          "open_command" : "openExample('wavelet\/InverseWaveletPacketTransformExample')",
          "title" : "Inverse Wavelet Packet Transform" },
        
        { "url" : "idwpt.html#mw_740836ee-a3ea-4412-8396-781a0e751ab6",
          "open_command" : "openExample('wavelet\/ChangeBoundaryExtensionModeExample')",
          "title" : "Change Boundary Extension Mode" },
        
        { "url" : "idwpt.html#mw_a280a609-dc0e-46f6-b6a3-d58b4ccb5b5c",
          "open_command" : "openExample('wavelet\/PRBiorthFiltersExample')",
          "title" : "PR Biorthogonal Filters" } ],
      "seealso" : 
      [ 
        { "url" : "dwpt.html",
          "name" : "dwpt" },
        
        { "url" : "imodwpt.html",
          "name" : "imodwpt" } ] },
    { "href" : "ref\/idwt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "idwt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Single-level 1-D inverse discrete wavelet transform",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the single-level one-dimensional wavelet reconstruction x based on the approximation and detail coefficients cA and cD, respectively, using the wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "x = idwt(cA,cD,wname)",
            "x = idwt(cA,cD,LoR,HiR)",
            "x = idwt(___,l)",
            "x = idwt(___,'mode',mode)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "x = idwt(cA,[],___)",
            "x = idwt([],cD,___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "cA",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_cd4f34b3-d8dd-41db-8c83-26b89d22f680",
          "value" : 
          [ "vector" ] },
        
        { "name" : "cD",
          "purpose" : "Detail coefficients",
          "htmlid" : "mw_e9426e46-532b-4c0b-8568-b1d1e1d92812",
          "value" : 
          [ "vector" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_a983ee5e-61c4-4d7d-be5f-20162a4fc92d",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_e92ae773-4fef-4cb8-a208-2221cb7dbc41",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "l",
          "purpose" : "Length of central portion",
          "htmlid" : "mw_58547b0d-9a09-4e46-bef1-45fe0be3a8aa",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "mode",
          "purpose" : "DWT extension mode",
          "htmlid" : "mw_8cc0d105-4202-4f2c-ad8b-b75e3f16fcf2",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "examples" : 
      [ 
        { "url" : "idwt.html#mw_f1136d49-f765-4096-b29a-bf9b7de132f2",
          "open_command" : "openExample('wavelet\/InverseDWTUsingOrthogonalWaveletExample')",
          "title" : "Inverse DWT Using Orthogonal Wavelet" },
        
        { "url" : "idwt.html#mw_dd4f0a9d-f32d-4b86-8131-b7014db036f8",
          "open_command" : "openExample('wavelet\/InverseDWTUsingBiorthgonalWaveletExample')",
          "title" : "Inverse DWT Using Biorthogonal Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "dwt.html",
          "name" : "dwt" },
        
        { "url" : "dwtmode.html",
          "name" : "dwtmode" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" } ] },
    { "href" : "ref\/idwt2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "idwt2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Single-level 2-D inverse discrete wavelet transform",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function performs a single-level two-dimensional wavelet reconstruction based on the approximation matrix cA and details matrices cH, cV, and cD (horizontal, vertical, and diagonal, respectively) using the wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "x = idwt2(cA,cH,cV,cD,wname)",
            "x = idwt2(cA,cH,cV,cD,LoR,HiR)",
            "x = idwt2(___,s)",
            "x = idwt2(___,'mode',mode)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "x = idwt2(cA,[],[],[],___)",
            "x = idwt2([],cH,[],[],___)",
            "x = idwt2([],[],cV,[],___)",
            "x = idwt2([],[],[],cD,___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "cA",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_563a7eb1-a8b4-48aa-bc1e-9a1ebc9f63f1",
          "value" : 
          [ "array" ] },
        
        { "name" : "cH",
          "purpose" : "Horizontal detail coefficients",
          "htmlid" : "mw_14619e82-f919-4725-b24a-1c5f1b16007d",
          "value" : 
          [ "array" ] },
        
        { "name" : "cV",
          "purpose" : "Vertical detail coefficients",
          "htmlid" : "mw_60aceb14-ffd7-48ef-8683-ec108c826362",
          "value" : 
          [ "array" ] },
        
        { "name" : "cD",
          "purpose" : "Diagonal detail coefficients",
          "htmlid" : "mw_7cafd35f-053e-49c8-ae5f-4db2863e05f8",
          "value" : 
          [ "array" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_3123fefa-95f9-435b-8845-053a0a5fd55f",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_16011415-6ecd-4331-b7c4-c297c1c100cc",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "s",
          "purpose" : "Size of central portion",
          "htmlid" : "mw_2ff93006-17ae-40ce-8425-2b9603212bf6",
          "value" : 
          [ "two-element vector" ] },
        
        { "name" : "mode",
          "purpose" : "DWT extension mode",
          "htmlid" : "mw_c6bb2b7b-662e-4fb0-94bd-1e28d44b5f8a",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "examples" : 
      [ 
        { "url" : "idwt2.html#mw_63761184-daf8-4ffd-9a91-73e40fa4291e",
          "open_command" : "openExample('wavelet\/SingleLevel2DWaveletReconstructionExample')",
          "title" : "Single-Level 2-D Wavelet Reconstruction" },
        
        { "url" : "idwt2.html#mw_24753662-d743-47b3-a8a9-8b080863a947",
          "open_command" : "openExample('wavelet\/WaveletReconstructionUsingDetailCoefficientsExample')",
          "title" : "Wavelet Reconstruction of Detail Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "dwt2.html",
          "name" : "dwt2" },
        
        { "url" : "dwtmode.html",
          "name" : "dwtmode" },
        
        { "url" : "upwlev2.html",
          "name" : "upwlev2" } ] },
    { "href" : "ref\/idwt3.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "idwt3",
          "fcntype" : "simple" } ],
      "refpurpose" : "Single-level 3-D inverse discrete wavelet transform",
      "introduced" : "R2010a",
      "description" : "This MATLAB function computes the single-level reconstructed 3-D array X, based on the three-dimensional wavelet decomposition stored in the WT structure.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "X = idwt3(WT)",
            "C = idwt3(WT,TYPE)" ] } ],
      "examples" : 
      [ 
        { "url" : "idwt3.html#bvlj73_",
          "open_command" : "openExample('wavelet\/SingleLevelThreeDimensionalWaveletReconstructionExample')",
          "title" : "Single-Level Three-Dimensional Wavelet Reconstruction" } ],
      "seealso" : 
      [ 
        { "url" : "dwt3.html",
          "name" : "dwt3" },
        
        { "url" : "wavedec3.html",
          "name" : "wavedec3" },
        
        { "url" : "waverec3.html",
          "name" : "waverec3" } ] },
    { "href" : "ref\/ihaart.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ihaart",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse 1-D Haar wavelet transform",
      "introduced" : "R2016b",
      "description" : "This MATLAB function returns the inverse 1-D Haar transform, xrec, for the approximation coefficients, a, and the wavelet coefficients, d.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = ihaart(a,d)",
            "xrec = ihaart(a,d,level)",
            "xrec = ihaart(___,integerflag)" ] } ],
      "inputs" : 
      [ 
        { "name" : "a",
          "purpose" : "Approximation coefficients",
          "htmlid" : "bveev6q-1-a",
          "value" : 
          [ "scalar",
            "vector",
            "matrix" ] },
        
        { "name" : "d",
          "purpose" : "Detail coefficients",
          "htmlid" : "bveev6q-1-d",
          "value" : 
          [ "scalar",
            "vector",
            "matrix",
            "cell array" ] },
        
        { "name" : "level",
          "purpose" : "Maximum level",
          "htmlid" : "bveev6q-1-level",
          "value" : 
          [ "0",
            "nonnegative integer" ],
          "defaultvalue" : "0" },
        
        { "name" : "integerflag",
          "purpose" : "Integer-valued data handling",
          "htmlid" : "bveev6q-1-integerflag",
          "value" : 
          [ "'noninteger'",
            "'integer'" ],
          "defaultvalue" : "'noninteger'" } ],
      "outputs" : 
      [ 
        { "name" : "xrec",
          "purpose" : "Inverse 1-D Haar wavelet transform",
          "htmlid" : "bveev6q-1-xrec",
          "value" : 
          [ "vector",
            "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "ihaart.html#bveev6r-7",
          "open_command" : "openExample('wavelet\/InverseHaarTransformOfNoisyDataExample')",
          "title" : "Inverse Haar Transform of Noisy Data" },
        
        { "url" : "ihaart.html#bvfutsb-1",
          "open_command" : "openExample('wavelet\/InverseHaarTransformOfECGDataExample')",
          "title" : "Inverse Haar Transform of ECG Data" },
        
        { "url" : "ihaart.html#bvfutsd-1",
          "open_command" : "openExample('wavelet\/InverseHaarTransformOfIntegerDataExample')",
          "title" : "Inverse Haar Transform of Integer Data" } ],
      "seealso" : 
      [ 
        { "url" : "haart.html",
          "name" : "haart" },
        
        { "url" : "ihaart2.html",
          "name" : "ihaart2" },
        
        { "url" : "haart2.html",
          "name" : "haart2" } ] },
    { "href" : "ref\/ihaart2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ihaart2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse 2-D Haar wavelet transform",
      "introduced" : "R2016b",
      "description" : "This MATLAB function returns the inverse 2-D Haar transform, xrec, for the approximation coefficients, a, and the horizontal, vertical, and diagonal detail coefficients, h, v, and d.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = ihaart2(a,h,v,d)",
            "xrec = ihaart2(a,h,v,d,level)",
            "xrec = ihaart2(___,integerflag)" ] } ],
      "inputs" : 
      [ 
        { "name" : "a",
          "purpose" : "Approximation coefficients",
          "htmlid" : "bveev3u-1-a",
          "value" : 
          [ "scalar",
            "matrix" ] },
        
        { "name" : "h",
          "purpose" : "Horizontal detail coefficients",
          "htmlid" : "bveev3u-1-h",
          "value" : 
          [ "matrix",
            "cell array" ] },
        
        { "name" : "v",
          "purpose" : "Vertical detail coefficients",
          "htmlid" : "bveev3u-1-v",
          "value" : 
          [ "matrix or",
            "cell array" ] },
        
        { "name" : "d",
          "purpose" : "Diagonal detail coefficients",
          "htmlid" : "bveev3u-1-d",
          "value" : 
          [ "matrix or",
            "cell array" ] },
        
        { "name" : "level",
          "purpose" : "Maximum level",
          "htmlid" : "bveev3u-1-level",
          "value" : 
          [ "0",
            "nonnegative integer" ],
          "defaultvalue" : "0" },
        
        { "name" : "integerflag",
          "purpose" : "Integer-valued data handling",
          "htmlid" : "bveev3u-1-integerflag",
          "value" : 
          [ "'noninteger'",
            "'integer'" ],
          "defaultvalue" : "'noninteger'" } ],
      "outputs" : 
      [ 
        { "name" : "xrec",
          "purpose" : "Inverse 2-D Haar wavelet transform",
          "htmlid" : "bveev3u-1-xrec",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "ihaart2.html#bveev3u-7",
          "open_command" : "openExample('wavelet\/Inverse2DHaarTransformOfAnImageExample')",
          "title" : "Inverse 2-D Haar Transform of an Image" },
        
        { "url" : "ihaart2.html#bvfusks-1",
          "open_command" : "openExample('wavelet\/TwoDInverseHaarOfmageLimitedToLevelExample')",
          "title" : "Inverse 2-D Haar Transform of Image Limited to Specified Level" },
        
        { "url" : "ihaart2.html#bvfus05-1",
          "open_command" : "openExample('wavelet\/Inverse2DHaarTransformIntegerDataExample')",
          "title" : "Inverse 2-D Haar Transform of Image Limited to Integer Data" } ],
      "seealso" : 
      [ 
        { "url" : "haart.html",
          "name" : "haart" },
        
        { "url" : "ihaart.html",
          "name" : "ihaart" },
        
        { "url" : "haart2.html",
          "name" : "haart2" } ] },
    { "href" : "ref\/ilwt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ilwt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse 1-D lifting wavelet transform",
      "introduced" : "R2021a",
      "description" : "This MATLAB function returns the 1-D inverse wavelet transform based on the approximation coefficients, ca, and cell array of detail coefficients, cd.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xr = ilwt(ca,cd)",
            "xr = ilwt(ca,cd,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "ca",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_c7576437-9308-4c73-8dbd-85df5108b835",
          "value" : 
          [ "scalar",
            "vector",
            "matrix" ] },
        
        { "name" : "cd",
          "purpose" : "Detail coefficients",
          "htmlid" : "mw_b4754ddf-fe1b-417a-8dd4-a12be8a155d0",
          "value" : 
          [ "cell array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Wavelet",
              "purpose" : "Wavelet",
              "htmlid" : "mw_e21e9c5c-369b-4171-8043-9143be292a9c",
              "value" : 
              [ "'db1'",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "'db1'" },
            
            { "name" : "LiftingScheme",
              "purpose" : "Lifting scheme",
              "htmlid" : "mw_92300f52-e98f-4a73-b409-5c5f60f5b437",
              "value" : 
              [ "liftingScheme object" ] },
            
            { "name" : "Level",
              "purpose" : "Reconstruction level",
              "htmlid" : "mw_1de07b25-8ee9-45af-a098-e4e1e2ea70bd",
              "value" : 
              [ "0",
                "positive integer" ],
              "defaultvalue" : "0" },
            
            { "name" : "Extension",
              "purpose" : "Extension mode",
              "htmlid" : "mw_683ac7d4-77b3-4ced-8ab1-f648e7f4066a",
              "value" : 
              [ "'periodic'",
                "'zeropad'",
                "'symmetric'" ],
              "defaultvalue" : "'periodic'" },
            
            { "name" : "Int2Int",
              "purpose" : "Integer-valued data handling",
              "htmlid" : "mw_dee7a016-4df0-4d52-b073-31ae2039d800",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" } ] } ],
      "outputs" : 
      [ 
        { "name" : "xr",
          "purpose" : "Inverse wavelet transform",
          "htmlid" : "mw_a322fd6d-e359-4da6-a08d-76c2c38bb876",
          "value" : 
          [ "vector",
            "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "ilwt.html#mw_1a5092cc-c4e5-4961-b387-558b074c29d5",
          "open_command" : "openExample('wavelet\/InverseLWTOfIntegerValuedSignalExample')",
          "title" : "Inverse LWT of Integer-Valued Signal" },
        
        { "url" : "ilwt.html#mw_78855531-1454-433a-bc25-fc714e68ca96",
          "open_command" : "openExample('wavelet\/InverseLWTOfMultisignalExample')",
          "title" : "Inverse LWT of Multichannel Signal" } ],
      "seealso" : 
      [ 
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" },
        
        { "url" : "haart.html",
          "name" : "haart" },
        
        { "url" : "lwt.html",
          "name" : "lwt" },
        
        { "url" : "ihaart.html",
          "name" : "ihaart" },
        
        { "url" : "lwtcoef.html",
          "name" : "lwtcoef" } ] },
    { "href" : "ref\/ilwt2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ilwt2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse 2-D lifting wavelet transform",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the 2-D inverse wavelet transform based on the approximation coefficients, ll, and the horizontal (lh), vertical (hl), and diagonal (hh) wavelet coefficients.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xr = ilwt2(ll,lh,hl,hh)",
            "xr = ilwt2(ll,lh,hl,hh,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "ll",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_513ba75d-04a7-4bd4-8cdf-bb982a96e826",
          "value" : 
          [ "scalar",
            "vector",
            "matrix" ] },
        
        { "name" : "lh",
          "purpose" : "Horizontal detail coefficients",
          "htmlid" : "mw_777cb8e7-9577-4b16-820c-50ec567709b5",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "hl",
          "purpose" : "Vertical detail coefficients",
          "htmlid" : "mw_208489be-043c-4b5f-8d47-dfb2350d5560",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "hh",
          "purpose" : "Diagonal detail coefficients",
          "htmlid" : "mw_d7100df5-d6dd-4739-b89b-248467d0812f",
          "value" : 
          [ "cell array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Wavelet",
              "purpose" : "Wavelet",
              "htmlid" : "mw_8e41d105-0f84-4eec-a70c-81b325aa7bff",
              "value" : 
              [ "\"db1\"",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "\"db1\"" },
            
            { "name" : "LiftingScheme",
              "purpose" : "Lifting scheme",
              "htmlid" : "mw_127fc5d1-4b53-4970-86fd-02c3003465cb",
              "value" : 
              [ "liftingScheme object" ] },
            
            { "name" : "Level",
              "purpose" : "Reconstruction level",
              "htmlid" : "mw_d416aabf-f708-44ee-80f0-bb1a1c06e687",
              "value" : 
              [ "0",
                "positive integer" ],
              "defaultvalue" : "0" },
            
            { "name" : "Extension",
              "purpose" : "Extension mode",
              "htmlid" : "mw_6d6c4ae2-5326-4b5b-a33b-4fc8734873dc",
              "value" : 
              [ "\"periodic\"",
                "\"zeropad\"",
                "\"symmetric\"" ],
              "defaultvalue" : "\"periodic\"" },
            
            { "name" : "Int2Int",
              "purpose" : "Handling integer-valued data",
              "htmlid" : "mw_db5caf43-7fde-4599-b820-e2311fc7c4fa",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" } ] } ],
      "outputs" : 
      [ 
        { "name" : "xr",
          "purpose" : "Inverse wavelet transform",
          "htmlid" : "mw_396c26f0-4217-4458-af1d-459ee19c2e64",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "ilwt2.html#mw_86e59d27-1e2b-43cf-981f-809965bdac1c",
          "open_command" : "openExample('wavelet\/Inverse2DLiftingWaveletTransformExample')",
          "title" : "Inverse 2-D Lifting Wavelet Transform" },
        
        { "url" : "ilwt2.html#mw_0a408b4c-1437-444e-b03d-6a4e6ae9b61a",
          "open_command" : "openExample('wavelet\/InverseLWTOf2DMultisignalToSpecifiedLevelExample')",
          "title" : "Inverse LWT of 2-D Multisignal to Specified Level" } ],
      "seealso" : 
      [ 
        { "url" : "lwt2.html",
          "name" : "lwt2" },
        
        { "url" : "lwtcoef2.html",
          "name" : "lwtcoef2" },
        
        { "url" : "haart2.html",
          "name" : "haart2" },
        
        { "url" : "ihaart2.html",
          "name" : "ihaart2" },
        
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" } ] },
    { "href" : "ref\/imlpt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "imlpt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse multiscale local 1-D polynomial transform",
      "introduced" : "R2017a",
      "description" : "This MATLAB function returns the inverse multiscale local polynomial 1-D transform (MLPT) of coefs.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "y = imlpt(coefs,T,coefsPerLevel,scalingMoments)",
            "y = imlpt(___,DualMoments=dm)" ] } ],
      "inputs" : 
      [ 
        { "name" : "coefs",
          "purpose" : "MLPT coefficients",
          "htmlid" : "bvkoedw-1-coefs",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "T",
          "purpose" : "Sampling instants corresponding to output",
          "htmlid" : "bvkoedw-1-T",
          "value" : 
          [ "vector",
            "duration array" ] },
        
        { "name" : "coefsPerLevel",
          "purpose" : "Coefficients per resolution level",
          "htmlid" : "bvkoedw-1-coefsPerLevel",
          "value" : 
          [ "vector" ] },
        
        { "name" : "scalingMoments",
          "purpose" : "Scaling function moments",
          "htmlid" : "bvkoedw-1-scalingMoments",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "dm",
          "purpose" : "Dual vanishing moments",
          "htmlid" : "mw_b78d3087-c95d-4eae-96de-72b12a313b99",
          "value" : 
          [ "2",
            "3",
            "4" ],
          "defaultvalue" : "2" } ],
      "outputs" : 
      [ 
        { "name" : "y",
          "purpose" : "Reconstructed signal",
          "htmlid" : "bvkoedw-1-y",
          "value" : 
          [ "vector",
            "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "imlpt.html#bvkoedz-7",
          "open_command" : "openExample('wavelet\/PerformMLPTAnalysisExample')",
          "title" : "Multiscale Local 1-D Polynomial Transform and Inverse Transform" },
        
        { "url" : "imlpt.html#bvk_yb9",
          "open_command" : "openExample('wavelet\/SpecifyNondefaultDualMomentsForTransformExample')",
          "title" : "Specify Nondefault Dual Moments" } ],
      "seealso" : 
      [ 
        { "url" : "mlpt.html",
          "name" : "mlpt" },
        
        { "url" : "mlptdenoise.html",
          "name" : "mlptdenoise" },
        
        { "url" : "mlptrecon.html",
          "name" : "mlptrecon" } ] },
    { "href" : "ref\/imodwpt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "imodwpt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse maximal overlap discrete wavelet packet transform",
      "introduced" : "R2016a",
      "description" : "This MATLAB function returns the inverse maximal overlap discrete wavelet packet transform (inverse MODWPT), in xrec.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = imodwpt(coefs)",
            "xrec = imodwpt(coefs,wname)",
            "xrec = imodwpt(coefs,lo,hi)" ] } ],
      "inputs" : 
      [ 
        { "name" : "coefs",
          "purpose" : "Terminal node coefficients",
          "htmlid" : "bu36k2v-1-coefs",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "wname",
          "purpose" : "Synthesizing wavelet",
          "htmlid" : "bu36k2v-1-wname",
          "value" : 
          [ "\"fk18\"",
            "character vector",
            "string scalar" ],
          "defaultvalue" : "\"fk18\"" },
        
        { "name" : "lo,hi",
          "purpose" : "Filters",
          "htmlid" : "mw_54b29980-067b-4f39-bd35-5dbda79edc03",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "outputs" : 
      [ 
        { "name" : "xrec",
          "purpose" : "Inverse maximal overlap discrete wavelet packet transform",
          "htmlid" : "bu36k2v-1-xrec",
          "value" : 
          [ "row vector" ] } ],
      "examples" : 
      [ 
        { "url" : "imodwpt.html#bu36k2v-6",
          "open_command" : "openExample('wavelet\/PerfectReconstructionWithTheInverseMODWPTExample')",
          "title" : "Perfect Reconstruction with the Inverse MODWPT" },
        
        { "url" : "imodwpt.html#bu36k2v-7",
          "open_command" : "openExample('wavelet\/InverseMODWPTUsingDaubechiesExtremalPhaseWaveletExample')",
          "title" : "Inverse MODWPT Using Daubechies Extremal Phase Wavelet" },
        
        { "url" : "imodwpt.html#bu36k2v-8",
          "open_command" : "openExample('wavelet\/InverseMODWPTUsingScalingAndWaveletFIltersExample')",
          "title" : "Inverse MODWPT Using Scaling and Wavelet Filters" } ],
      "seealso" : 
      [ 
        { "url" : "modwpt.html",
          "name" : "modwpt" },
        
        { "url" : "modwptdetails.html",
          "name" : "modwptdetails" },
        
        { "url" : "dwpt.html",
          "name" : "dwpt" } ] },
    { "href" : "ref\/imodwt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "imodwt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse maximal overlap discrete wavelet transform",
      "introduced" : "R2015b",
      "description" : "This MATLAB function reconstructs the signal based on the maximal overlap discrete wavelet transform (MODWT) coefficients in w.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = imodwt(w)",
            "xrec = imodwt(w,wname)",
            "xrec = imodwt(w,Lo,Hi)",
            "xrec = imodwt(___,lev)",
            "xrec = imodwt(___,'reflection')" ] } ],
      "inputs" : 
      [ 
        { "name" : "w",
          "purpose" : "MODWT transform",
          "htmlid" : "buuzngr-w",
          "value" : 
          [ "matrix",
            "3-D array" ] },
        
        { "name" : "wname",
          "purpose" : "Synthesis wavelet",
          "htmlid" : "buuzngr-wname",
          "value" : 
          [ "\"sym4\"",
            "character vector",
            "string scalar" ],
          "defaultvalue" : "\"sym4\"" },
        
        { "name" : "Lo,Hi",
          "purpose" : "Filters",
          "htmlid" : "buuzngr-Lo",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "lev",
          "purpose" : "Reconstruction level",
          "htmlid" : "buuzngr-lev",
          "value" : 
          [ "0",
            "nonnegative integer" ],
          "defaultvalue" : "0" } ],
      "outputs" : 
      [ 
        { "name" : "xrec",
          "purpose" : "Reconstructed signal",
          "htmlid" : "buuzngr-xrec",
          "value" : 
          [ "vector",
            "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "imodwt.html#buuzrn4",
          "open_command" : "openExample('wavelet\/PerfectReconstructionWithMODWTExample')",
          "title" : "Perfect Reconstruction with the Inverse MODWT" },
        
        { "url" : "imodwt.html#buuzrwr",
          "open_command" : "openExample('wavelet\/InverseMODWTWithSpecifiedWaveletExample')",
          "title" : "Inverse MODWT with Specified Wavelet" },
        
        { "url" : "imodwt.html#buuzr3d",
          "open_command" : "openExample('wavelet\/InverseMODWTWithSpecifiedFiltersExample')",
          "title" : "Inverse MODWT with Specified Filters" },
        
        { "url" : "imodwt.html#buuzwfx",
          "open_command" : "openExample('wavelet\/ObtainProjectionOntoScalingSpaceExample')",
          "title" : "Obtain Projection onto Scaling Space" },
        
        { "url" : "imodwt.html#bu0b0d_",
          "open_command" : "openExample('wavelet\/InverseMODWTWithReflectionBoundaryExample')",
          "title" : "Inverse MODWT with Reflection Boundary" },
        
        { "url" : "imodwt.html#mw_be113e38-4891-47cc-aaac-1e73b92b7f08",
          "open_command" : "openExample('wavelet\/InverseMODWTOfMultisignalExample')",
          "title" : "Inverse MODWT of Multisignal" } ],
      "seealso" : 
      [ 
        { "url" : "waveletsignalanalyzer-app.html",
          "name" : "Wavelet Signal Analyzer" },
        
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "modwtmra.html",
          "name" : "modwtmra" } ] },
    { "href" : "ref\/ind2depo.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ind2depo",
          "fcntype" : "simple" } ],
      "refpurpose" : "Node index to node depth-position",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[D,P] = ind2depo(ORD,[D P])" ] } ],
      "examples" : 
      [ 
        { "url" : "ind2depo.html#bu_byyy",
          "open_command" : "openExample('wavelet\/DepthAndPositionInWaveletPacketTreeExample')",
          "title" : "Depth and Position in Wavelet Packet Tree" } ],
      "seealso" : 
      [ 
        { "url" : "depo2ind.html",
          "name" : "depo2ind" } ] },
    { "href" : "ref\/intwave.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "intwave",
          "fcntype" : "simple" } ],
      "refpurpose" : "Integrate wavelet function psi (ψ)",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function computes the integral, INTEG, of the wavelet function ψ (from −∞ to XVAL values): for x in XVAL.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[INTEG,XVAL] = intwave('wname',PREC)",
            "[INTDEC,XVAL,INTREC] = intwave('wname',PREC)",
            "[INTEG,XVAL] = intwave('wname',PREC)",
            "[INTEG,XVAL] = intwave('wname',PREC,0)",
            "[INTEG,XVAL] = intwave('wname')",
            "[INTEG,XVAL] = intwave('wname',8)",
            "intwave('wname',0)",
            "intwave('wname',8,IN3)",
            "intwave('wname')",
            "intwave('wname',8)" ] } ],
      "seealso" : 
      [ 
        { "url" : "wavefun.html",
          "name" : "wavefun" } ] },
    { "href" : "ref\/isbiorthwfb.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "isbiorthwfb",
          "fcntype" : "simple" } ],
      "refpurpose" : "Determine if filter bank is biorthogonal wavelet filter bank",
      "introduced" : "R2022b",
      "description" : "This MATLAB function returns true if the two-channel filter bank formed from the lowpass filters LoR and LoD satisfy the necessary and sufficient conditions to be a two-channel biorthogonal perfect reconstruction (PR) wavelet filter bank.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "tf = isbiorthwfb(LoR,LoD)",
            "tf = isbiorthwfb(LoR,LoD,HiR,HiD)",
            "tf = isbiorthwfb(___,Tolerance=tol)",
            "[tf,checks] = isbiorthwfb(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "LoR,LoD",
          "purpose" : "Lowpass filters",
          "htmlid" : "mw_ee62fb4b-1134-4210-9b69-8b319b930800",
          "value" : 
          [ "vectors" ] },
        
        { "name" : "HiR,HiD",
          "purpose" : "Highpass filters",
          "htmlid" : "mw_cc9615b7-7922-4811-883e-f1ee48cbeb15",
          "value" : 
          [ "vectors" ] },
        
        { "name" : "tol",
          "purpose" : "Tolerance",
          "htmlid" : "mw_0c3b56d1-40a2-4339-ab83-e6679631fed5",
          "value" : 
          [ "sqrt(eps(underlyingType(LoR)))",
            "scalar" ],
          "defaultvalue" : "sqrt(eps(underlyingType(LoR)))" } ],
      "outputs" : 
      [ 
        { "name" : "tf",
          "purpose" : "True or false result",
          "htmlid" : "mw_d544a78f-9db9-490a-9eb6-21b053310260",
          "value" : 
          [ "1",
            "0",
            "logical array" ] },
        
        { "name" : "checks",
          "purpose" : "Biorthogonality checks",
          "htmlid" : "mw_05b2c018-60c4-4509-b17f-228c342cbaed",
          "value" : 
          [ "table" ] } ],
      "examples" : 
      [ 
        { "url" : "isbiorthwfb.html#mw_ffb3efd5-3c9a-4799-a086-a50822ef0059",
          "open_command" : "openExample('wavelet\/PerformBiorthogonalityChecksOnFilterBankExample')",
          "title" : "Perform Biorthogonality Checks on Filter Bank" } ],
      "seealso" : 
      [ 
        { "url" : "isorthwfb.html",
          "name" : "isorthwfb" },
        
        { "url" : "wavemngr.html",
          "name" : "wavemngr" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" } ] },
    { "href" : "ref\/isnode.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "isnode",
          "fcntype" : "simple" } ],
      "refpurpose" : "Existing node test",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns 1's for nodes N, which exist in the tree T, and 0's for others.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "R = isnode(T,N)" ] } ],
      "seealso" : 
      [ 
        { "url" : "istnode.html",
          "name" : "istnode" },
        
        { "url" : "ntree.wtreemgr.html",
          "name" : "wtreemgr" } ] },
    { "href" : "ref\/isorthwfb.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "isorthwfb",
          "fcntype" : "simple" } ],
      "refpurpose" : "Determine if filter bank is orthogonal wavelet filter bank",
      "introduced" : "R2022b",
      "description" : "This MATLAB function returns true if the two-channel filter bank formed from the lowpass (scaling) filter Lo satisfies the necessary and sufficient conditions to be a two-channel orthonormal perfect reconstruction (PR) wavelet filter bank.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "tf = isorthwfb(Lo)",
            "tf = isorthwfb(Lo,Hi)",
            "tf = isorthwfb(___,Tolerance=tol)",
            "[tf,checks] = isorthwfb(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "Lo",
          "purpose" : "Lowpass filter",
          "htmlid" : "mw_e835afc8-4f05-4b27-adb7-f3767c64b761",
          "value" : 
          [ "vector" ] },
        
        { "name" : "Hi",
          "purpose" : "Highpass filter",
          "htmlid" : "mw_56d47daf-5222-4dc0-8344-ad64249cb468",
          "value" : 
          [ "vector" ] },
        
        { "name" : "tol",
          "purpose" : "Tolerance",
          "htmlid" : "mw_bbfa0c0e-a664-4da9-b577-1e49e55fd701",
          "value" : 
          [ "sqrt(eps(underlyingType(Lo)))",
            "scalar" ],
          "defaultvalue" : "sqrt(eps(underlyingType(Lo)))" } ],
      "outputs" : 
      [ 
        { "name" : "tf",
          "purpose" : "True or false result",
          "htmlid" : "mw_7dc94789-7365-4bb9-9893-1a39989e3feb",
          "value" : 
          [ "1",
            "0",
            "logical array" ] },
        
        { "name" : "checks",
          "purpose" : "Orthogonality checks",
          "htmlid" : "mw_956d4968-e063-4513-9c0e-467d290a6b26",
          "value" : 
          [ "table" ] } ],
      "examples" : 
      [ 
        { "url" : "isorthwfb.html#mw_e39bb836-a9bf-43ac-9d93-b9008b13e04c",
          "open_command" : "openExample('wavelet\/PerformOrthogonalityChecksOnFilterBankExample')",
          "title" : "Perform Orthogonality Checks on Filter Bank" } ],
      "seealso" : 
      [ 
        { "url" : "isbiorthwfb.html",
          "name" : "isbiorthwfb" },
        
        { "url" : "wavemngr.html",
          "name" : "wavemngr" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" } ] },
    { "href" : "ref\/istnode.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "istnode",
          "fcntype" : "simple" } ],
      "refpurpose" : "Terminal nodes indices test",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns ranks (in left to right terminal nodes ordering) for terminal nodes N belonging to the tree T, and 0's for others.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "R = istnode(T,N)" ] } ],
      "seealso" : 
      [ 
        { "url" : "isnode.html",
          "name" : "isnode" },
        
        { "url" : "ntree.wtreemgr.html",
          "name" : "wtreemgr" } ] },
    { "href" : "ref\/iswt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "iswt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse discrete stationary wavelet transform 1-D",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function reconstructs the 1-D signal x based on the multilevel stationary wavelet decomposition swc using the wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "x = iswt(swc,wname)",
            "x = iswt(swa,swd,wname)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "x = iswt(swc,LoR,HiR)",
            "x = iswt(swa,swd,LoR,HiR)" ] } ],
      "inputs" : 
      [ 
        { "name" : "swc",
          "purpose" : "Multilevel stationary wavelet decomposition",
          "htmlid" : "mw_01558aaf-8e78-45f6-bdd2-bd8fc291a62e",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_6bebe71f-a564-4897-9d95-4f4ec0c97b5c",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "swa",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_4ac6a259-08f0-4c0a-9420-5c82186f924e",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "swd",
          "purpose" : "Detail coefficients",
          "htmlid" : "mw_e683217f-8baf-42c0-b77d-578d09dfd427",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_569b5c67-d148-4133-8950-4e4408babe65",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "examples" : 
      [ 
        { "url" : "iswt.html#mw_f7dc2cab-609c-4eef-95c0-5d6c265612aa",
          "open_command" : "openExample('wavelet\/MultilevelStationaryWaveletReconstructionExample')",
          "title" : "Multilevel Stationary Wavelet Reconstruction" } ],
      "seealso" : 
      [ 
        { "url" : "idwt.html",
          "name" : "idwt" },
        
        { "url" : "swt.html",
          "name" : "swt" },
        
        { "url" : "waverec.html",
          "name" : "waverec" } ] },
    { "href" : "ref\/iswt2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "iswt2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse discrete stationary 2-D wavelet transform",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the inverse discrete stationary 2-D wavelet transform of the wavelet decomposition swc using the wavelet wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "X = iswt2(swc,wname)",
            "X = iswt2(swc,LoR,HiR)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "X = iswt2(A,H,V,D,wname)",
            "X = iswt2(A,H,V,D,LoR,HiR)" ] } ],
      "inputs" : 
      [ 
        { "name" : "swc",
          "purpose" : "Stationary wavelet decomposition",
          "htmlid" : "mw_86d05a0c-b39f-47f9-8a75-6645c4e94593",
          "value" : 
          [ "3-D array",
            "4-D array" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_9601c7f6-f5e7-47c1-89a5-dbac0fbf01e8",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_42b28995-399d-451b-a0cf-8d39786d4848",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "A",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_1eb42c6a-4f8c-4a49-9dea-2c0d59a04740",
          "value" : 
          [ "2-D matrix",
            "3-D array",
            "4-D array" ] },
        
        { "name" : "H,V,D",
          "purpose" : "Detail coefficients",
          "htmlid" : "mw_2894eba7-0ab8-4e72-bd5e-4d315b9e7f66",
          "value" : 
          [ "2-D matrix",
            "3-D array",
            "4-D array" ] } ],
      "outputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Reconstruction",
          "htmlid" : "mw_49fd116e-f799-4b64-b661-802ef278cede",
          "value" : 
          [ "2-D matrix",
            "3-D array" ] } ],
      "examples" : 
      [ 
        { "url" : "iswt2.html#mw_07c6f847-575b-463b-a03f-305508836592",
          "open_command" : "openExample('wavelet\/MultilevelTwoDimensionalStationaryWaveletReconstructionExample')",
          "title" : "Multilevel 2-D Stationary Wavelet Reconstruction" },
        
        { "url" : "iswt2.html#mw_10449ee8-9e15-457d-a9c4-936e2b2d28b0",
          "open_command" : "openExample('wavelet\/InverseStationaryWaveletTransformExample')",
          "title" : "Inverse Stationary Wavelet Transform of RGB Image" } ],
      "seealso" : 
      [ 
        { "url" : "idwt2.html",
          "name" : "idwt2" },
        
        { "url" : "swt2.html",
          "name" : "swt2" },
        
        { "url" : "waverec2.html",
          "name" : "waverec2" } ] },
    { "href" : "ref\/itqwt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "itqwt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse tunable Q-factor wavelet transform",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the inverse tunable Q-factor transform (TQWT) of the analysis coefficients in wt.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = itqwt(wt,n)",
            "xrec = itqwt(wt,n,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wt",
          "purpose" : "Tunable Q-factor wavelet transform",
          "htmlid" : "mw_8759ecde-2182-4660-8016-4a89131e47c4",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "n",
          "purpose" : "Original signal length",
          "htmlid" : "mw_e5c8fd45-74b6-40f2-82ad-b5f287a6418a",
          "value" : 
          [ "positive integer" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Level",
              "purpose" : "Reconstruction level",
              "htmlid" : "mw_6ed4ea7e-4f54-4a8a-8f44-11d3c4a087d9",
              "value" : 
              [ "0",
                "nonnegative integer" ],
              "defaultvalue" : "0" },
            
            { "name" : "QualityFactor",
              "purpose" : "Quality factor",
              "htmlid" : "mw_c180a5bc-3e4c-4b74-968a-da90e2e51358",
              "value" : 
              [ "1",
                "positive scalar" ],
              "defaultvalue" : "1" } ] } ],
      "outputs" : 
      [ 
        { "name" : "xrec",
          "purpose" : "Inverse tunable-Q wavelet transform",
          "htmlid" : "mw_4c129f22-f749-48a0-98aa-c23f8aa62fbd",
          "value" : 
          [ "vector",
            "matrix",
            "3-D array" ] } ],
      "examples" : 
      [ 
        { "url" : "itqwt.html#mw_345d38ee-2d26-4249-8205-dba8b2c5df54",
          "open_command" : "openExample('wavelet\/InverseTunableQfactorWaveletTransformExample')",
          "title" : "Inverse Tunable Q-factor Wavelet Transform" } ],
      "seealso" : 
      [ 
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "tqwt.html",
          "name" : "tqwt" },
        
        { "url" : "tqwtmra.html",
          "name" : "tqwtmra" } ] },
    { "href" : "ref\/iwsst.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "iwsst",
          "fcntype" : "simple" } ],
      "refpurpose" : "Inverse wavelet synchrosqueezed transform",
      "introduced" : "R2016a",
      "description" : "This MATLAB function inverts the input synchrosqueezed transform, sst, and returns the inverse in vector xrec.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xrec = iwsst(sst)",
            "xrec = iwsst(sst,f,freqrange)",
            "xrec = iwsst(sst,iridge)",
            "xrec = iwsst(___,wav)",
            "xrec = iwsst(___,iridge,'NumFrequencyBins',numBins)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sst",
          "purpose" : "Synchrosqueezed transform",
          "htmlid" : "bu64ghk-1-sst",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "f",
          "purpose" : "Synchrosqueezed transform frequencies",
          "htmlid" : "bu64ghk-1-f",
          "value" : 
          [ "vector" ] },
        
        { "name" : "freqrange",
          "purpose" : "Frequency range",
          "htmlid" : "bu64ghk-1-freqrange",
          "value" : 
          [ "two-element vector" ] },
        
        { "name" : "iridge",
          "purpose" : "Time-frequency ridge row indices",
          "htmlid" : "bu64ghk-1-iridge",
          "value" : 
          [ "vector or matrix" ] },
        
        { "name" : "wav",
          "purpose" : "Analytic wavelet",
          "htmlid" : "bu64ghk-1-wav",
          "value" : 
          [ "'amor'",
            "'bump'" ],
          "defaultvalue" : "'amor'" },
        
        { "name" : "numBins",
          "purpose" : "Number of additional frequency bins",
          "htmlid" : "mw_eeb0cf41-f077-40fc-b05f-13121bfc5f7e",
          "value" : 
          [ "16",
            "positive integer" ],
          "defaultvalue" : "16" } ],
      "outputs" : 
      [ 
        { "name" : "xrec",
          "purpose" : "Inverse synchrosqueezed transform",
          "htmlid" : "bu64ghk-1-xrec",
          "value" : 
          [ "vector or matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "iwsst.html#bu7fbtq-2",
          "open_command" : "openExample('wavelet\/InverseSynchrosqueezedOfChirpExample')",
          "title" : "Inverse Synchrosqueezed Transform of Chirp" },
        
        { "url" : "iwsst.html#bu71in0-1",
          "open_command" : "openExample('wavelet\/WaveletSynchroAndInverseSynchroTransformOfChirpExample')",
          "title" : "Synchrosqueezed and Inverse Synchrosqueezed Transform of Chirp" },
        
        { "url" : "iwsst.html#bu7fbtq-3",
          "open_command" : "openExample('wavelet\/InvWaveletSynchrosqTransformRangeOfFreqsExample')",
          "title" : "Inverse Synchrosqueezed Transform of Range of Frequencies" },
        
        { "url" : "iwsst.html#bu7fbtq-5",
          "open_command" : "openExample('wavelet\/WaveletInvSynchroTransformOfSpeechSignalExample')",
          "title" : "Synchrosqueezed and Inverse Synchrosqueezed Transform of Speech Signal" },
        
        { "url" : "iwsst.html#bu7fbtq-6",
          "open_command" : "openExample('wavelet\/WaveletSynchrosqransformUsingNumBinsWExample')",
          "title" : "Synchrosqueezed Transform Using Specified Number of Bins for Chirp" } ],
      "seealso" : 
      [ 
        { "url" : "wsst.html",
          "name" : "wsst" },
        
        { "url" : "wsstridge.html",
          "name" : "wsstridge" } ] },
    { "href" : "ref\/labeledsignalset.addlabeldefinitions.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "addLabelDefinitions",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.addLabelDefinitions",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Add label definitions to labeled signal set",
      "introduced" : "R2018b",
      "description" : "This MATLAB function adds the labels defined in the vector of signal label definitions lbldefs to the labeled signal set lss.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "addLabelDefinitions(lss,lbldefs)",
            "addLabelDefinitions(lss,lbldefs,lblname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_fcde8c35-910e-4e6f-9ea2-b85e086eafb1_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "lbldefs",
          "purpose" : "Signal label definitions",
          "htmlid" : "mw_fcde8c35-910e-4e6f-9ea2-b85e086eafb1_sep_mw_f956ed14-de04-4d5e-b888-16e834683f0f",
          "value" : 
          [ "signalLabelDefinition object",
            "vector of signalLabelDefinition objects" ] },
        
        { "name" : "lblname",
          "purpose" : "Label name",
          "htmlid" : "mw_7896dfcd-222f-46fa-8bad-0d231355206f",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.addlabeldefinitions.html#mw_be6546c4-cbe0-4857-b3f6-426a9e00417c",
          "open_command" : "openExample('predmaint_shared\/AddLabelDefinitionExample')",
          "title" : "Add Label Definition" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.addmembers.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "addMembers",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.addMembers",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Add members to labeled signal set",
      "introduced" : "R2018b",
      "description" : "This MATLAB function adds members to the labeled signal set lss from the input data source src.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "addMembers(lss,src)",
            "addMembers(lss,src,tinfo)",
            "addMembers(lss,src,tinfo,mnames)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_215ee519-dc33-4291-9924-a4421460025f_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "src",
          "purpose" : "Input data source",
          "htmlid" : "mw_9e510d8e-92df-4906-9d3a-6a5726383a3c",
          "value" : 
          [ "matrix",
            "cell array",
            "timetable",
            "signalDatastore object",
            "audioDatastore object" ] },
        
        { "name" : "tinfo",
          "purpose" : "Time information for new members",
          "htmlid" : "mw_12a05c47-2cd3-4929-81c9-2afc2aa20bac",
          "value" : 
          [ "scalar",
            "vector",
            "matrix",
            "duration scalar",
            "duration vector" ] },
        
        { "name" : "mnames",
          "purpose" : "Member names",
          "htmlid" : "mw_215ee519-dc33-4291-9924-a4421460025f_sep_mw_a4148801-b468-484d-a2e4-fe9e7ebd0f23",
          "value" : 
          [ "character vector",
            "string scalar",
            "cell array of character vectors",
            "string array" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.addmembers.html#mw_16de1648-311c-4d99-86b6-b7b89ed37a14",
          "open_command" : "openExample('predmaint_shared\/AddMemberExample')",
          "title" : "Add Member to Labeled Signal Set" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.concatenate.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "concatenate",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.concatenate",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Concatenate two or more labeled signal sets",
      "introduced" : "R2018b",
      "description" : "This MATLAB function concatenates N labeled signal set objects, lss1,...,lssN, and returns a labeled signal set lssnew containing all the members and label values of the input sets.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lssnew = concatenate(lss1,...,lssN)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss1,...,lssN",
          "purpose" : "Input labeled signal sets",
          "htmlid" : "mw_b00fa54d-f6aa-4052-b24b-5eb5b4e760b4",
          "value" : 
          [ "labeledSignalSet objects" ] } ],
      "outputs" : 
      [ 
        { "name" : "lssnew",
          "purpose" : "Concatenated labeled signal set",
          "htmlid" : "mw_1bda9017-b5c2-4f42-abab-ea061e33c55e",
          "value" : 
          [ "labeledSignalSet object" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.concatenate.html#mw_f3aedc25-b77d-4342-be9e-6df82bdcd6c2",
          "open_command" : "openExample('predmaint_shared\/MergeLabeledSignalSetsExample')",
          "title" : "Concatenate Labeled Signal Sets" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.countlabelvalues.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "countLabelValues",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.countLabelValues",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Count label values",
      "introduced" : "R2021a",
      "description" : "This MATLAB function counts the values of the label named lblname and returns results in table cnt.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "cnt = countLabelValues(lss,lblname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_4ce15265-86b9-43f2-a79c-11a5f7ca05c9_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "lblname",
          "purpose" : "Label name",
          "htmlid" : "mw_314a3ef8-6ffa-4b04-b169-f0d1f7e227ee",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "cnt",
          "purpose" : "Results table",
          "htmlid" : "mw_135bd8a7-4572-4836-ac1b-a0673bda8102",
          "value" : 
          [ "table" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.countlabelvalues.html#mw_993b6c48-1f3c-4a0c-86f4-2e76a34a99ed",
          "open_command" : "openExample('predmaint_shared\/CountWhaleLabelValuesExample')",
          "title" : "Count Label Values" },
        
        { "url" : "labeledsignalset.countlabelvalues.html#mw_ab7adb57-3d18-4db8-92e4-c78ba21447b9",
          "open_command" : "openExample('predmaint_shared\/CountLabelValuesExample')",
          "title" : "Count Label Values and Create Datastores" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.createdatastores.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "createDatastores",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.createDatastores",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Create datastores pointing to signal and label data",
      "introduced" : "R2021a",
      "description" : "This MATLAB function creates a datastore, sigdata, containing signal member data, and a datastore, lbldata, containing label data from labels specified in the string array lblnames.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[sigdata,lbldata] = createDatastores(lss,lblnames)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_f3d0e6f3-3d56-4e54-bb9e-dc32fe7bfd1c_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "lblnames",
          "purpose" : "Label names",
          "htmlid" : "mw_1b05ef89-47e3-48e7-8a42-d333746f98d1",
          "value" : 
          [ "character vector",
            "string scalar",
            "cell array of character vectors",
            "string array" ] } ],
      "outputs" : 
      [ 
        { "name" : "sigdata",
          "purpose" : "Signal data",
          "htmlid" : "mw_ab18809c-7cc5-4d1e-90b9-a9877a044ec2",
          "value" : 
          [ "signalDatastore object",
            "audioDatastore object" ] },
        
        { "name" : "lbldata",
          "purpose" : "Label data",
          "htmlid" : "mw_8e7ed11a-be30-4824-b4a8-71ab5b60353e",
          "value" : 
          [ "arrayDatastore object" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.createdatastores.html#mw_ad821a3e-bac4-4850-94da-9bd7eb10e9d5",
          "open_command" : "openExample('predmaint_shared\/CreateDatastoresExample')",
          "title" : "Create Datastores" },
        
        { "url" : "labeledsignalset.createdatastores.html#mw_9237a57d-d950-476f-8d01-135b7b905f87",
          "open_command" : "openExample('predmaint_shared\/CountLabelValuesExample')",
          "title" : "Count Label Values and Create Datastores" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.editlabeldefinition.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "editLabelDefinition",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.editLabelDefinition",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Edit label definition properties",
      "introduced" : "R2018b",
      "description" : "This MATLAB function changes the propname property of the label or sublabel definition lblname to val.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "editLabelDefinition(lss,lblname,propname,val)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_41a98934-f616-4e80-850d-7ab3c5a14d2b_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "lblname",
          "purpose" : "Label or sublabel name",
          "htmlid" : "mw_41a98934-f616-4e80-850d-7ab3c5a14d2b_sep_mw_f5a84ef3-7074-411e-9b04-f926d42f0bef",
          "value" : 
          [ "character vector",
            "string scalar",
            "cell array of character vectors",
            "string array" ] },
        
        { "name" : "propname",
          "purpose" : "Property name",
          "htmlid" : "mw_2e0ed1c9-898d-410b-ae31-6c96bbdf9755",
          "value" : 
          [ "'Name'",
            "'DefaultValue'",
            "'Tag'",
            "'Description'",
            "'Categories'" ] },
        
        { "name" : "val",
          "purpose" : "Property value",
          "htmlid" : "mw_a05daf8a-6bc5-4330-afa9-a20a01817434",
          "value" : 
          [ "numeric value",
            "logical value",
            "character vector",
            "string",
            "vector of strings",
            "cell array of character vectors" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.editlabeldefinition.html#mw_473f522e-64fe-41aa-94ac-008d9d366e92",
          "open_command" : "openExample('predmaint_shared\/EditLabelDefinitionExample')",
          "title" : "Edit Label Definition" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.getlabeldefinitions.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "getLabelDefinitions",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.getLabelDefinitions",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Get label definitions in labeled signal set",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns a vector of signalLabelDefinition objects with the labels of the labeled signal set lss.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lbldefs = getLabelDefinitions(lss)",
            "getLabelDefinitions(lss,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_58b96c53-85d4-48c8-ace7-d0155e76b677_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "LabelType",
              "purpose" : "Label type",
              "htmlid" : "mw_16da4c71-d01a-4b19-8540-e1c3806e42d8",
              "value" : 
              [ "\"attribute\"",
                "\"roi\"",
                "\"point\"",
                "\"attributeFeature\"",
                "\"roiFeature\"" ] },
            
            { "name" : "FrameSize",
              "purpose" : "Frame size",
              "htmlid" : "mw_608d4b40-e7ad-4600-920d-fe124cacdd89",
              "value" : 
              [ "numeric scalar" ] },
            
            { "name" : "FrameOverlapLength",
              "purpose" : "Frame overlap length",
              "htmlid" : "mw_c4fabd1b-5c7d-49b8-9e2e-7423da0fadf7",
              "value" : 
              [ "numeric scalar" ] },
            
            { "name" : "FrameRate",
              "purpose" : "Frame rate",
              "htmlid" : "mw_b77d0777-8b2e-4654-998d-a45aaa015eeb",
              "value" : 
              [ "numeric scalar" ] } ] } ],
      "outputs" : 
      [ 
        { "name" : "lbldefs",
          "purpose" : "Signal label definitions",
          "htmlid" : "mw_0ae5df48-ff49-4b00-9f69-5799ca05e0d6",
          "value" : 
          [ "signalLabelDefinition object" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.getlabeldefinitions.html#mw_16600848-fd7d-4175-9b60-b4f96f90d067",
          "open_command" : "openExample('predmaint_shared\/GetLabelDefinitionsExample')",
          "title" : "Get Label Definitions" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.getlabeledsignal.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "getLabeledSignal",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.getLabeledSignal",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Get labeled signals from labeled signal set",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns a table with all the signals and labeled data in the labeled signal set lss.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[t,info] = getLabeledSignal(lss)",
            "[t,info] = getLabeledSignal(lss,midx)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_3df6ac59-f4a2-400c-a481-00abb2c99829_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "midx",
          "purpose" : "Member row number",
          "htmlid" : "mw_3df6ac59-f4a2-400c-a481-00abb2c99829_sep_mw_1f11fe8e-6a62-486d-9023-4b04d75b1f93",
          "value" : 
          [ "positive integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "t",
          "purpose" : "Labeled signal",
          "htmlid" : "mw_e1e6ae0b-a9a3-4f46-aca8-32a152056b38",
          "value" : 
          [ "table" ] },
        
        { "name" : "info",
          "purpose" : "Time information",
          "htmlid" : "mw_3df6ac59-f4a2-400c-a481-00abb2c99829_sep_mw_272c32ea-c6bd-43c0-ba68-dc8de0aec160",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.getlabeledsignal.html#mw_da4cd4cc-8b1f-4add-9969-bb035ab3c74a",
          "open_command" : "openExample('predmaint_shared\/GetLabeledSignalExample')",
          "title" : "Get Labeled Signal" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.getlabelnames.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "getLabelNames",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.getLabelNames",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Get label names in labeled signal set",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns a string array containing the label names in the labeled signal set lss.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lblnames = getLabelNames(lss)",
            "sublblnames = getLabelNames(lss,lblname)",
            "getLabelNames(lss,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_19bc88c5-187b-4152-a05a-f78bb4805aaa_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "lblname",
          "purpose" : "Label name",
          "htmlid" : "mw_dd103a8f-5698-4768-b308-50a9f9e978cd",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "LabelType",
              "purpose" : "Label type",
              "htmlid" : "mw_0fb8962a-60a3-4009-b2d0-c55b6b6d8a40",
              "value" : 
              [ "\"attribute\"",
                "\"roi\"",
                "\"point\"",
                "\"attributeFeature\"",
                "\"roiFeature\"" ] },
            
            { "name" : "FrameSize",
              "purpose" : "Frame size",
              "htmlid" : "mw_1f793122-4cf8-4394-8d42-d980b3b0ce60",
              "value" : 
              [ "numeric scalar" ] },
            
            { "name" : "FrameOverlapLength",
              "purpose" : "Frame overlap length",
              "htmlid" : "mw_a589346d-df1a-468e-8977-f6420386d904",
              "value" : 
              [ "numeric scalar" ] },
            
            { "name" : "FrameRate",
              "purpose" : "Frame rate",
              "htmlid" : "mw_b4883b11-c092-4e0b-a958-f65687ccd102",
              "value" : 
              [ "numeric scalar" ] } ] } ],
      "outputs" : 
      [ 
        { "name" : "lblnames",
          "purpose" : "Label names",
          "htmlid" : "mw_86533c89-d194-4c58-b950-8976d53221d3",
          "value" : 
          [ "string array" ] },
        
        { "name" : "sublblnames",
          "purpose" : "Sublabel names",
          "htmlid" : "mw_6269b4ad-5155-4769-870c-daf742a9e53b",
          "value" : 
          [ "string array" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.getlabelnames.html#mw_2b52f625-3e6c-4fda-b49f-815c6267d91d",
          "open_command" : "openExample('predmaint_shared\/GetLabelNamesExample')",
          "title" : "Get Label Names" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.getlabelvalues.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "getLabelValues",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.getLabelValues",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Get label values from labeled signal set",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns a table containing the label values for all members of the labeled signal set lss.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "val = getLabelValues(lss)",
            "val = getLabelValues(lss,midx)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[val,sublbltbl] = getLabelValues(lss,midx,lblname)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = getLabelValues(___,'LabelRowIndex',ridx)",
            "[___] = getLabelValues(___,'SublabelRowIndex',sridx)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_7119bea3-5728-45cf-aca0-d9b2354ee285_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "midx",
          "purpose" : "Member row number",
          "htmlid" : "mw_7119bea3-5728-45cf-aca0-d9b2354ee285_sep_mw_1f11fe8e-6a62-486d-9023-4b04d75b1f93",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "lblname",
          "purpose" : "Label or sublabel name",
          "htmlid" : "mw_7119bea3-5728-45cf-aca0-d9b2354ee285_sep_mw_f5a84ef3-7074-411e-9b04-f926d42f0bef",
          "value" : 
          [ "character vector",
            "string scalar",
            "cell array of character vectors",
            "string array" ] },
        
        { "name" : "ridx",
          "purpose" : "Label row index",
          "htmlid" : "mw_7119bea3-5728-45cf-aca0-d9b2354ee285_sep_mw_df72a3d1-e119-430e-9538-a637aef3880f",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "sridx",
          "purpose" : "Sublabel row index",
          "htmlid" : "mw_7119bea3-5728-45cf-aca0-d9b2354ee285_sep_mw_74291e12-4e15-4f47-b93a-205cfd0b85ab",
          "value" : 
          [ "positive integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "val",
          "purpose" : "Label values",
          "htmlid" : "mw_947a61c8-13af-4cb6-953b-6bd7a3d662a2",
          "value" : 
          [ "table" ] },
        
        { "name" : "sublbltbl",
          "purpose" : "Sublabel values",
          "htmlid" : "mw_bfadf5c5-b5c7-4674-809d-769cdcac54d5",
          "value" : 
          [ "table" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.getlabelvalues.html#mw_b4161fdb-9600-47b0-b993-b41b47ea678c",
          "open_command" : "openExample('predmaint_shared\/GetLabelValuesExample')",
          "title" : "Get Label Values" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.getmembernames.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "getMemberNames",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.getMemberNames",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Get member names in labeled signal set",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns a string array containing the member names in the order in which they are stored in the labeled signal set lss.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "mnames = getMemberNames(lss)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_2d1d0b1f-7cd9-4993-a69b-202afde030d3_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] } ],
      "outputs" : 
      [ 
        { "name" : "mnames",
          "purpose" : "Member names",
          "htmlid" : "mw_29231904-f224-40fe-8cd4-424abf828aa2",
          "value" : 
          [ "string array" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.getmembernames.html#mw_036bff90-b63b-469d-bc04-885db8c33e0e",
          "open_command" : "openExample('predmaint_shared\/GetMemberNamesExample')",
          "title" : "Get Member Names" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.getsignal.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "getSignal",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.getSignal",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Get signals from labeled signal set",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the values for the signals contained in member midx of the labeled signal set lss.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[s,info] = getSignal(lss,midx)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_42277fc1-c2b8-4d09-a268-1b619c1025d9_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "midx",
          "purpose" : "Member row number",
          "htmlid" : "mw_42277fc1-c2b8-4d09-a268-1b619c1025d9_sep_mw_1f11fe8e-6a62-486d-9023-4b04d75b1f93",
          "value" : 
          [ "positive integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "s",
          "purpose" : "Signal values",
          "htmlid" : "mw_dc8aef3d-8fbc-4395-b138-363b145fa569",
          "value" : 
          [ "vector",
            "matrix",
            "timetable",
            "cell array" ] },
        
        { "name" : "info",
          "purpose" : "Time information",
          "htmlid" : "mw_42277fc1-c2b8-4d09-a268-1b619c1025d9_sep_mw_272c32ea-c6bd-43c0-ba68-dc8de0aec160",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.getsignal.html#mw_fc96540d-efd4-4450-87ec-12c469fb29fc",
          "open_command" : "openExample('predmaint_shared\/GetSignalExample')",
          "title" : "Get Signal" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.head.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "head",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.head",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Get top rows of labels table",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the top rows of the labels table of the labeled signal set lss.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "val = head(lss)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_52a42a9c-35c5-45a5-8acc-d92f1523746e_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] } ],
      "outputs" : 
      [ 
        { "name" : "val",
          "purpose" : "Top rows of labels",
          "htmlid" : "mw_878da5e2-7eeb-4744-8f5f-10a9b9ee4ec9",
          "value" : 
          [ "table" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.head.html#mw_10a2bd1d-e23e-46b7-bedc-abb327cf1e66",
          "open_command" : "openExample('predmaint_shared\/TopLabelValuesExample')",
          "title" : "Top Label Values" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "labeledSignalSet" },
        
        { "type" : "function",
          "name" : "labeledSignalSet",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Create labeled signal set",
      "introduced" : "R2018b",
      "description" : "Use labeledSignalSet to store labeled signals along with label definitions.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lss = labeledSignalSet" ] },
        
        { "title" : "",
          "syntax" : 
          [ "lss = labeledSignalSet(src)",
            "lss = labeledSignalSet(src,lbldefs)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "lss = labeledSignalSet(src,lbldefs,'MemberNames',mnames)",
            "lss = labeledSignalSet(src,lbldefs,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "src",
          "purpose" : "Input data source",
          "htmlid" : "mw_8288e729-a1ff-4a89-9e4e-e8012e10546b",
          "value" : 
          [ "matrix",
            "cell array",
            "timetable",
            "signalDatastore object",
            "audioDatastore object" ] },
        
        { "name" : "lbldefs",
          "purpose" : "Label definitions",
          "htmlid" : "mw_cc78f5a4-3a58-480d-b958-df32dabf763a",
          "value" : 
          [ "vector of signalLabelDefinition objects" ] },
        
        { "name" : "mnames",
          "purpose" : "Member names",
          "htmlid" : "mw_801efffe-3b30-43f3-aabb-68546fc06b5f_sep_mw_a4148801-b468-484d-a2e4-fe9e7ebd0f23",
          "value" : 
          [ "character vector",
            "string scalar",
            "cell array of character vectors",
            "string array" ] } ],
      "classpropertygroup" : 
      [ 
        { "classproperty" : 
          [ 
            { "name" : "Description",
              "purpose" : "Labeled signal set description",
              "htmlid" : "mw_f47c5d48-10d5-46dc-9716-3dad4986ed7a",
              "value" : 
              [ "character vector",
                "string scalar" ] },
            
            { "name" : "SampleRate",
              "purpose" : "Sample rate values",
              "htmlid" : "mw_261806ba-6d72-4aad-919e-21b683afcb92",
              "value" : 
              [ "positive scalar",
                "vector" ] },
            
            { "name" : "SampleTime",
              "purpose" : "Sample time values",
              "htmlid" : "mw_b4c03e08-4d75-469f-816e-d2a72e0a74b2",
              "value" : 
              [ "positive scalar",
                "vector",
                "duration scalar",
                "duration vector" ] },
            
            { "name" : "TimeValues",
              "purpose" : "Time values",
              "htmlid" : "mw_f40eb0eb-7dea-4bc4-87b6-b3e3708059d4",
              "value" : 
              [ "vector",
                "duration vector",
                "matrix",
                "cell array" ] },
            
            { "name" : "NumMembers",
              "purpose" : "Number of members in set",
              "htmlid" : "mw_2457e153-0b7d-4893-a134-69b5f4f7d13a",
              "value" : 
              [ "positive integer" ] },
            
            { "name" : "Labels",
              "purpose" : "Labels table",
              "htmlid" : "mw_02a951d0-2501-4a66-9a06-f70da5cf5e46",
              "value" : 
              [ "table" ] },
            
            { "name" : "TimeInformation",
              "purpose" : "Time information of source",
              "htmlid" : "mw_32ab67df-aa8a-4655-b13f-76f03c9d5d39",
              "value" : 
              [ "'none'",
                "'sampleRate'",
                "'sampleTime'",
                "'timeValues'",
                "'inherent'" ] },
            
            { "name" : "Source",
              "purpose" : "Data source of labeled signal set",
              "htmlid" : "mw_bb74fc7b-a33d-4fd3-908e-c4b5e9c23c00",
              "value" : 
              [ "matrix",
                "cell array",
                "timetable" ] } ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.html#mw_f7a1c39a-89cb-4505-9d37-bb89d0386f88",
          "open_command" : "openExample('predmaint_shared\/LabelDefinitionsForWhaleSongsExample')",
          "title" : "Label Definitions for Whale Songs" },
        
        { "url" : "labeledsignalset.html#mw_50794a82-afd2-4b64-ad28-b3ff6ce778a3",
          "open_command" : "openExample('predmaint_shared\/CountLabelValuesExample')",
          "title" : "Count Label Values and Create Datastores" } ],
      "seealso" : 
      [ 
        { "url" : "..\/..\/signal\/ref\/signallabeler-app.html",
          "name" : "Signal Labeler" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" },
        
        { "url" : "..\/..\/signal\/ref\/signalmask.html",
          "name" : "signalMask" } ] },
    { "href" : "ref\/labeledsignalset.merge.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "merge",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.merge",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Merge two or more labeled signal sets",
      "introduced" : "R2020a",
      "description" : "This MATLAB function merges N labeled signal set objects, lss1,...,lssN, and returns a labeled signal set lssnew containing all the members and label values of the input sets.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lssnew = merge(lss1,...,lssN)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss1,...,lssN",
          "purpose" : "Input labeled signal sets",
          "htmlid" : "mw_d13aedd7-2865-4955-b0ec-44f1cbcb5980",
          "value" : 
          [ "labeledSignalSet objects" ] } ],
      "outputs" : 
      [ 
        { "name" : "lssnew",
          "purpose" : "Merged labeled signal set",
          "htmlid" : "mw_dc9783db-c45d-4146-86da-42d62b9c1b12",
          "value" : 
          [ "labeledSignalSet object" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.merge.html#mw_dff39743-609c-4f14-9891-10aaadf62593",
          "open_command" : "openExample('predmaint_shared\/MergeWhaleLabeledSignalSetsExample')",
          "title" : "Merge Labeled Signal Sets" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.removelabeldefinition.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "removeLabelDefinition",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.removeLabelDefinition",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Remove label definition from labeled signal set",
      "introduced" : "R2018b",
      "description" : "This MATLAB function removes the label definition lblname from the labeled signal set lss.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "removeLabelDefinition(lss,lblname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_87d66824-5250-496c-83f1-04908c0f7507_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "lblname",
          "purpose" : "Label or sublabel name",
          "htmlid" : "mw_87d66824-5250-496c-83f1-04908c0f7507_sep_mw_f5a84ef3-7074-411e-9b04-f926d42f0bef",
          "value" : 
          [ "character vector",
            "string scalar",
            "cell array of character vectors",
            "string array" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.removelabeldefinition.html#mw_bb1bc977-088e-465e-ba81-676e27d2ef05",
          "open_command" : "openExample('predmaint_shared\/RemoveLabelDefinitionExample')",
          "title" : "Remove Label Definition" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.removemembers.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "removeMembers",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.removeMembers",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Remove members from labeled signal set",
      "introduced" : "R2018b",
      "description" : "This MATLAB function removes the members specified in midxvect from the labeled signal set lss.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "removeMembers(lss,midxvect)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_df3aa51e-8853-43f0-8078-5b8b41f79df0_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "midxvect",
          "purpose" : "Subset member row numbers",
          "htmlid" : "mw_df3aa51e-8853-43f0-8078-5b8b41f79df0_sep_mw_32e89ca9-2cfe-45c6-a6c4-9002c5c246ce",
          "value" : 
          [ "vector of positive integers" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.removemembers.html#mw_777744f9-5dd1-420c-8865-ece69371c8cd",
          "open_command" : "openExample('predmaint_shared\/RemoveMemberExample')",
          "title" : "Remove Member" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.removepointvalue.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "removePointValue",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.removePointValue",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Remove row from point label",
      "introduced" : "R2018b",
      "description" : "This MATLAB function removes all rows of the point label lblname for the member specified by midx.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "removePointValue(lss,midx,lblname)",
            "removePointValue(lss,midx,lblname,'LabelRowIndex',ridx)",
            "removePointValue(lss,midx,lblname,'SublabelRowIndex',sridx)",
            "removePointValue(lss,midx,lblname,'LabelRowIndex',ridx,'SublabelRowIndex',sridx)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_51fc3a21-a891-4167-badf-4465b2435096_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "midx",
          "purpose" : "Member row number",
          "htmlid" : "mw_51fc3a21-a891-4167-badf-4465b2435096_sep_mw_1f11fe8e-6a62-486d-9023-4b04d75b1f93",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "lblname",
          "purpose" : "Label or sublabel name",
          "htmlid" : "mw_51fc3a21-a891-4167-badf-4465b2435096_sep_mw_f5a84ef3-7074-411e-9b04-f926d42f0bef",
          "value" : 
          [ "character vector",
            "string scalar",
            "cell array of character vectors",
            "string array" ] },
        
        { "name" : "ridx",
          "purpose" : "Label row index",
          "htmlid" : "mw_51fc3a21-a891-4167-badf-4465b2435096_sep_mw_df72a3d1-e119-430e-9538-a637aef3880f",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "sridx",
          "purpose" : "Sublabel row index",
          "htmlid" : "mw_51fc3a21-a891-4167-badf-4465b2435096_sep_mw_74291e12-4e15-4f47-b93a-205cfd0b85ab",
          "value" : 
          [ "positive integer" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.removepointvalue.html#mw_5460d778-3d45-44dd-b8d1-55e734f4867c",
          "open_command" : "openExample('predmaint_shared\/RemovePointValueExample')",
          "title" : "Remove Point Value" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.removeregionvalue.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "removeRegionValue",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.removeRegionValue",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Remove row from ROI label",
      "introduced" : "R2018b",
      "description" : "This MATLAB function removes all rows of the ROI label lblname for the member specified by midx.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "removeRegionValue(lss,midx,lblname)",
            "removeRegionValue(lss,midx,lblname,'LabelRowIndex',ridx)",
            "removeRegionValue(lss,midx,lblname,'SublabelRowIndex',sridx)",
            "removeRegionValue(lss,midx,lblname,'LabelRowIndex',ridx,'SublabelRowIndex',sridx)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_1a611dcf-ad43-4e31-a8c3-8215195cfffb_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "midx",
          "purpose" : "Member row number",
          "htmlid" : "mw_1a611dcf-ad43-4e31-a8c3-8215195cfffb_sep_mw_1f11fe8e-6a62-486d-9023-4b04d75b1f93",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "lblname",
          "purpose" : "Label or sublabel name",
          "htmlid" : "mw_1a611dcf-ad43-4e31-a8c3-8215195cfffb_sep_mw_f5a84ef3-7074-411e-9b04-f926d42f0bef",
          "value" : 
          [ "character vector",
            "string scalar",
            "cell array of character vectors",
            "string array" ] },
        
        { "name" : "ridx",
          "purpose" : "Label row index",
          "htmlid" : "mw_1a611dcf-ad43-4e31-a8c3-8215195cfffb_sep_mw_df72a3d1-e119-430e-9538-a637aef3880f",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "sridx",
          "purpose" : "Sublabel row index",
          "htmlid" : "mw_1a611dcf-ad43-4e31-a8c3-8215195cfffb_sep_mw_74291e12-4e15-4f47-b93a-205cfd0b85ab",
          "value" : 
          [ "positive integer" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.removeregionvalue.html#mw_903d96df-a857-4799-923c-05d66b4e06e0",
          "open_command" : "openExample('predmaint_shared\/RemoveRegionValueExample')",
          "title" : "Remove Region Value" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.resetlabelvalues.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "resetLabelValues",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.resetLabelValues",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Reset labels to default values",
      "introduced" : "R2018b",
      "description" : "This MATLAB function resets all label values for all members of the labeled signal set lss.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "resetLabelValues(lss)",
            "resetLabelValues(lss,midx)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "resetLabelValues(lss,midx,lblname)",
            "resetLabelValues(___,'LabelRowIndex',ridx)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_e80177ab-4acc-4172-8fb2-317af50bea27_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "midx",
          "purpose" : "Member row number",
          "htmlid" : "mw_e80177ab-4acc-4172-8fb2-317af50bea27_sep_mw_1f11fe8e-6a62-486d-9023-4b04d75b1f93",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "lblname",
          "purpose" : "Label or sublabel name",
          "htmlid" : "mw_e80177ab-4acc-4172-8fb2-317af50bea27_sep_mw_f5a84ef3-7074-411e-9b04-f926d42f0bef",
          "value" : 
          [ "character vector",
            "string scalar",
            "cell array of character vectors",
            "string array" ] },
        
        { "name" : "ridx",
          "purpose" : "Label row index",
          "htmlid" : "mw_e80177ab-4acc-4172-8fb2-317af50bea27_sep_mw_df72a3d1-e119-430e-9538-a637aef3880f",
          "value" : 
          [ "positive integer" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.resetlabelvalues.html#mw_b4b63a81-4489-4d89-8a01-5928da210bcd",
          "open_command" : "openExample('predmaint_shared\/ResetLabelValuesExample')",
          "title" : "Reset Label Values" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.setlabelvalue.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "setLabelValue",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.setLabelValue",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Set label value in labeled signal set",
      "introduced" : "R2018b",
      "description" : "This MATLAB function sets the attribute label lblname to value val, for the member of labeled signal set lss specified in midx.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "setLabelValue(lss,midx,lblname,val)",
            "setLabelValue(lss,midx,lblname,limits,val)",
            "setLabelValue(lss,midx,lblname,locs,val)",
            "setLabelValue(___,'LabelRowIndex',ridx)",
            "setLabelValue(___,'SublabelRowIndex',sridx)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_021f249e-187f-4e28-8ecb-751990d3eaa3_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "midx",
          "purpose" : "Member row number",
          "htmlid" : "mw_021f249e-187f-4e28-8ecb-751990d3eaa3_sep_mw_1f11fe8e-6a62-486d-9023-4b04d75b1f93",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "lblname",
          "purpose" : "Label or sublabel name",
          "htmlid" : "mw_7f1e789f-6e3c-4182-baec-54f87b98a8ca",
          "value" : 
          [ "character vector",
            "string scalar",
            "cell array of character vectors",
            "string array" ] },
        
        { "name" : "val",
          "purpose" : "Label values",
          "htmlid" : "mw_4244cfe8-5eac-4565-9218-797675f79c64",
          "value" : 
          [ "numeric value or array",
            "logical value or array",
            "categorical value or array",
            "character vector or cell array of character vectors",
            "string or string array",
            "table or table array",
            "timetable or timetable array" ] },
        
        { "name" : "limits",
          "purpose" : "Region limits",
          "htmlid" : "mw_0f7b9f5c-61de-4a72-bf21-08e8dea6262c",
          "value" : 
          [ "two-column matrix" ] },
        
        { "name" : "locs",
          "purpose" : "Point locations",
          "htmlid" : "mw_eaa65d7c-3955-41ee-aa90-af9cc97d9381",
          "value" : 
          [ "vector" ] },
        
        { "name" : "ridx",
          "purpose" : "Label row index",
          "htmlid" : "mw_021f249e-187f-4e28-8ecb-751990d3eaa3_sep_mw_df72a3d1-e119-430e-9538-a637aef3880f",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "sridx",
          "purpose" : "Sublabel row index",
          "htmlid" : "mw_021f249e-187f-4e28-8ecb-751990d3eaa3_sep_mw_74291e12-4e15-4f47-b93a-205cfd0b85ab",
          "value" : 
          [ "positive integer" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.setlabelvalue.html#mw_c71dbe9e-128e-4f55-a767-76a681c4314b",
          "open_command" : "openExample('predmaint_shared\/SetLabelValueExample')",
          "title" : "Set Label Value" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.setmembernames.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "setMemberNames",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.setMemberNames",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Set member names in labeled signal set",
      "introduced" : "R2019a",
      "description" : "This MATLAB function sets the names of the members of the labeled signal set lss to mnames.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "setMemberNames(lss,mnames)",
            "setMemberNames(lss,mnames,midx)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_bf2781f3-2160-4ddb-8678-5e623fbfe72b_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "mnames",
          "purpose" : "Member names",
          "htmlid" : "mw_bf2781f3-2160-4ddb-8678-5e623fbfe72b_sep_mw_a4148801-b468-484d-a2e4-fe9e7ebd0f23",
          "value" : 
          [ "character vector",
            "string scalar",
            "cell array of character vectors",
            "string array" ] },
        
        { "name" : "midx",
          "purpose" : "Member row number",
          "htmlid" : "mw_bf2781f3-2160-4ddb-8678-5e623fbfe72b_sep_mw_1f11fe8e-6a62-486d-9023-4b04d75b1f93",
          "value" : 
          [ "positive integer" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.setmembernames.html#mw_5cbecb3e-98a7-4ff8-8bf3-99c6f9f57ac8",
          "open_command" : "openExample('predmaint_shared\/SetMemberNamesExample')",
          "title" : "Set Member Names" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/labeledsignalset.subset.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "subset",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "labeledSignalSet.subset",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Get new labeled signal set with subset of members",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns a new labeled signal set containing the members specified in midxvect.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lssnew = subset(lss,midxvect)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_470c0beb-c9de-4013-a242-c14ba57b5246_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "midxvect",
          "purpose" : "Subset member row numbers",
          "htmlid" : "mw_470c0beb-c9de-4013-a242-c14ba57b5246_sep_mw_32e89ca9-2cfe-45c6-a6c4-9002c5c246ce",
          "value" : 
          [ "vector of positive integers" ] } ],
      "outputs" : 
      [ 
        { "name" : "lssnew",
          "purpose" : "New labeled signal set",
          "htmlid" : "mw_348c2a88-178c-4292-a9de-bb33fb37cada",
          "value" : 
          [ "labeledSignalSet object" ] } ],
      "examples" : 
      [ 
        { "url" : "labeledsignalset.subset.html#mw_4285c5df-1e59-44b3-83ef-15fd97ed942f",
          "open_command" : "openExample('predmaint_shared\/LabeledSubsetExample')",
          "title" : "Labeled Subset" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/laurentmatrix.ctranspose.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ctranspose",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentMatrix.ctranspose",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Laurent matrix transpose",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the transpose of the Laurent matrix A.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "B = ctranspose(A)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Laurent matrix",
          "htmlid" : "mw_def61d82-c5aa-494d-90e3-6f6517f7585a_sep_mw_921d2865-2c9f-47fd-bf8b-31b721a9d910",
          "value" : 
          [ "laurentMatrix object" ] } ],
      "outputs" : 
      [ 
        { "name" : "B",
          "purpose" : "Transpose",
          "htmlid" : "mw_ea47821b-68be-474b-96f4-bd959dbf85be",
          "value" : 
          [ "laurentMatrix object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentmatrix.ctranspose.html#mw_85cab469-f8e0-4828-a668-93b206b309ee",
          "open_command" : "openExample('wavelet\/LaurentMatrixTransposeExample')",
          "title" : "Laurent Matrix Transpose" } ],
      "seealso" : 
      [ 
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentmatrix.det.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "det",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentMatrix.det",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Laurent matrix determinant",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the determinant of the Laurent matrix A.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "d = det(A)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Laurent matrix",
          "htmlid" : "mw_8ec7570b-9ecb-477a-865b-c31164ac35fa_sep_mw_921d2865-2c9f-47fd-bf8b-31b721a9d910",
          "value" : 
          [ "laurentMatrix object" ] } ],
      "outputs" : 
      [ 
        { "name" : "d",
          "purpose" : "Determinant",
          "htmlid" : "mw_5d849ed4-c2e9-4618-b8a7-a4d0855ac2d8",
          "value" : 
          [ "laurentPolynomial object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentmatrix.det.html#mw_a3937c28-7356-4853-969a-76390e8a3694",
          "open_command" : "openExample('wavelet\/LaurentMatrixDeterminantExample')",
          "title" : "Laurent Matrix Determinant" } ],
      "seealso" : 
      [ 
        { "url" : "laurentmatrix.inverse.html",
          "name" : "inverse" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentmatrix.dispmat.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dispMat",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentMatrix.dispMat",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Display Laurent matrix",
      "introduced" : "R2021b",
      "description" : "This MATLAB function displays the Laurent matrix A.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "dispMat(A)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Laurent matrix",
          "htmlid" : "mw_73121b32-c1b4-4118-888a-fa28c951f58d_sep_mw_921d2865-2c9f-47fd-bf8b-31b721a9d910",
          "value" : 
          [ "laurentMatrix object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentmatrix.dispmat.html#mw_e2b8a495-4953-422b-868a-53985c31b912",
          "open_command" : "openExample('wavelet\/DisplayLaurentMatrixExample')",
          "title" : "Display Laurent Matrix" } ],
      "seealso" : 
      [ 
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentmatrix.inverse.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "inverse",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentMatrix.inverse",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Laurent matrix inverse",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the inverse of the Laurent matrix M if M has a nonzero monomial determinant.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "R = inverse(M)" ] } ],
      "inputs" : 
      [ 
        { "name" : "M",
          "purpose" : "Laurent matrix",
          "htmlid" : "mw_d10b968a-e98e-4487-970b-aadfd5240a76",
          "value" : 
          [ "laurentMatrix object" ] } ],
      "outputs" : 
      [ 
        { "name" : "R",
          "purpose" : "Inverse",
          "htmlid" : "mw_399f59c7-62dd-43a5-89c4-3610bd8f4d50",
          "value" : 
          [ "laurentMatrix object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentmatrix.inverse.html#mw_d6a727a4-d3fe-4544-b057-cf7dceb194ae",
          "open_command" : "openExample('wavelet\/LaurentMatrixInverseExample')",
          "title" : "Laurent Matrix Inverse" } ],
      "seealso" : 
      [ 
        { "url" : "laurentmatrix.det.html",
          "name" : "det" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentmatrix.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "laurentMatrix" },
        
        { "type" : "function",
          "name" : "laurentMatrix",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Create Laurent matrix",
      "introduced" : "R2021b",
      "description" : "Use the laurentMatrix object to create a matrix with laurentPolynomial elements.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lmat = laurentMatrix",
            "lmat = laurentMatrix(Elements=entries)" ] } ],
      "classpropertygroup" : 
      [ 
        { "classproperty" : 
          [ 
            { "name" : "Elements",
              "purpose" : "Laurent matrix elements",
              "htmlid" : "mw_977f2705-481a-496a-b607-c6338efbdc81",
              "value" : 
              [ "2-by-2 identity matrix",
                "cell array" ],
              "defaultvalue" : "2-by-2 identity matrix" } ] } ],
      "examples" : 
      [ 
        { "url" : "laurentmatrix.html#mw_60515231-ee43-4c17-8336-38e721bad292",
          "open_command" : "openExample('wavelet\/CreateLaurentMatrixExample')",
          "title" : "Create Laurent Matrix" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" },
        
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" } ] },
    { "href" : "ref\/laurentpolynomial.degree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "degree",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.degree",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Degree of Laurent polynomial",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the degree of the Laurent polynomial P.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "deg = degree(P)" ] } ],
      "inputs" : 
      [ 
        { "name" : "P",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_ba98dd53-a215-4230-bdec-8eabd936dbe2_sep_mw_749c0be4-0ee0-464b-bf87-7d388fed64db",
          "value" : 
          [ "laurentPolynomial object" ] } ],
      "outputs" : 
      [ 
        { "name" : "deg",
          "purpose" : "Degree",
          "htmlid" : "mw_c8558a96-11a8-49c9-9055-a276a46b7060",
          "value" : 
          [ "nonnegative integer" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.degree.html#mw_c502c2ff-635f-4201-b7eb-9a4bd35bd737",
          "open_command" : "openExample('wavelet\/DegreeOfLaurentPolynomialsExample')",
          "title" : "Degree of Laurent Polynomials" } ],
      "seealso" : 
      [ 
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.dyaddown.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dyaddown",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.dyaddown",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentMatrix.dyaddown",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Dyadic downsampling of Laurent polynomial or Laurent matrix",
      "introduced" : "R2021b",
      "description" : "This MATLAB function downsamples by two the Laurent polynomial or Laurent matrix specified by P.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Q = dyaddown(P)" ] } ],
      "inputs" : 
      [ 
        { "name" : "P",
          "purpose" : "Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_ddd7b70a-a1a4-46af-986e-d9fef20a2e41_sep_mw_0de96293-fb0d-4c3f-b5b6-8555b567df5f",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "outputs" : 
      [ 
        { "name" : "Q",
          "purpose" : "Downsampled Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_ab574c51-b087-4d13-a813-92e8b2eed768",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.dyaddown.html#mw_8485b847-9536-42e2-98d1-945f0812354e",
          "open_command" : "openExample('wavelet\/DyadicDownsamplingOfLaurentPolynomialExample')",
          "title" : "Dyadic Downsampling of Laurent Polynomial" },
        
        { "url" : "laurentpolynomial.dyaddown.html#mw_8b1d9eee-409c-4e33-992c-d108933a9340",
          "open_command" : "openExample('wavelet\/DyadicDownsamplingOfLaurentMatrixExample')",
          "title" : "Dyadic Downsampling of Laurent Matrix" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.dyadup.html",
          "name" : "dyadup" },
        
        { "url" : "laurentpolynomial.polyphase.html",
          "name" : "polyphase" },
        
        { "url" : "laurentpolynomial.reflect.html",
          "name" : "reflect" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.dyadup.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "dyadup",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.dyadup",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentMatrix.dyadup",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Dyadic upsampling of Laurent polynomial or Laurent matrix",
      "introduced" : "R2021b",
      "description" : "This MATLAB function upsamples by two the Laurent polynomial or Laurent matrix specified by P.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Q = dyadup(P)" ] } ],
      "inputs" : 
      [ 
        { "name" : "P",
          "purpose" : "Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_1f1f081c-53a9-414d-ad0e-5809fb08bfc8_sep_mw_0de96293-fb0d-4c3f-b5b6-8555b567df5f",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "outputs" : 
      [ 
        { "name" : "Q",
          "purpose" : "Upsampled Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_ac8e9436-72b2-4829-82c4-1368c6e0a19b",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.dyadup.html#mw_56cd1e6b-8a55-4091-8b38-85cb4f743681",
          "open_command" : "openExample('wavelet\/DyadicUpsamplingOfLaurentPolynomialExample')",
          "title" : "Dyadic Upsampling of Laurent Polynomial" },
        
        { "url" : "laurentpolynomial.dyadup.html#mw_c516737c-8610-46c9-96b3-406b36d9629d",
          "open_command" : "openExample('wavelet\/DyadicUpsamplingOfLaurentMatrixExample')",
          "title" : "Dyadic Upsampling of Laurent Matrix" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.dyaddown.html",
          "name" : "dyaddown" },
        
        { "url" : "laurentpolynomial.polyphase.html",
          "name" : "polyphase" },
        
        { "url" : "laurentpolynomial.reflect.html",
          "name" : "reflect" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.eq.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "eq",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.eq",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentMatrix.eq",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Laurent polynomials or Laurent matrices equality test",
      "introduced" : "R2021b",
      "description" : "This MATLAB function compares the pair of Laurent polynomials or Laurent matrices A and B and returns 1 (true) if the two are identical and 0 (false) otherwise.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "tf = eq(A,B)",
            "tf = (A == B)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_566994fd-2300-4a67-8e90-b0cb10cd2064_sep_mw_2231a928-50ff-40c0-a3c4-fbf5909716b5",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] },
        
        { "name" : "B",
          "purpose" : "Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_566994fd-2300-4a67-8e90-b0cb10cd2064_sep_mw_30f66a73-1885-4a4e-9f79-255ced04c0ef",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "outputs" : 
      [ 
        { "name" : "tf",
          "purpose" : "Equality test result",
          "htmlid" : "mw_660152bd-0573-4f9e-b5a2-0eb2ed8263c0",
          "value" : 
          [ "true or 1",
            "false or 0" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.eq.html#mw_4b6b7aac-74fa-441b-832e-ae983a5fca90",
          "open_command" : "openExample('wavelet\/TestEqualityOfLaurentPolynomialsExample')",
          "title" : "Test Equality of Laurent Polynomials" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.ne.html",
          "name" : "ne" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.euclid.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "euclid",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.euclid",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Euclidean algorithm for Laurent polynomials",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns an array of structures such that each row of dec corresponds to the Euclidean division of the Laurent polynomial A by the Laurent polynomial B: \/p A = B*Q + R,p where Q is the quotient and R is the remainder.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "dec = euclid(A,B)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_eca0139e-f325-4d23-a8fd-b43f8c90c9ca_sep_mw_18076dd7-dfc4-421c-a9b0-2568e4030be2",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "B",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_eca0139e-f325-4d23-a8fd-b43f8c90c9ca_sep_mw_dc597e10-9174-424d-a4bd-9c3aace841e0",
          "value" : 
          [ "laurentPolynomial object" ] } ],
      "outputs" : 
      [ 
        { "name" : "dec",
          "purpose" : "Euclidean algorithm factors",
          "htmlid" : "mw_6581fcbe-8aee-45f4-bfda-f4a4bdf9d76a",
          "value" : 
          [ "structure array" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.euclid.html#mw_de1dc505-b7df-4857-b20c-5d1b5493d2a3",
          "open_command" : "openExample('wavelet\/EuclideanDivisionOfLaurentPolynomialsExample')",
          "title" : "Euclidean Division of Laurent Polynomials" } ],
      "seealso" : 
      [ 
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.horzcat.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "horzcat",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.horzcat",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Horizontal concatenation of Laurent polynomials",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the horizontal concatenation of the Laurent polynomials P1,…,PN.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "H = horzcat(P1,...,PN)" ] } ],
      "inputs" : 
      [ 
        { "name" : "P1,...,PN",
          "purpose" : "Input polynomials",
          "htmlid" : "mw_f3d06b82-3ab3-4067-a3e1-c8b1d8ba60a3",
          "value" : 
          [ "laurentPolynomial objects" ] } ],
      "outputs" : 
      [ 
        { "name" : "H",
          "purpose" : "Horizontal cell array",
          "htmlid" : "mw_82d350f0-26bc-45dc-aeaf-c451c91ca0f5",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.horzcat.html#mw_88405bd7-145c-4dec-bc62-8f539b342b97",
          "open_command" : "openExample('wavelet\/LaurentPolynomialConcatenationExample')",
          "title" : "Laurent Polynomial Concatenation" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.vertcat.html",
          "name" : "vertcat" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "laurentPolynomial" },
        
        { "type" : "function",
          "name" : "laurentPolynomial",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Create Laurent polynomial",
      "introduced" : "R2021b",
      "description" : "Use the laurentPolynomial object to create a Laurent polynomial with real-valued polynomial coefficients.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lpoly = laurentPolynomial",
            "lpoly = laurentPolynomial(Name=Value)" ] } ],
      "classpropertygroup" : 
      [ 
        { "classproperty" : 
          [ 
            { "name" : "Coefficients",
              "purpose" : "Laurent polynomial coefficients",
              "htmlid" : "mw_5d989f89-1298-41e1-9b8b-eb40abaa4f22",
              "value" : 
              [ "1",
                "real-valued vector" ],
              "defaultvalue" : "1" },
            
            { "name" : "MaxOrder",
              "purpose" : "Maximum order",
              "htmlid" : "mw_346f5988-3f81-4a69-babe-2f9025fc4e94",
              "value" : 
              [ "0",
                "integer" ],
              "defaultvalue" : "0" } ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.html#mw_98065cc6-830f-4cfa-b27e-59ee57517e78",
          "open_command" : "openExample('wavelet\/BasicMathematicalOperationsAppliedToLaurentPolynomialsExample')",
          "title" : "Basic Mathematical Operations Applied to Laurent Polynomials" },
        
        { "url" : "laurentpolynomial.html#mw_b39f6280-8b29-47b3-947c-cf065f311139",
          "open_command" : "openExample('wavelet\/PropertiesOfLaurentPolynomialsExample')",
          "title" : "Properties of Laurent Polynomials" } ],
      "seealso" : 
      [ 
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" } ] },
    { "href" : "ref\/laurentpolynomial.lp2filters.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "lp2filters",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.lp2filters",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Laurent polynomials to filters",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the filters associated with the Laurent polynomials LoDz, HiDz, LoRz, and HiRz.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[LoD,HiD,LoR,HiR] = lp2filters(LoDz,HiDz,LoRz,HiRz)",
            "[LoD,HiD,LoR,HiR] = lp2filters(___,signFLAG)" ] } ],
      "inputs" : 
      [ 
        { "name" : "LoDz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_a9c0fd19-87df-4fd7-b0d1-471d9376d615",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "HiDz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_c8b0d210-884b-4638-8d4f-d201e619754b",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "LoRz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_cbc2b4a1-32d0-4757-8c5d-607a33095012",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "HiRz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_997df4ca-c047-423d-9791-ee8f9d4afb17",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "signFLAG",
          "purpose" : "Change sign flag",
          "htmlid" : "mw_a5556917-d8e3-42d7-bef4-d196c8810018",
          "value" : 
          [ "0",
            "1" ],
          "defaultvalue" : "0" } ],
      "outputs" : 
      [ 
        { "name" : "LoD",
          "purpose" : "Lowpass filter",
          "htmlid" : "mw_86cb32e0-a44c-4c25-8897-736b66c8c134",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "HiD",
          "purpose" : "Highpass filter",
          "htmlid" : "mw_098e1b60-2787-43b4-886d-115d91284b19",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "LoR",
          "purpose" : "Lowpass filter",
          "htmlid" : "mw_bd275b0a-9426-4966-8198-47abc10ce0c6",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "HiR",
          "purpose" : "Highpass filter",
          "htmlid" : "mw_5f07607c-90fc-4dcc-9d80-620abd1885ad",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.lp2filters.html#mw_6d70026d-8b07-4ed7-b54b-39029c7fec46",
          "open_command" : "openExample('wavelet\/FiltersAssociatedWithLaurentPolynomialsExample')",
          "title" : "Filters Associated With Laurent Polynomials" } ],
      "seealso" : 
      [ 
        { "url" : "filters2lp.html",
          "name" : "filters2lp" },
        
        { "url" : "wave2lp.html",
          "name" : "wave2lp" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.lp2ls.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "lp2LS",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.lp2LS",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Laurent polynomials to lifting steps and normalization factors",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the lifting scheme steps lsteps and normalization factors k associated with the Laurent polynomials LoRz and HiRz.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[lsteps,k] = lp2LS(wavetype,LoRz,HiRz,factmode)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wavetype",
          "purpose" : "Wavelet type",
          "htmlid" : "mw_05a84829-1bec-4ad4-82c0-c1329b2c2c5a",
          "value" : 
          [ "\"o\"",
            "\"b\"" ] },
        
        { "name" : "LoRz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_01d37ed9-68c2-42ec-b1ab-4095c5aa8c73",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "HiRz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_61bf5c00-5a06-4058-9eb4-7701d902afa3",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "factmode",
          "purpose" : "Factorization mode",
          "htmlid" : "mw_d9aeaecf-aa7e-49e6-9878-3a601810e620",
          "value" : 
          [ "\"analysis\"",
            "\"synthesis\"" ],
          "defaultvalue" : "\"analysis\"" } ],
      "outputs" : 
      [ 
        { "name" : "lsteps",
          "purpose" : "Lifting steps",
          "htmlid" : "mw_e74cef46-d7ef-40e5-a62e-aadb68216a20",
          "value" : 
          [ "array of liftingStep structures" ] },
        
        { "name" : "k",
          "purpose" : "Normalization factors",
          "htmlid" : "mw_e37c74e4-696a-497b-922c-0183e698ea3b",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.lp2ls.html#mw_53ee2213-75e8-4e88-8d79-2cd2b219df29",
          "open_command" : "openExample('wavelet\/ObtainLiftingSchemeFromLaurentPolynomialsExample')",
          "title" : "Obtain Lifting Scheme from Laurent Polynomials" } ],
      "seealso" : 
      [ 
        { "url" : "liftingstep.html",
          "name" : "liftingStep" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.minus.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "minus",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.minus",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentMatrix.minus",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Laurent polynomial or Laurent matrix subtraction",
      "introduced" : "R2021b",
      "description" : "This MATLAB function subtracts B from A, where A and B are a pair of Laurent polynomials or Laurent matrices.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Q = minus(A,B)",
            "Q = A - B" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_b0fe0ac4-1172-407b-861e-3466dfac21dd_sep_mw_2231a928-50ff-40c0-a3c4-fbf5909716b5",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] },
        
        { "name" : "B",
          "purpose" : "Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_b0fe0ac4-1172-407b-861e-3466dfac21dd_sep_mw_30f66a73-1885-4a4e-9f79-255ced04c0ef",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "outputs" : 
      [ 
        { "name" : "Q",
          "purpose" : "Difference",
          "htmlid" : "mw_f1bc4802-e846-4084-a348-1ddf36033080",
          "value" : 
          [ "laurentPolynomial object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.minus.html#mw_1365c719-34b6-4406-83ea-48cb635b9fb8",
          "open_command" : "openExample('wavelet\/LaurentPolynomialSubtractionExample')",
          "title" : "Laurent Polynomial Subtraction" },
        
        { "url" : "laurentpolynomial.minus.html#mw_9e2e6a7a-d9d1-44bb-9f0a-35799c4f240a",
          "open_command" : "openExample('wavelet\/LaurentMatrixSubtractionExample')",
          "title" : "Laurent Matrix Subtraction" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.mtimes.html",
          "name" : "mtimes" },
        
        { "url" : "laurentpolynomial.plus.html",
          "name" : "plus" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.mpower.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mpower",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.mpower",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Laurent polynomial exponentiation",
      "introduced" : "R2021b",
      "description" : "This MATLAB function raises the Laurent polynomial P to the power pow.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Q = mpower(P,pow)",
            "Q = P^pow" ] } ],
      "inputs" : 
      [ 
        { "name" : "P",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_3eabd4ba-9be7-4963-964e-f89f87ee5fa1_sep_mw_749c0be4-0ee0-464b-bf87-7d388fed64db",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "pow",
          "purpose" : "Power",
          "htmlid" : "mw_fe69c9fb-3b50-4d97-95ed-deb5a59bdd9e",
          "value" : 
          [ "integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "Q",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_f5c916ed-ce70-4be5-ac22-ba738fb41e3c",
          "value" : 
          [ "laurentPolynomial object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.mpower.html#mw_454f6039-cc5f-482b-bf13-0b7fafa7134e",
          "open_command" : "openExample('wavelet\/LaurentPolynomialExponentiationExample')",
          "title" : "Laurent Polynomial Exponentiation" } ],
      "seealso" : 
      [ 
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.mtimes.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mtimes",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.mtimes",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Laurent polynomial or Laurent matrix multiplication",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the product of the pair of Laurent polynomials or Laurent matrices A and B.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Q = mtimes(A,B)",
            "Q = A * B" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_702d219c-123d-4a82-8457-28e089def2af_sep_mw_2231a928-50ff-40c0-a3c4-fbf5909716b5",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] },
        
        { "name" : "B",
          "purpose" : "Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_702d219c-123d-4a82-8457-28e089def2af_sep_mw_30f66a73-1885-4a4e-9f79-255ced04c0ef",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "outputs" : 
      [ 
        { "name" : "Q",
          "purpose" : "Product",
          "htmlid" : "mw_02a99d16-427a-4f64-9621-e2818c644066",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.mtimes.html#mw_05cdd404-f29c-445e-be15-4e1a4fd23bd5",
          "open_command" : "openExample('wavelet\/LaurentPolynomialMultiplicationExample')",
          "title" : "Laurent Polynomial Multiplication" },
        
        { "url" : "laurentpolynomial.mtimes.html#mw_30b95e23-43f2-4af5-9d9d-d6e6ee2e4c12",
          "open_command" : "openExample('wavelet\/LaurentMatrixMultiplicationExample')",
          "title" : "Laurent Matrix Multiplication" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.plus.html",
          "name" : "plus" },
        
        { "url" : "laurentpolynomial.minus.html",
          "name" : "minus" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.ne.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ne",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.ne",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Laurent polynomials inequality test",
      "introduced" : "R2021b",
      "description" : "This MATLAB function compares Laurent polynomials A and B and returns 1 (true) if the two are unequal and 0 (false) otherwise.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "tf = ne(A,B)",
            "tf = (A ~= B)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_222e47e9-08b4-48a6-92bc-4fbb01a5dabc_sep_mw_18076dd7-dfc4-421c-a9b0-2568e4030be2",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "B",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_222e47e9-08b4-48a6-92bc-4fbb01a5dabc_sep_mw_dc597e10-9174-424d-a4bd-9c3aace841e0",
          "value" : 
          [ "laurentPolynomial object" ] } ],
      "outputs" : 
      [ 
        { "name" : "tf",
          "purpose" : "Inequality test result",
          "htmlid" : "mw_4dedee06-48a0-4e0e-835d-a83ee9236a19",
          "value" : 
          [ "true or 1",
            "false or 0" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.ne.html#mw_60faa43f-b758-43c5-96a1-2303fa21cd5c",
          "open_command" : "openExample('wavelet\/TestEqualityOfLaurentPolynomialsExample')",
          "title" : "Test Equality of Laurent Polynomials" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.eq.html",
          "name" : "eq" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.plus.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "plus",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.plus",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentMatrix.plus",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Laurent polynomial or Laurent matrix addition",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the sum of the pair of Laurent polynomials or Laurent matrices A and B.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Q = plus(A,B)",
            "Q = A + B" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_33690d83-e565-4f5f-99c4-c8ce881c9904_sep_mw_2231a928-50ff-40c0-a3c4-fbf5909716b5",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] },
        
        { "name" : "B",
          "purpose" : "Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_33690d83-e565-4f5f-99c4-c8ce881c9904_sep_mw_30f66a73-1885-4a4e-9f79-255ced04c0ef",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "outputs" : 
      [ 
        { "name" : "Q",
          "purpose" : "Sum",
          "htmlid" : "mw_a0be559b-be3a-426a-80b3-4d72cdb04a4c",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.plus.html#mw_373db8da-5b8c-453d-8263-3faa696361db",
          "open_command" : "openExample('wavelet\/LaurentPolynomialAdditionExample')",
          "title" : "Laurent Polynomial Addition" },
        
        { "url" : "laurentpolynomial.plus.html#mw_40c6c30e-a71b-48ea-985d-92011d93ee1d",
          "open_command" : "openExample('wavelet\/LaurentMatrixAdditionExample')",
          "title" : "Laurent Matrix Addition" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.minus.html",
          "name" : "minus" },
        
        { "url" : "laurentpolynomial.mtimes.html",
          "name" : "mtimes" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.polyphase.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "polyphase",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.polyphase",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Polyphase components of Laurent polynomial",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the even part E and odd part O of the Laurent polynomial P.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[E,O] = polyphase(P)" ] } ],
      "inputs" : 
      [ 
        { "name" : "P",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_5f0c7a01-3310-4335-8369-f47275eabe01_sep_mw_749c0be4-0ee0-464b-bf87-7d388fed64db",
          "value" : 
          [ "laurentPolynomial object" ] } ],
      "outputs" : 
      [ 
        { "name" : "E",
          "purpose" : "Even part",
          "htmlid" : "mw_ebfdd419-1a77-4f75-ad0a-5416abf53bb2",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "O",
          "purpose" : "Odd part",
          "htmlid" : "mw_a2ecc48f-5d95-434f-9606-6f3b12f490b3",
          "value" : 
          [ "laurentPolynomial object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.polyphase.html#mw_c90a6612-a12e-4931-a16f-f3e14a854a35",
          "open_command" : "openExample('wavelet\/PolyphaseDecompositionOfLaurentPolynomialExample')",
          "title" : "Polyphase Decomposition of Laurent Polynomial" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.dyaddown.html",
          "name" : "dyaddown" },
        
        { "url" : "laurentpolynomial.dyadup.html",
          "name" : "dyadup" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.reflect.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "reflect",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.reflect",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentMatrix.reflect",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Laurent polynomial or Laurent matrix reflection",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the reflection of the Laurent polynomial or the Laurent matrix specified by P.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Q = reflect(P)" ] } ],
      "inputs" : 
      [ 
        { "name" : "P",
          "purpose" : "Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_89e8fa0d-3ba6-4434-9784-61bd8e72c99f_sep_mw_0de96293-fb0d-4c3f-b5b6-8555b567df5f",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "outputs" : 
      [ 
        { "name" : "Q",
          "purpose" : "Reflection",
          "htmlid" : "mw_b87a6daa-aa0c-4896-8300-e6047aa8a6e3",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.reflect.html#mw_2fd4e2cd-a0c4-4e52-91ee-48e85145795a",
          "open_command" : "openExample('wavelet\/LaurentPolynomialReflectionExample')",
          "title" : "Laurent Polynomial Reflection" },
        
        { "url" : "laurentpolynomial.reflect.html#mw_df8027ed-d702-412c-901a-b86ba2570bb6",
          "open_command" : "openExample('wavelet\/LaurentMatrixReflectionExample')",
          "title" : "Laurent Matrix Reflection" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.uminus.html",
          "name" : "uminus" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.rescale.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "rescale",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.rescale",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Rescale Laurent polynomial",
      "introduced" : "R2021b",
      "description" : "This MATLAB function scales the coefficients of the Laurent polynomial P by the nonzero scalar c.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Q = rescale(P,c)" ] } ],
      "inputs" : 
      [ 
        { "name" : "P",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_86477a6a-2f6e-4229-a54d-c3bf3ec181b5_sep_mw_749c0be4-0ee0-464b-bf87-7d388fed64db",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "c",
          "purpose" : "Scale factor",
          "htmlid" : "mw_00ae52b7-9b46-4c53-9dcf-4b573bab1202",
          "value" : 
          [ "nonzero scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "Q",
          "purpose" : "Scaled Laurent polynomial",
          "htmlid" : "mw_71db9016-4686-4fde-beb8-81214ea8dfa5",
          "value" : 
          [ "laurentPolynmial object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.rescale.html#mw_2f4c834e-7e2b-436e-ba23-f4b721a530a5",
          "open_command" : "openExample('wavelet\/RescaleLaurentPolynomialExample')",
          "title" : "Rescale Laurent Polynomial" } ],
      "seealso" : 
      [ 
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.uminus.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "uminus",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.uminus",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentMatrix.uminus",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Unary minus for Laurent polynomial or Laurent matrix",
      "introduced" : "R2021b",
      "description" : "This MATLAB function negates the Laurent polynomial or the Laurent matrix specified by P.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Q = uminus(P)",
            "Q = -P" ] } ],
      "inputs" : 
      [ 
        { "name" : "P",
          "purpose" : "Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_a784db79-3b8c-46ed-bbf9-817655e008f7_sep_mw_0de96293-fb0d-4c3f-b5b6-8555b567df5f",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "outputs" : 
      [ 
        { "name" : "Q",
          "purpose" : "Negated Laurent polynomial or Laurent matrix",
          "htmlid" : "mw_2bc7c710-1379-4935-8616-7cf40332879d",
          "value" : 
          [ "laurentPolynomial object",
            "laurentMatrix object" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.uminus.html#mw_a8789b49-a7f3-487a-a675-84ef63fad7da",
          "open_command" : "openExample('wavelet\/UnaryMinusOfLaurentPolynomialExample')",
          "title" : "Unary Minus of Laurent Polynomial" },
        
        { "url" : "laurentpolynomial.uminus.html#mw_e7f841ee-9f40-4e20-b76e-89d6672dc1c4",
          "open_command" : "openExample('wavelet\/UnaryNegativeOfLaurentMatrixExample')",
          "title" : "Unary Negative of Laurent Matrix" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.reflect.html",
          "name" : "reflect" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurentpolynomial.vertcat.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "vertcat",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "laurentPolynomial.vertcat",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Vertical concatenation of Laurent polynomials",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the vertical concatenation of the Laurent polynomials P1,…,PN.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "V = vertcat(P1,...,PN)" ] } ],
      "inputs" : 
      [ 
        { "name" : "P1,...,PN",
          "purpose" : "Input polynomials",
          "htmlid" : "mw_8f13396e-7e0d-46d5-9ccc-9f99c3ca2638",
          "value" : 
          [ "laurentPolynomial objects" ] } ],
      "outputs" : 
      [ 
        { "name" : "V",
          "purpose" : "Vertical cell array",
          "htmlid" : "mw_89fa90eb-5aeb-42d0-910a-73db7584878b",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "laurentpolynomial.vertcat.html#mw_8c35fa3c-918a-492e-ba8d-2053e169cb84",
          "open_command" : "openExample('wavelet\/LaurentPolynomialConcatenationExample')",
          "title" : "Laurent Polynomial Concatenation" } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.horzcat.html",
          "name" : "horzcat" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/laurmat.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "laurmat",
          "fcntype" : "simple" } ],
      "refpurpose" : "(To be removed) Laurent matrices constructor",
      "deprecationstatus" : "announce",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the Laurent matrix object M associated with V which can be a cell array (at most two dimensional) of Laurent polynomials (see laurpoly) or an ordinary matrix.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "M = laurmat(V)" ] } ],
      "seealso" : 
      [ 
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" } ] },
    { "href" : "ref\/laurpoly.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "laurpoly",
          "fcntype" : "simple" } ],
      "refpurpose" : "(To be removed) Laurent polynomials constructor",
      "deprecationstatus" : "announce",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns a Laurent polynomial object.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "P = laurpoly(C,d)",
            "P = laurpoly(C,'dmin',d)",
            "P = laurpoly(C,'dmax',d)",
            "P = laurpoly(C,d)" ] } ],
      "seealso" : 
      [ 
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/leaves.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "leaves",
          "fcntype" : "simple" } ],
      "refpurpose" : "Determine terminal nodes",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the indices of terminal nodes of the tree T where N is a column vector.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "N = leaves(T)",
            "[N,K] = leaves(T,'sort')",
            "N = leaves(T,'dp')",
            "[N,K] = leaves(T,'sortdp')",
            "[N,K] = leaves(T,'sdp')" ] } ],
      "seealso" : 
      [ 
        { "url" : "tnodes.html",
          "name" : "tnodes" },
        
        { "url" : "noleaves.html",
          "name" : "noleaves" } ] },
    { "href" : "ref\/liftfilt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "liftfilt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Apply elementary lifting steps on filters",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the four filters obtained by adding an array of elementary lifting steps (ELS) starting from the two filters LoD and LoR.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[LoDN,HiDN,LoRN,HiRN] = liftfilt(LoD,LoR,LiftingSteps=ELS)",
            "[LoDN,HiDN,LoRN,HiRN] = liftfilt(LoD,LoR,NormalizationFactor=NF)",
            "liftfilt(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "LoD,LoR",
          "purpose" : "Lowpass filters",
          "htmlid" : "mw_d9922e40-df26-433c-9339-f4a3c88d652c",
          "value" : 
          [ "real-valued vectors" ] },
        
        { "name" : "ELS",
          "purpose" : "Lifting steps",
          "htmlid" : "mw_e9935e5e-81ef-47b4-8fbc-36d37f8cd911",
          "value" : 
          [ "structure array" ] },
        
        { "name" : "NF",
          "purpose" : "Normalization factor",
          "htmlid" : "mw_d8137a31-5a88-4974-8214-f2eba348d0f1",
          "value" : 
          [ "nonzero scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "LoDN,HiDN",
          "purpose" : "Decomposition filters",
          "htmlid" : "mw_8b59c766-1368-4bfe-bd0b-5c2873702bb3",
          "value" : 
          [ "real-valued vectors" ] },
        
        { "name" : "LoRN,HiRN",
          "purpose" : "Reconstruction filters",
          "htmlid" : "mw_f564a616-45d9-4b43-9625-ee7c23c27fde",
          "value" : 
          [ "real-valued vectors" ] } ],
      "examples" : 
      [ 
        { "url" : "liftfilt.html#mw_ffd679a3-7ed0-4632-9bca-c245e88d4cb2",
          "open_command" : "openExample('wavelet\/GenerateBiorthogonalWaveletFiltersFromHaarFiltersExample')",
          "title" : "Generate Biorthogonal Wavelet Filters From Haar Filters" } ],
      "seealso" : 
      [ 
        { "url" : "liftingstep.html",
          "name" : "liftingStep" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" } ] },
    { "href" : "ref\/liftingscheme.addlift.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "addlift",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "liftingScheme.addlift",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Add elementary lifting steps",
      "introduced" : "R2021a",
      "description" : "This MATLAB function appends the array of elementary lifting steps els to the lifting scheme object lscheme.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lsn = addlift(lscheme,els)",
            "lsn = addlift(lscheme,els,loc)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lscheme",
          "purpose" : "Lifting scheme",
          "htmlid" : "mw_1f8fe5b6-d6f1-4719-ba76-37d56e793266_sep_mw_74ae7a1f-7f26-4843-9226-2fc151eb3c6c",
          "value" : 
          [ "liftingScheme object" ] },
        
        { "name" : "els",
          "purpose" : "Lifting steps",
          "htmlid" : "mw_f77339e4-d76c-44c3-88b1-1aa050738af4",
          "value" : 
          [ "structure array" ] },
        
        { "name" : "loc",
          "purpose" : "Location",
          "htmlid" : "mw_7220ccbb-0754-494d-b391-16fe8216bb87",
          "value" : 
          [ "length(lscheme.LiftingSteps)",
            "positive integer" ],
          "defaultvalue" : "length(lscheme.LiftingSteps)" } ],
      "outputs" : 
      [ 
        { "name" : "lsn",
          "purpose" : "Lifting scheme",
          "htmlid" : "mw_bc550ea9-7cbf-424e-92d0-b5b416e5c7b6",
          "value" : 
          [ "liftingScheme object" ] } ],
      "examples" : 
      [ 
        { "url" : "liftingscheme.addlift.html#mw_4650c08f-92d5-4c18-9ce7-e99d81b11263",
          "open_command" : "openExample('wavelet\/InsertElementaryLiftingStepsExample')",
          "title" : "Insert Elementary Lifting Steps" } ],
      "seealso" : 
      [ 
        { "url" : "liftingstep.html",
          "name" : "liftingStep" },
        
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" },
        
        { "url" : "liftingscheme.deletelift.html",
          "name" : "deletelift" } ] },
    { "href" : "ref\/liftingscheme.deletelift.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "deletelift",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "liftingScheme.deletelift",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Delete elementary lifting steps",
      "introduced" : "R2021a",
      "description" : "This MATLAB function deletes the last elementary lifting step from the lifting scheme lsc.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lsn = deletelift(lscheme)",
            "lsn = deletelift(lscheme,loc)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lscheme",
          "purpose" : "Lifting scheme",
          "htmlid" : "mw_d546088b-d856-421e-bc39-05c07e100a33_sep_mw_74ae7a1f-7f26-4843-9226-2fc151eb3c6c",
          "value" : 
          [ "liftingScheme object" ] },
        
        { "name" : "loc",
          "purpose" : "Positions",
          "htmlid" : "mw_d9236ee2-93c6-4d85-a5ea-66cf34e1ac1e",
          "value" : 
          [ "positive integer",
            "vector" ] } ],
      "outputs" : 
      [ 
        { "name" : "lsn",
          "purpose" : "Lifting scheme",
          "htmlid" : "mw_48bd7942-ab8c-4885-b55a-cbae9014fd9c",
          "value" : 
          [ "liftingScheme object" ] } ],
      "examples" : 
      [ 
        { "url" : "liftingscheme.deletelift.html#mw_73e21af5-eefd-4e97-b3b6-cc37344a93d0",
          "open_command" : "openExample('wavelet\/DeleteElementaryLiftingStepsExample')",
          "title" : "Delete Elementary Lifting Steps" } ],
      "seealso" : 
      [ 
        { "url" : "liftingstep.html",
          "name" : "liftingStep" },
        
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" },
        
        { "url" : "liftingscheme.addlift.html",
          "name" : "addlift" } ] },
    { "href" : "ref\/liftingscheme.disp.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "disp",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "liftingScheme.disp",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Display lifting scheme",
      "introduced" : "R2021a",
      "description" : "This MATLAB function displays the properties of the lifting scheme lscheme: Wavelet name Lifting steps Lowpass filter coefficients Normalization factorsThe function also displays the properties of each lifting: Type of step Laurent polynomial coefficients Maximum order of the corresponding Laurent polynomial To display a lifting scheme created using liftwave, see displs.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "disp(lscheme)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lscheme",
          "purpose" : "Lifting scheme",
          "htmlid" : "mw_e398d99e-bf9d-4849-8139-0a131e9599ad_sep_mw_74ae7a1f-7f26-4843-9226-2fc151eb3c6c",
          "value" : 
          [ "liftingScheme object" ] } ],
      "examples" : 
      [ 
        { "url" : "liftingscheme.disp.html#mw_04790a06-319e-4724-ac45-2843654c16e8",
          "open_command" : "openExample('wavelet\/DisplayLiftingSchemePropertiesExample')",
          "title" : "Display Lifting Scheme Properties" } ],
      "seealso" : 
      [ 
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" } ] },
    { "href" : "ref\/liftingscheme.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "liftingScheme" },
        
        { "type" : "function",
          "name" : "liftingScheme",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Create lifting scheme for lifting wavelet transform",
      "introduced" : "R2021a",
      "description" : "Use the liftingScheme object to create a lifting scheme that you can efficiently apply to data.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lscheme = liftingScheme",
            "lscheme = liftingScheme(Name,Value)" ] } ],
      "classpropertygroup" : 
      [ 
        { "classproperty" : 
          [ 
            { "name" : "Wavelet",
              "purpose" : "Orthogonal or biorthogonal wavelet",
              "htmlid" : "mw_92f0fd46-2696-4075-a189-96c8863d5355",
              "value" : 
              [ "'lazy'",
                "'haar'",
                "'db1'",
                "'db2'" ],
              "defaultvalue" : "'lazy'" },
            
            { "name" : "CustomLowpassFilter",
              "purpose" : "Lowpass filters",
              "htmlid" : "mw_a8017e1e-d79a-4450-b584-47b57d362ff1",
              "value" : 
              [ "cell array" ] },
            
            { "name" : "LiftingSteps",
              "purpose" : "Lifting steps",
              "htmlid" : "mw_5ba0635e-b3f2-44f0-8d5d-c90ffd0d63e4",
              "value" : 
              [ "liftingStep structure",
                "array of liftingStep structures" ] },
            
            { "name" : "NormalizationFactors",
              "purpose" : "Normalization factors",
              "htmlid" : "mw_b39d427b-cdcd-4f58-93f1-6d2a1ca64781",
              "value" : 
              [ "non-zero scalar",
                "vector" ] } ] } ],
      "examples" : 
      [ 
        { "url" : "liftingscheme.html#mw_1109cbda-b3a1-4282-90bd-698ce75b5ef3",
          "open_command" : "openExample('wavelet\/CreateLiftingSchemeExample')",
          "title" : "Apply Lifting Scheme to Signal" },
        
        { "url" : "liftingscheme.html#mw_83129cc1-ee51-44fa-9870-1c99b6ce475d",
          "open_command" : "openExample('wavelet\/CreateLiftingSchemeUsingCustomLowpassFilterExample')",
          "title" : "Create Lifting Scheme Using Custom Lowpass Filter" },
        
        { "url" : "liftingscheme.html#mw_a275e21c-1063-40aa-b234-d7033e759edc",
          "open_command" : "openExample('wavelet\/DemonstrateWaveletPropertiesExample')",
          "title" : "Demonstrate Wavelet Orthogonality" } ],
      "seealso" : 
      [ 
        { "url" : "liftingstep.html",
          "name" : "liftingStep" },
        
        { "url" : "lwt.html",
          "name" : "lwt" },
        
        { "url" : "ilwt.html",
          "name" : "ilwt" },
        
        { "url" : "lwt2.html",
          "name" : "lwt2" },
        
        { "url" : "ilwt2.html",
          "name" : "ilwt2" } ] },
    { "href" : "ref\/liftingscheme.ls2filt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ls2filt",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "liftingScheme.ls2filt",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Extract wavelet filters from lifting scheme",
      "introduced" : "R2021a",
      "description" : "This MATLAB function returns the wavelet decomposition and reconstruction filters associated with the lifting scheme lscheme.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[lod,hid,lor,hir] = ls2filt(lscheme)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lscheme",
          "purpose" : "Lifting scheme",
          "htmlid" : "mw_301dbb0e-1f67-42f1-a96b-3afe68e42bd8_sep_mw_74ae7a1f-7f26-4843-9226-2fc151eb3c6c",
          "value" : 
          [ "liftingScheme object" ] } ],
      "outputs" : 
      [ 
        { "name" : "lod,hid",
          "purpose" : "Decomposition filters",
          "htmlid" : "mw_08827c40-7572-4b4b-b90f-54bec1c48991",
          "value" : 
          [ "vectors" ] },
        
        { "name" : "lor,hir",
          "purpose" : "Reconstruction filters",
          "htmlid" : "mw_15b35cbb-1922-44e3-aee2-d7ce6d35d84a",
          "value" : 
          [ "vectors" ] } ],
      "examples" : 
      [ 
        { "url" : "liftingscheme.ls2filt.html#mw_d4f7ac7a-be80-4b35-ae0b-ffd7bc41778e",
          "open_command" : "openExample('wavelet\/CompareLiftingSchemeFiltersExample')",
          "title" : "Compare Lifting Scheme Filters" } ],
      "seealso" : 
      [ 
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" } ] },
    { "href" : "ref\/liftingstep.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "liftingStep",
          "fcntype" : "simple" } ],
      "refpurpose" : "Create elementary lifting step",
      "introduced" : "R2021a",
      "description" : "This MATLAB function returns an elementary lifting step as a structure array with default field values.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Lstep = liftingStep",
            "Lstep = liftingStep(Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "namevaluepairs" : 
          [ 
            { "name" : "Type",
              "purpose" : "Type of lifting step",
              "htmlid" : "mw_916ba054-9e37-40c5-9eac-68c43e5018d6",
              "value" : 
              [ "'predict'",
                "'update'" ] },
            
            { "name" : "Coefficients",
              "purpose" : "Laurent polynomial coefficients",
              "htmlid" : "mw_c883f705-cc1d-4220-830e-c5a42b1e8cd5",
              "value" : 
              [ "vector" ] },
            
            { "name" : "MaxOrder",
              "purpose" : "Maximum order",
              "htmlid" : "mw_d147534d-2a9d-4907-bc5e-2fbe3d4f85a8",
              "value" : 
              [ "0",
                "integer" ],
              "defaultvalue" : "0" } ] } ],
      "outputs" : 
      [ 
        { "name" : "Lstep",
          "purpose" : "Elementary lifting step",
          "htmlid" : "mw_814e5c6f-f641-4f39-9239-62b3ed91d935",
          "value" : 
          [ "structure array" ] } ],
      "examples" : 
      [ 
        { "url" : "liftingstep.html#mw_037eba54-d900-4a07-992b-7fac49876f3c",
          "open_command" : "openExample('wavelet\/CreateLiftingSchemeWithUserSpecifiedLiftingStepsExample')",
          "title" : "Apply Lifting Scheme with User-Specified Lifting Steps" } ],
      "seealso" : 
      [ 
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" },
        
        { "url" : "lwt.html",
          "name" : "lwt" },
        
        { "url" : "ilwt.html",
          "name" : "ilwt" },
        
        { "url" : "lwtcoef.html",
          "name" : "lwtcoef" },
        
        { "url" : "lwt2.html",
          "name" : "lwt2" },
        
        { "url" : "ilwt2.html",
          "name" : "ilwt2" },
        
        { "url" : "lwtcoef2.html",
          "name" : "lwtcoef2" } ] },
    { "href" : "ref\/liftwave.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "liftwave",
          "fcntype" : "simple" } ],
      "refpurpose" : "(To be removed) Lifting schemes",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the lifting scheme associated with the wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "LS = liftwave(wname)",
            "LS = liftwave(wname,'Int2Int')" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_09b5daf8-bb47-4936-bb53-d554a37eb6dc",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "LS",
          "purpose" : "Lifting scheme",
          "htmlid" : "mw_8f914949-30f5-4320-be7b-a5b14da0aaf2",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "liftwave.html#mw_5ccdc266-e3c0-4e0e-8017-f3dc6ed1d99b",
          "open_command" : "openExample('wavelet\/CreateLiftingSchemeWithLiftwaveExample')",
          "title" : "Create Lifting Scheme With liftwave" } ],
      "seealso" : 
      [ 
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" } ] },
    { "href" : "ref\/localmax.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "localmax",
          "fcntype" : "simple" } ],
      "refpurpose" : "Identify and chain local maxima",
      "introduced" : "R2008a",
      "description" : "This MATLAB function identifies and chains the local maxima in the rows of inputmatrix.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[lmaxima,indices] = localmax(inputmatrix)",
            "[lmaxima,indices] = localmax(inputmatrix,initrow)",
            "[lmaxima,indices] = localmax(inputmatrix,initrow,regflag)" ] } ],
      "inputs" : 
      [ 
        { "name" : "inputmatrix",
          "purpose" : "",
          "htmlid" : "f10-919008-inputmatrix" },
        
        { "name" : "initrow",
          "purpose" : "",
          "htmlid" : "f10-919008-initrow" },
        
        { "name" : "regflag",
          "purpose" : "",
          "htmlid" : "f10-919008-regflag" } ],
      "outputs" : 
      [ 
        { "name" : "lmaxima",
          "purpose" : "",
          "htmlid" : "f10-919008-lmaxima" },
        
        { "name" : "indices",
          "purpose" : "",
          "htmlid" : "f10-919008-indices" } ],
      "examples" : 
      [ 
        { "url" : "localmax.html#bvc8eh5-1",
          "open_command" : "openExample('wavelet\/CWTCoefficientModuliAndMaximaLinesExample')",
          "title" : "CWT Coefficient Moduli and Maxima Lines" } ] },
    { "href" : "ref\/ls2filt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ls2filt",
          "fcntype" : "simple" } ],
      "refpurpose" : "(To be removed) Transform lifting scheme to quadruplet of filters",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the four filters LoD, HiD, LoR, and HiR associated with the lifting scheme LS.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[LoD,HiD,LoR,HiR] = ls2filt(LS)" ] } ],
      "inputs" : 
      [ 
        { "name" : "LS",
          "purpose" : "Lifting scheme",
          "htmlid" : "mw_526a4f12-fff4-49c5-8bf8-ca47f9de1361",
          "value" : 
          [ "cell array" ] } ],
      "outputs" : 
      [ 
        { "name" : "LoD,HiD",
          "purpose" : "Wavelet decomposition filters",
          "htmlid" : "mw_ac884482-d0ca-454e-8cf8-81882fae22b4",
          "value" : 
          [ "vectors" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_3026cf66-d46e-4b6c-bdc5-f5ce009e2332",
          "value" : 
          [ "vectors" ] } ],
      "examples" : 
      [ 
        { "url" : "ls2filt.html#mw_f875b64c-1dc4-4702-b63f-730552726e4e",
          "open_command" : "openExample('wavelet\/ObtainFiltersFromLiftingSchemeExample')",
          "title" : "Obtain Filters From Lifting Scheme" } ],
      "seealso" : 
      [ 
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" },
        
        { "url" : "liftingscheme.ls2filt.html",
          "name" : "ls2filt" } ] },
    { "href" : "ref\/lsinfo.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "lsinfo",
          "fcntype" : "simple" } ],
      "refpurpose" : "(To be removed) Lifting schemes information",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function displays information about lifting schemes created with liftwave.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lsinfo" ] } ],
      "seealso" : 
      [ 
        { "url" : "liftingscheme.disp.html",
          "name" : "disp" },
        
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" } ] },
    { "href" : "ref\/lwt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "lwt",
          "fcntype" : "simple" } ],
      "refpurpose" : "1-D lifting wavelet transform",
      "introduced" : "R2021a",
      "description" : "This MATLAB function returns the wavelet decomposition of x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[ca,cd] = lwt(x)",
            "[ca,cd] = lwt(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Signal",
          "htmlid" : "mw_b157e182-d857-4cb9-93c1-6edaeed880a2",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Wavelet",
              "purpose" : "Wavelet",
              "htmlid" : "mw_504d6b8e-521d-4b3b-8206-bf8f9567bf0f",
              "value" : 
              [ "character vector",
                "string scalar" ] },
            
            { "name" : "LiftingScheme",
              "purpose" : "Lifting scheme",
              "htmlid" : "mw_23efd272-b838-4980-8f7b-1a1a2009038b",
              "value" : 
              [ "liftingScheme object" ] },
            
            { "name" : "Level",
              "purpose" : "Level of decomposition",
              "htmlid" : "mw_eb483fbc-c637-4a6e-88be-763d47d5bc29",
              "value" : 
              [ "positive integer" ] },
            
            { "name" : "Extension",
              "purpose" : "Extension mode",
              "htmlid" : "mw_c595e4e7-523b-4fb5-a47a-f312a3e150b0",
              "value" : 
              [ "'periodic'",
                "'zeropad'",
                "'symmetric'" ],
              "defaultvalue" : "'periodic'" },
            
            { "name" : "Int2Int",
              "purpose" : "Integer-valued data handling",
              "htmlid" : "mw_61bed7aa-e4ad-4b61-891a-60eb212112d1",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" } ] } ],
      "outputs" : 
      [ 
        { "name" : "ca",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_7af2366d-0ee4-4274-9809-83011d195074",
          "value" : 
          [ "scalar",
            "vector",
            "matrix" ] },
        
        { "name" : "cd",
          "purpose" : "Detail coefficients",
          "htmlid" : "mw_1e4beeef-e6a2-4300-ae27-0dfd0b998b12",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "lwt.html#mw_205c4ff8-bdde-409a-a496-0938ba97745f",
          "open_command" : "openExample('wavelet\/LiftingWaveletTransformOfIntegerValuedSignalExample')",
          "title" : "Lifting Wavelet Transform of Integer-Valued Signal" },
        
        { "url" : "lwt.html#mw_75f6d882-5d2d-4961-a9d1-7255a17072e1",
          "open_command" : "openExample('wavelet\/LWTOfMultisignalExample')",
          "title" : "LWT of Multichannel Signal" } ],
      "seealso" : 
      [ 
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" },
        
        { "url" : "haart.html",
          "name" : "haart" },
        
        { "url" : "ilwt.html",
          "name" : "ilwt" },
        
        { "url" : "ihaart.html",
          "name" : "ihaart" },
        
        { "url" : "lwtcoef.html",
          "name" : "lwtcoef" } ] },
    { "href" : "ref\/lwt2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "lwt2",
          "fcntype" : "simple" } ],
      "refpurpose" : "2-D Lifting wavelet transform",
      "introduced" : "R2021b",
      "description" : "This MATLAB function performs the 2-D lifting wavelet transform (LWT) of the real- or complex-valued matrix x using the db1 wavelet.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[ll,lh,hl,hh] = lwt2(x)",
            "[___] = lwt2(x,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_34555785-d677-49c3-b2b4-f7c8487d6b25",
          "value" : 
          [ "matrix" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Wavelet",
              "purpose" : "Wavelet",
              "htmlid" : "mw_72f06d7f-f627-4232-824c-89e31eac820d",
              "value" : 
              [ "\"db1\"",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "\"db1\"" },
            
            { "name" : "LiftingScheme",
              "purpose" : "Lifting scheme",
              "htmlid" : "mw_25edc5c8-3de0-459b-bdfd-8228703746b4",
              "value" : 
              [ "liftingScheme object" ] },
            
            { "name" : "Level",
              "purpose" : "Decomposition level",
              "htmlid" : "mw_d81baa78-0adb-4656-bec4-bffc22a7c121",
              "value" : 
              [ "positive integer" ] },
            
            { "name" : "Extension",
              "purpose" : "Extension mode",
              "htmlid" : "mw_d1db8cd9-ce22-4584-9258-aa513e81a2fa",
              "value" : 
              [ "\"periodic\"",
                "\"zeropad\"",
                "\"symmetric\"" ],
              "defaultvalue" : "\"periodic\"" },
            
            { "name" : "Int2Int",
              "purpose" : "Handling integer-valued data",
              "htmlid" : "mw_9ffa560c-d349-48b2-9bf7-76496124e13b",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" } ] } ],
      "outputs" : 
      [ 
        { "name" : "ll",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_8ed65658-ead2-4cf6-8846-ee53631f3525",
          "value" : 
          [ "scalar",
            "vector",
            "matrix" ] },
        
        { "name" : "lh",
          "purpose" : "Horizontal detail coefficients",
          "htmlid" : "mw_93518247-f558-487e-8f61-575780057660",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "hl",
          "purpose" : "Vertical detail coefficients",
          "htmlid" : "mw_7330ed30-ce1f-4155-94ec-57802769bb96",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "hh",
          "purpose" : "Diagonal detail coefficients",
          "htmlid" : "mw_cff7f790-511e-4128-82d3-d6ad9fe3648d",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "lwt2.html#mw_0e78bfbb-0077-4e78-91ab-5203a54b0315",
          "open_command" : "openExample('wavelet\/LiftingWaveletTransformOf2DDataExample')",
          "title" : "Lifting Wavelet Transform of 2-D Data" },
        
        { "url" : "lwt2.html#mw_09fec0a0-6072-443a-81a1-59e1bb114572",
          "open_command" : "openExample('wavelet\/LiftingWaveletTransformOfRGBImageUsingLiftingSchemeExample')",
          "title" : "Lifting Wavelet Transform of RGB Image Using Lifting Scheme" } ],
      "seealso" : 
      [ 
        { "url" : "ilwt2.html",
          "name" : "ilwt2" },
        
        { "url" : "lwtcoef2.html",
          "name" : "lwtcoef2" },
        
        { "url" : "haart2.html",
          "name" : "haart2" },
        
        { "url" : "ihaart2.html",
          "name" : "ihaart2" },
        
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" } ] },
    { "href" : "ref\/lwtcoef.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "lwtcoef",
          "fcntype" : "simple" } ],
      "refpurpose" : "Extract or reconstruct 1-D LWT wavelet coefficients and orthogonal projections",
      "introduced" : "R2021a",
      "description" : "This MATLAB function returns the level 1 approximation coefficients that correspond to the approximation and detail coefficients, ca and cd, respectively.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "y = lwtcoef(ca,cd)",
            "y = lwtcoef(ca,cd,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "ca",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_9c6e9223-3cd7-483d-935d-829fec489c58",
          "value" : 
          [ "scalar",
            "vector",
            "matrix" ] },
        
        { "name" : "cd",
          "purpose" : "Detail coefficients",
          "htmlid" : "mw_55b5c0d9-6003-494e-9262-f7c1ebf18619",
          "value" : 
          [ "cell array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Wavelet",
              "purpose" : "Wavelet",
              "htmlid" : "mw_7969560b-96a6-4f2b-aab4-565ad57ba9c2",
              "value" : 
              [ "'db1'",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "'db1'" },
            
            { "name" : "LiftingScheme",
              "purpose" : "Lifting scheme",
              "htmlid" : "mw_94c1f646-cc95-455f-9abb-7572cbe550ff",
              "value" : 
              [ "liftingScheme object" ] },
            
            { "name" : "OutputType",
              "purpose" : "Output type",
              "htmlid" : "mw_3ff59aa7-280a-438f-9c4c-bb41514a92ef",
              "value" : 
              [ "'coefficients'",
                "'projection'" ],
              "defaultvalue" : "'coefficients'" },
            
            { "name" : "Type",
              "purpose" : "Type of coefficients",
              "htmlid" : "mw_0784181b-1f04-4f63-bcf3-c3729f57d2e0",
              "value" : 
              [ "'approximation'",
                "'detail'" ],
              "defaultvalue" : "'approximation'" },
            
            { "name" : "Level",
              "purpose" : "Level",
              "htmlid" : "mw_6b30d758-027e-4a88-8b8e-07ea8dda772c",
              "value" : 
              [ "1",
                "integer" ],
              "defaultvalue" : "1" },
            
            { "name" : "Int2Int",
              "purpose" : "Handling integer-valued data",
              "htmlid" : "mw_ca639f76-596b-4126-895d-93d0bc7da1d9",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" },
            
            { "name" : "Extension",
              "purpose" : "Extension mode",
              "htmlid" : "mw_7bdfeb74-8f4b-4490-bfd7-9c5fc011f491",
              "value" : 
              [ "\"periodic\"",
                "\"zeropad\"",
                "\"symmetric\"" ],
              "defaultvalue" : "\"periodic\"" } ] } ],
      "outputs" : 
      [ 
        { "name" : "y",
          "purpose" : "Extracted coefficients or projection",
          "htmlid" : "mw_6aec87df-66a2-48c6-aa83-2a95c2b7a7bf",
          "value" : 
          [ "vector",
            "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "lwtcoef.html#mw_0a792852-344b-4c29-bb3a-e2e0b6d4b06a",
          "open_command" : "openExample('wavelet\/ReconstructSignalFromCoefficientProjectionsExample')",
          "title" : "Reconstruct Signal from Orthogonal Projections" } ],
      "seealso" : 
      [ 
        { "url" : "lwt.html",
          "name" : "lwt" },
        
        { "url" : "ilwt.html",
          "name" : "ilwt" },
        
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" } ] },
    { "href" : "ref\/lwtcoef2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "lwtcoef2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Extract 2-D LWT wavelet coefficients and orthogonal projections",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the level 1 reconstructed approximation coefficients that correspond to the approximation coefficients ll and the horizontal (lh), vertical (hl), and diagonal (hh) wavelet coefficients.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "y = lwtcoef2(ll,lh,hl,hh)",
            "y = lwtcoef2(ll,lh,hl,hh,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "ll",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_2090c137-4ee1-497c-aa13-ae08734ce5b9",
          "value" : 
          [ "scalar",
            "vector",
            "matrix" ] },
        
        { "name" : "lh",
          "purpose" : "Horizontal detail coefficients",
          "htmlid" : "mw_441ece64-905d-4532-a75f-d97d313c95d3",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "hl",
          "purpose" : "Vertical detail coefficients",
          "htmlid" : "mw_be3cc6ae-0cc7-4a6e-b361-60dd87dcb7c7",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "hh",
          "purpose" : "Diagonal detail coefficients",
          "htmlid" : "mw_fd774783-591a-4d44-b822-a4f9f4d870a6",
          "value" : 
          [ "cell array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Wavelet",
              "purpose" : "Wavelet",
              "htmlid" : "mw_834b9475-e613-4597-9bd2-58cbc8dd566a",
              "value" : 
              [ "\"db1\"",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "\"db1\"" },
            
            { "name" : "LiftingScheme",
              "purpose" : "Lifting scheme",
              "htmlid" : "mw_5c42143e-8817-4da1-bfc7-beb53650b5e0",
              "value" : 
              [ "liftingScheme object" ] },
            
            { "name" : "OutputType",
              "purpose" : "Output type",
              "htmlid" : "mw_e31216d7-d766-42f2-8bd8-a8f081b3b5d2",
              "value" : 
              [ "\"coefficients\"",
                "\"projection\"" ],
              "defaultvalue" : "\"coefficients\"" },
            
            { "name" : "Type",
              "purpose" : "Type of coefficients",
              "htmlid" : "mw_b47fb86c-03ce-4a03-a9ac-b70d7a290727",
              "value" : 
              [ "\"ll\"",
                "\"lh\"",
                "\"hl\"",
                "\"hh\"" ],
              "defaultvalue" : "\"ll\"" },
            
            { "name" : "Level",
              "purpose" : "Level",
              "htmlid" : "mw_f88f8ca3-28cf-4002-84a3-1d59250b5529",
              "value" : 
              [ "1",
                "positive integer" ],
              "defaultvalue" : "1" },
            
            { "name" : "Extension",
              "purpose" : "Extension mode",
              "htmlid" : "mw_d05afe95-4644-4f81-a77e-a9f9cf9f8be3",
              "value" : 
              [ "\"periodic\"",
                "\"zeropad\"",
                "\"symmetric\"" ],
              "defaultvalue" : "\"periodic\"" },
            
            { "name" : "Int2Int",
              "purpose" : "Handling integer-valued data",
              "htmlid" : "mw_dc77ee9c-cfaf-4cb1-8b57-e0f9426583b6",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" } ] } ],
      "outputs" : 
      [ 
        { "name" : "y",
          "purpose" : "Extracted coefficients or projection",
          "htmlid" : "mw_d543cd22-892e-4958-9fea-208d2a129a36",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "lwtcoef2.html#mw_04f12fc4-4c38-4292-9bf7-95c5ade72c8a",
          "open_command" : "openExample('wavelet\/ReconstructImageFromOrthogonalProjectionsExample')",
          "title" : "Reconstruct Image from Orthogonal Projections" } ],
      "seealso" : 
      [ 
        { "url" : "lwt2.html",
          "name" : "lwt2" },
        
        { "url" : "ilwt2.html",
          "name" : "ilwt2" },
        
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" } ] },
    { "href" : "ref\/mbscalf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mbscalf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Morris minimum-bandwidth discrete-time wavelets",
      "introduced" : "R2022b",
      "description" : "This MATLAB function returns the Morris minimum-bandwidth scaling filter specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "scalf = mbscalf(wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Morris minimum-bandwidth scaling filter",
          "htmlid" : "mw_2c9dd2aa-156d-4211-8441-22e656675b92",
          "value" : 
          [ "\"mbN.L\"" ] } ],
      "outputs" : 
      [ 
        { "name" : "scalf",
          "purpose" : "Scaling filter",
          "htmlid" : "mw_aef959c6-9593-41ea-bfb8-ea6a1d70d3fd",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "mbscalf.html#mw_498a2e12-8b29-4c0a-abd5-0f67e2019fe8",
          "open_command" : "openExample('wavelet\/MorrisMinimumBandwidthWaveletExample')",
          "title" : "Morris Minimum-Bandwidth Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "symwavf.html",
          "name" : "symwavf" },
        
        { "url" : "dbwavf.html",
          "name" : "dbwavf" },
        
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "modwpt.html",
          "name" : "modwpt" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "dwpt.html",
          "name" : "dwpt" },
        
        { "url" : "orthfilt.html",
          "name" : "orthfilt" },
        
        { "url" : "isorthwfb.html",
          "name" : "isorthwfb" } ] },
    { "href" : "ref\/mdwtcluster.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mdwtcluster",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multisignals 1-D clustering",
      "introduced" : "R2008a",
      "description" : "This MATLAB function clusters data using hierarchical clustering.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "s = mdwtcluster(x)",
            "s = mdwtcluster(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_7a024e9b-68e2-4a66-b500-ddb19997858f",
          "value" : 
          [ "matrix" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "dirDec",
              "purpose" : "Direction of decomposition",
              "htmlid" : "mw_61ab705d-5667-409e-8d9e-a0fb18e44b5b",
              "value" : 
              [ "'r'",
                "'c'" ],
              "defaultvalue" : "'r'" },
            
            { "name" : "level",
              "purpose" : "Level of DWT decomposition",
              "htmlid" : "mw_905c97e8-9d5b-486e-9fd3-34c8a7353beb",
              "value" : 
              [ "fix(log2(size(x,d)))",
                "positive integer" ],
              "defaultvalue" : "fix(log2(size(x,d)))" },
            
            { "name" : "wname",
              "purpose" : "Wavelet",
              "htmlid" : "mw_83c50a6a-617f-41ac-9d41-6dfcdd4bf448",
              "value" : 
              [ "'haar'",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "'haar'" },
            
            { "name" : "dwtEXTM",
              "purpose" : "DWT extension mode",
              "htmlid" : "mw_9f138d12-f4c3-4fe7-8d59-0e574e34d836",
              "value" : 
              [ "character vector",
                "string scalar" ] },
            
            { "name" : "pdist",
              "purpose" : "Distance metric",
              "htmlid" : "mw_074f4055-f3c6-4250-ac97-40533bb38ff2",
              "value" : 
              [ "'euclidean'",
                "character vector",
                "string scalar",
                "function handle" ],
              "defaultvalue" : "'euclidean'" },
            
            { "name" : "linkage",
              "purpose" : "Algorithm for computing the distance between clusters",
              "htmlid" : "mw_4c604d2f-63b5-441b-8c7e-a6733ba8162a",
              "value" : 
              [ "'ward'",
                "'average'",
                "'centroid'",
                "'complete'" ],
              "defaultvalue" : "'ward'" },
            
            { "name" : "maxclust",
              "purpose" : "Number of clusters",
              "htmlid" : "mw_f5f7908e-bac0-4c69-ba00-e3919d306379",
              "value" : 
              [ "6",
                "integer",
                "vector" ],
              "defaultvalue" : "6" },
            
            { "name" : "lst2clu",
              "purpose" : "Cell array that contains the list of data to classify",
              "htmlid" : "mw_2581978e-b796-4abb-9b06-33a05e61fb07",
              "value" : 
              [ "cell array",
                "string vector" ] } ] } ],
      "outputs" : 
      [ 
        { "name" : "s",
          "purpose" : "Output structure",
          "htmlid" : "mw_14dc0e7c-17b5-4007-82b8-c9b093183a4a",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "mdwtcluster.html#mw_ec3fece9-25ba-443d-8cc4-bbeef04a9b80",
          "open_command" : "openExample('wavelet\/Cluster1DMultisignalExample')",
          "title" : "Cluster 1-D Multisignal" } ],
      "seealso" : 
      [ 
        { "url" : "mdwtdec.html",
          "name" : "mdwtdec" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" } ] },
    { "href" : "ref\/mdwtdec.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mdwtdec",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multisignal 1-D wavelet decomposition",
      "introduced" : "R2007a",
      "description" : "This MATLAB function returns the 1-D discrete wavelet decomposition at level lev of each row or each column of the matrix x, using the wavelet wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "dec = mdwtdec(dirdec,x,lev,wname)",
            "dec = mdwtdec(dirdec,x,lev,LoD,HiD,LoR,HiR)",
            "dec = mdwtdec(___,'mode',extmode)" ] } ],
      "inputs" : 
      [ 
        { "name" : "dirdec",
          "purpose" : "Direction indicator",
          "htmlid" : "mw_14aeccba-9912-41ad-88d5-74d9ea6080a7",
          "value" : 
          [ "'r'",
            "'c'" ] },
        
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_b516eca8-40d6-4d8e-a51f-44c5933c3f8c",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "lev",
          "purpose" : "Level of decomposition",
          "htmlid" : "mw_3a26d66a-b545-4cbc-8764-91c1bbb1232d",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_8e5211d0-93a3-470e-b056-4bea2af1dd84",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoD,HiD",
          "purpose" : "Wavelet decomposition filters",
          "htmlid" : "mw_a562ba46-0f73-4554-970e-9c70dbff62a8",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_5f87bc69-e5a0-46a6-9172-c403d0c60846",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "extmode",
          "purpose" : "Extension mode",
          "htmlid" : "mw_11309988-1a69-401f-b068-a1432be50703",
          "value" : 
          [ "'zpd'",
            "'sp0'",
            "'spd'" ] } ],
      "outputs" : 
      [ 
        { "name" : "dec",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_d0b191f0-0c59-43d7-8dbf-52cc5c4bbb4e",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "mdwtdec.html#mw_74c03ee7-1cf4-489d-a432-c2c57bea1411",
          "open_command" : "openExample('wavelet\/DecomposeMultisignalsExample')",
          "title" : "Decompose Multisignals" } ],
      "seealso" : 
      [ 
        { "url" : "mdwtrec.html",
          "name" : "mdwtrec" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" } ] },
    { "href" : "ref\/mdwtrec.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mdwtrec",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multisignal 1-D wavelet reconstruction",
      "introduced" : "R2007a",
      "description" : "This MATLAB function reconstructs the original matrix of signals from the wavelet decomposition structure dec.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "x = mdwtrec(dec)",
            "x = mdwtrec(dec,idxsig)",
            "y = mdwtrec(dec,type,lev)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "a = mdwtrec(dec,'a')",
            "d = mdwtrec(dec,'d')",
            "ca = mdwtrec(dec,'ca')" ] },
        
        { "title" : "",
          "syntax" : 
          [ "cd = mdwtrec(dec,'cd',mode)",
            "cfs = mdwtrec(dec,'cfs',mode)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "y = mdwtrec(___,idxsig)" ] } ],
      "inputs" : 
      [ 
        { "name" : "dec",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_8a653769-5fee-44af-94f2-7347b12c3904",
          "value" : 
          [ "structure" ] },
        
        { "name" : "idxsig",
          "purpose" : "Indices",
          "htmlid" : "mw_f71c279e-9473-4331-a822-5ccab285e9e2",
          "value" : 
          [ "positive integer-valued vector" ] },
        
        { "name" : "lev",
          "purpose" : "Level",
          "htmlid" : "mw_86649cf8-985f-43a4-9f4e-29ddd1883da1",
          "value" : 
          [ "nonnegative integer" ] },
        
        { "name" : "type",
          "purpose" : "Output type",
          "htmlid" : "mw_bb786e94-5b0f-40cd-a7ca-fdbf544d85f5",
          "value" : 
          [ "'cd'",
            "'ca'",
            "'d'",
            "'a'" ] },
        
        { "name" : "mode",
          "purpose" : "Order of concatenation",
          "htmlid" : "mw_7d5fd7e9-c94a-45e1-baba-13d5b5b94dae",
          "value" : 
          [ "'descend'",
            "'ascend'" ],
          "defaultvalue" : "'descend'" } ],
      "outputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Reconstructed signals",
          "htmlid" : "mw_a02149be-6483-4587-9d58-c1d1be3a6a9a",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "y",
          "purpose" : "Decomposition coefficients",
          "htmlid" : "mw_7a1e96a7-42f0-4335-98cb-b052757155bf",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "a",
          "purpose" : "Reconstructed approximation coefficients",
          "htmlid" : "mw_7ba0ffb4-5b0d-4841-a2f1-486dc3cf03de",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "d",
          "purpose" : "Reconstructed detail coefficients",
          "htmlid" : "mw_2eaad8b8-4c27-4a73-a6ae-42875ceea5d7",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "ca",
          "purpose" : "Extracted approximation coefficients",
          "htmlid" : "mw_b2a271c2-8ffd-4e5f-a231-25a7ab3313ba",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "cd",
          "purpose" : "Extracted detail coefficients",
          "htmlid" : "mw_36a022a8-3590-467c-88f8-de070bca5524",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "cfs",
          "purpose" : "Extracted approximation and detail coefficients",
          "htmlid" : "mw_e09c6292-6825-49e5-9036-1f3f0397a288",
          "value" : 
          [ "real-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "mdwtrec.html#mw_0c1d65de-b672-4054-b388-543884140f0c",
          "open_command" : "openExample('wavelet\/ReconstructMultisignalsExample')",
          "title" : "Reconstruct Multisignals" } ],
      "seealso" : 
      [ 
        { "url" : "mdwtdec.html",
          "name" : "mdwtdec" },
        
        { "url" : "waverec.html",
          "name" : "waverec" } ] },
    { "href" : "ref\/measerr.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "measerr",
          "fcntype" : "simple" } ],
      "refpurpose" : "Quality metrics of signal or image approximation",
      "introduced" : "R2010b",
      "description" : "This MATLAB function returns the peak signal-to-noise ratio, PSNR, mean square error, MSE, maximum squared error, MAXERR, and ratio of squared norms, L2RAT, for an input signal or image, X, and its approximation, XAPP.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[PSNR,MSE,MAXERR,L2RAT] = measerr(X,XAPP)",
            "[PSNR,MSE,MAXERR,L2RAT] = measerr(X,XAPP,BPS)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input signal or image",
          "htmlid" : "mw_5207be86-496e-4226-bea1-0df7f48f53df",
          "value" : 
          [ "real-valued array" ] },
        
        { "name" : "XAPP",
          "purpose" : "Approximation of signal or image",
          "htmlid" : "mw_18286942-d547-4ed9-885f-abef3e4997e3",
          "value" : 
          [ "real-valued array" ] },
        
        { "name" : "BPS",
          "purpose" : "Bits per sample",
          "htmlid" : "mw_2e6f0dfe-8d17-4374-bdf6-1e6b6407026b",
          "value" : 
          [ "8",
            "positive integer" ],
          "defaultvalue" : "8" } ],
      "outputs" : 
      [ 
        { "name" : "PSNR",
          "purpose" : "Peak signal-to-noise ratio",
          "htmlid" : "mw_5d845ec3-b19a-46f2-aa01-9382a2a4ba0b",
          "value" : 
          [ "positive real number" ] },
        
        { "name" : "MSE",
          "purpose" : "Mean square error",
          "htmlid" : "mw_66145aa5-501d-491f-895f-5de3016cdd4e",
          "value" : 
          [ "positive real number" ] },
        
        { "name" : "MAXERR",
          "purpose" : "Maximum absolute squared deviation",
          "htmlid" : "mw_a265f442-acd0-4f46-8027-d11787fa274e",
          "value" : 
          [ "positive real number" ] },
        
        { "name" : "L2RAT",
          "purpose" : "Energy ratio",
          "htmlid" : "mw_a114a9a1-39d0-4264-a573-6857bf63a33f",
          "value" : 
          [ "positive real number" ] } ],
      "examples" : 
      [ 
        { "url" : "measerr.html#mw_e26847e0-6113-4392-b876-5b82006b93df",
          "open_command" : "openExample('wavelet\/MeasureApproximationQualityInAnRGBImageExample')",
          "title" : "Measure Approximation Quality in RGB Image" },
        
        { "url" : "measerr.html#bviiig0",
          "open_command" : "openExample('wavelet\/ApproximationQualityMetricsExample')",
          "title" : "Measure Approximation Quality in Grayscale Image" } ],
      "seealso" : 
      [ 
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wden.html",
          "name" : "wden" },
        
        { "url" : "wdencmp.html",
          "name" : "wdencmp" } ] },
    { "href" : "ref\/mexihat.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mexihat",
          "fcntype" : "simple" } ],
      "refpurpose" : "Mexican hat (Ricker) wavelet",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the Mexican hat wavelet psi evaluated at x, an n-point regular grid in the interval [lb, ub].",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[psi,x] = mexihat(lb,ub,n)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lb",
          "purpose" : "Lower limit",
          "htmlid" : "mw_05e61fb3-6671-4d2a-8997-8cf2f96671d8",
          "value" : 
          [ "real-valued scalar" ] },
        
        { "name" : "ub",
          "purpose" : "Upper limit",
          "htmlid" : "mw_30438ddb-c783-4b5c-9504-f14c972b9725",
          "value" : 
          [ "real-valued scalar" ] },
        
        { "name" : "n",
          "purpose" : "Number of sample points",
          "htmlid" : "mw_99d88952-179e-4149-8ccf-baae253d7782",
          "value" : 
          [ "positive integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "psi",
          "purpose" : "Mexican hat wavelet",
          "htmlid" : "mw_1fb3a68a-c9c5-4901-82ae-f7b8cf0f77d3",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "x",
          "purpose" : "Sampling instants",
          "htmlid" : "mw_f13581f8-a1d7-49f9-afba-b2b311b0eb0e",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "mexihat.html#mw_f6b13a49-5992-42a4-bd59-8b61de55d58d",
          "open_command" : "openExample('wavelet\/CreateMexicanHatWaveletExample')",
          "title" : "Mexican Hat Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "gauswavf.html",
          "name" : "gauswavf" } ] },
    { "href" : "ref\/meyer.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "meyer",
          "fcntype" : "simple" } ],
      "refpurpose" : "Meyer wavelet",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the Meyer scaling and wavelet functions, phi and psi respectively, evaluated at t, an n-point regular grid in the interval [lb, ub].",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[phi,psi,t] = meyer(lb,ub,n)",
            "[phi,t] = meyer(lb,ub,n,'phi')",
            "[psi,t] = meyer(lb,ub,n,'psi')",
            "[phi,psi] = meyer(lb,ub,n,S)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lb",
          "purpose" : "Lower limit",
          "htmlid" : "mw_c9ce0b85-4eb6-4f08-8422-0bafef51a6e5",
          "value" : 
          [ "real-valued scalar" ] },
        
        { "name" : "ub",
          "purpose" : "Upper limit",
          "htmlid" : "mw_00819840-c729-448a-93a2-da797281ea63",
          "value" : 
          [ "real-valued scalar" ] },
        
        { "name" : "n",
          "purpose" : "Number of points",
          "htmlid" : "mw_00f60737-0473-4153-b118-da9cc1c37d71",
          "value" : 
          [ "positive integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "phi",
          "purpose" : "Meyer scaling function",
          "htmlid" : "mw_810b6a3a-399f-4330-95cf-0798e9fbf403",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "psi",
          "purpose" : "Meyer wavelet",
          "htmlid" : "mw_ccc3ea16-32cc-4cec-adbe-f35074629e1a",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "t",
          "purpose" : "Sampling instants",
          "htmlid" : "mw_c027653e-4d90-43e3-bc20-f1b1eca762fd",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "meyer.html#mw_6573836f-f034-4adc-b139-7a2b11dea74d",
          "open_command" : "openExample('wavelet\/PlotMeyerWaveletAndScalingFunctionsExample')",
          "title" : "Plot Meyer Wavelet and Scaling Functions" } ],
      "seealso" : 
      [ 
        { "url" : "meyeraux.html",
          "name" : "meyeraux" },
        
        { "url" : "wavefun.html",
          "name" : "wavefun" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" } ] },
    { "href" : "ref\/meyeraux.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "meyeraux",
          "fcntype" : "simple" } ],
      "refpurpose" : "Meyer wavelet auxiliary function",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns values of the auxiliary function used for Meyer wavelet generation evaluated at the elements of X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Y = meyeraux(X)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Sample points",
          "htmlid" : "mw_2def4060-f58e-4130-bcd5-60d77b4d950e",
          "value" : 
          [ "real-valued vector",
            "real-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "meyeraux.html#mw_cadd55b6-6c8f-47e1-8d8e-dbbe73e6a3d5",
          "open_command" : "openExample('wavelet\/PlotMeyerAuxiliaryFunctionExample')",
          "title" : "Plot Meyer Auxiliary Function" } ],
      "seealso" : 
      [ 
        { "url" : "meyer.html",
          "name" : "meyer" } ] },
    { "href" : "ref\/mlpt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mlpt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multiscale local 1-D polynomial transform",
      "introduced" : "R2017a",
      "description" : "This MATLAB function returns the multiscale local polynomial 1-D transform (MLPT) of input signal x sampled at the sampling instants, t.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[coefs,T,coefsPerLevel,scalingMoments] = mlpt(x,t)",
            "[coefs,T,coefsPerLevel,scalingMoments] = mlpt(x,t,numLevel)",
            "[coefs,T,coefsPerLevel,scalingMoments] = mlpt(x)",
            "[coefs,T,coefsPerLevel,scalingMoments] = mlpt(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "bvkcusg-1-x",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "t",
          "purpose" : "Sampling instants",
          "htmlid" : "bvkcusg-1-t",
          "value" : 
          [ "vector",
            "duration array",
            "datetime array" ] },
        
        { "name" : "numLevel",
          "purpose" : "Number of resolution levels",
          "htmlid" : "bvkcusg-1-numLevel",
          "value" : 
          [ "positive integer" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "DualMoments",
              "purpose" : "Number of dual vanishing moments",
              "htmlid" : "bvkcusg-1-DualMoments",
              "value" : 
              [ "2",
                "3",
                "4" ],
              "defaultvalue" : "2" },
            
            { "name" : "PrimalMoments",
              "purpose" : "Number of primal vanishing moments",
              "htmlid" : "bvmunh3",
              "value" : 
              [ "2",
                "3",
                "4" ],
              "defaultvalue" : "2" },
            
            { "name" : "Prefilter",
              "purpose" : "Prefilter before mlpt",
              "htmlid" : "bvkcusg-1-Prefilter",
              "value" : 
              [ "'Haar'",
                "'UnbalancedHaar'",
                "'None'" ],
              "defaultvalue" : "'Haar'" } ] } ],
      "outputs" : 
      [ 
        { "name" : "coefs",
          "purpose" : "MLPT coefficients",
          "htmlid" : "bvkcusg-1-coefs",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "T",
          "purpose" : "Sampling instants corresponding to output",
          "htmlid" : "bvkcusg-1-T",
          "value" : 
          [ "vector",
            "duration array" ] },
        
        { "name" : "coefsPerLevel",
          "purpose" : "Coefficients per resolution level",
          "htmlid" : "bvkcusg-1-coefsPerLevel",
          "value" : 
          [ "vector" ] },
        
        { "name" : "scalingMoments",
          "purpose" : "Scaling function moments",
          "htmlid" : "bvkcusg-1-scalingMoments",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "mlpt.html#bvkm5gp",
          "open_command" : "openExample('wavelet\/PerformMLPTAnalysisExample')",
          "title" : "Multiscale Local 1-D Polynomial Transform and Inverse Transform" },
        
        { "url" : "mlpt.html#bvk_xm3",
          "open_command" : "openExample('wavelet\/SpecifyNondefaultDualMomentsForTransformExample')",
          "title" : "Specify Nondefault Dual Moments" },
        
        { "url" : "mlpt.html#bvlne1q",
          "open_command" : "openExample('wavelet\/SpecifyNondefaultResolutionLevelsExample')",
          "title" : "Specify Nondefault Resolution Levels" },
        
        { "url" : "mlpt.html#bvk_xo3",
          "open_command" : "openExample('wavelet\/UseDefaultTimeInstantsExample')",
          "title" : "Use Default Time Instants" } ],
      "seealso" : 
      [ 
        { "url" : "imlpt.html",
          "name" : "imlpt" },
        
        { "url" : "mlptdenoise.html",
          "name" : "mlptdenoise" },
        
        { "url" : "mlptrecon.html",
          "name" : "mlptrecon" } ] },
    { "href" : "ref\/mlptdenoise.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mlptdenoise",
          "fcntype" : "simple" } ],
      "refpurpose" : "Denoise signal using multiscale local 1-D polynomial transform",
      "introduced" : "R2017a",
      "description" : "This MATLAB function returns a denoised version of input signal x sampled at the sampling instants, t.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "y = mlptdenoise(x,t)",
            "y = mlptdenoise(x,t,numLevel)",
            "y = mlptdenoise(___,Name,Value)",
            "[y,T] = mlptdenoise(___)",
            "[y,T,thresholdedCoefs] = mlptdenoise(___)",
            "[y,T,thresholdedCoefs,originalCoefs] = mlptdenoise(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "bvkoo2y-1-x",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "t",
          "purpose" : "Sampling instants",
          "htmlid" : "bvkoo2y-1-t",
          "value" : 
          [ "vector",
            "duration array",
            "datetime array" ] },
        
        { "name" : "numLevel",
          "purpose" : "Number of resolution levels",
          "htmlid" : "bvkoo2y-1-numLevel",
          "value" : 
          [ "2",
            "positive integer" ],
          "defaultvalue" : "2" },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "DualMoments",
              "purpose" : "Number of dual vanishing moments",
              "htmlid" : "bvkoo2y-1-DualMoments",
              "value" : 
              [ "2",
                "3",
                "4" ],
              "defaultvalue" : "2" },
            
            { "name" : "PrimalMoments",
              "purpose" : "Number of primal vanishing moments",
              "htmlid" : "bvkoo2y-1-PrimalMoments",
              "value" : 
              [ "2",
                "3",
                "4" ],
              "defaultvalue" : "2" },
            
            { "name" : "Prefilter",
              "purpose" : "Prefilter before mlpt",
              "htmlid" : "bvkoo2y-1-Prefilter",
              "value" : 
              [ "'Haar'",
                "'UnbalancedHaar'" ],
              "defaultvalue" : "'Haar'" },
            
            { "name" : "DenoisingMethod",
              "purpose" : "Denoising method applied to MLPT detail coefficients",
              "htmlid" : "bvkoo2y-1-DenoisingMethod",
              "value" : 
              [ "'Bayesian'",
                "'Median'",
                "'SURE'",
                "'FDR'" ],
              "defaultvalue" : "'Bayesian'" } ] } ],
      "outputs" : 
      [ 
        { "name" : "y",
          "purpose" : "Denoised version of the input signal",
          "htmlid" : "bvkoo2y-1-y",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "T",
          "purpose" : "Sampling instants corresponding to output",
          "htmlid" : "bvkoo2y-1-T",
          "value" : 
          [ "vector",
            "duration array" ] },
        
        { "name" : "thresholdedCoefs",
          "purpose" : "Thresholded MLPT coefficients",
          "htmlid" : "bvkoo2y-1-thresholdedCoefs",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "originalCoefs",
          "purpose" : "Original MLPT coefficients",
          "htmlid" : "bvkoo2y-1-originalCoefs",
          "value" : 
          [ "vector",
            "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "mlptdenoise.html#bvlbnh4",
          "open_command" : "openExample('wavelet\/SpecifyNondefaultDenoisingMethodExample')",
          "title" : "Specify Nondefault Denoising Method" },
        
        { "url" : "mlptdenoise.html#bvkoo2z-7",
          "open_command" : "openExample('wavelet\/DenoiseUsingMultiscaleLocalPolynomialTransformExample')",
          "title" : "Denoise Using Multiscale Local Polynomial Transform" },
        
        { "url" : "mlptdenoise.html#bvlbmz3",
          "open_command" : "openExample('wavelet\/SpecifyNondefaultDenoisingLevelExample')",
          "title" : "Specify Nondefault Denoising Level" },
        
        { "url" : "mlptdenoise.html#bvlvu_x",
          "open_command" : "openExample('wavelet\/CompareThresholdedAndNonthresholdedCoefficientsExample')",
          "title" : "Compare Thresholded and Nonthresholded Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "imlpt.html",
          "name" : "imlpt" },
        
        { "url" : "mlpt.html",
          "name" : "mlpt" },
        
        { "url" : "mlptrecon.html",
          "name" : "mlptrecon" } ] },
    { "href" : "ref\/mlptrecon.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mlptrecon",
          "fcntype" : "simple" } ],
      "refpurpose" : "Reconstruct signal using inverse multiscale local 1-D polynomial transform",
      "introduced" : "R2017a",
      "description" : "This MATLAB function returns an approximation to the inverse multiscale 1-D polynomial transform (MLPT) of coefs.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "y = mlptrecon(type,coefs,T,coefsPerLevel,scalingMoments,reconstructionLevel)",
            "y = mlptrecon(___,DualMoments=dm)" ] } ],
      "inputs" : 
      [ 
        { "name" : "type",
          "purpose" : "Type of coefficients",
          "htmlid" : "bvkoqa9-1-type",
          "value" : 
          [ "'a'",
            "'d'" ] },
        
        { "name" : "coefs",
          "purpose" : "MLPT coefficients",
          "htmlid" : "bvkoqa9-1-coefs",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "T",
          "purpose" : "Sampling instants corresponding to output",
          "htmlid" : "bvkoqa9-1-T",
          "value" : 
          [ "vector",
            "duration array" ] },
        
        { "name" : "coefsPerLevel",
          "purpose" : "Coefficients per resolution level",
          "htmlid" : "bvkoqa9-1-coefsPerLevel",
          "value" : 
          [ "vector" ] },
        
        { "name" : "scalingMoments",
          "purpose" : "Scaling function moments",
          "htmlid" : "bvkoqa9-1-scalingMoments",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "reconstructionLevel",
          "purpose" : "Resolution level used for reconstruction",
          "htmlid" : "bvkoqa9-1-reconstructionLevel",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "dm",
          "purpose" : "Dual vanishing moments",
          "htmlid" : "mw_a510d7aa-5399-4d1f-a487-33aef8aa537e",
          "value" : 
          [ "2",
            "3",
            "4" ],
          "defaultvalue" : "2" } ],
      "outputs" : 
      [ 
        { "name" : "y",
          "purpose" : "Reconstructed approximation or details of signal",
          "htmlid" : "bvkoqa9-1-y",
          "value" : 
          [ "vector",
            "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "mlptrecon.html#bvlble1",
          "open_command" : "openExample('wavelet\/DetectAndLocalizeHighFrequencyContentExample')",
          "title" : "Detect and Localize High-Frequency Content" },
        
        { "url" : "mlptrecon.html#bvk_05l",
          "open_command" : "openExample('wavelet\/ApproximateDataByReducingCoefficientsExample')",
          "title" : "Approximate Data by Choosing Reconstruction Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "imlpt.html",
          "name" : "imlpt" },
        
        { "url" : "mlpt.html",
          "name" : "mlpt" },
        
        { "url" : "mlptdenoise.html",
          "name" : "mlptdenoise" } ] },
    { "href" : "ref\/modwpt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "modwpt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Maximal overlap discrete wavelet packet transform",
      "introduced" : "R2016a",
      "description" : "This MATLAB function returns the terminal nodes for the maximal overlap discrete wavelet packet transform (MODWPT) for the 1-D real-valued signal, x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wpt = modwpt(x)",
            "wpt = modwpt(x,wname)",
            "wpt = modwpt(x,lo,hi)",
            "wpt = modwpt(___,lev)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[wpt,packetlevs] = modwpt(___)",
            "[wpt,packetlevs,cfreq] = modwpt(___)",
            "[wpt,packetlevs,cfreq,energy] = modwpt(___)",
            "[wpt,packetlevs,cfreq,energy,relenergy] = modwpt(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = modwpt(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "bu2_qza-x",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "bu2_qza-wname",
          "value" : 
          [ "\"fk18\"",
            "character vector",
            "string scalar" ],
          "defaultvalue" : "\"fk18\"" },
        
        { "name" : "lo,hi",
          "purpose" : "Filters",
          "htmlid" : "mw_3578c972-5a09-4891-8584-edc28d6a7310",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "lev",
          "purpose" : "Transform level",
          "htmlid" : "bu2_qza-lev",
          "value" : 
          [ "positive integer" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "FullTree",
              "purpose" : "Full packet tree",
              "htmlid" : "bu2_qza-FullTree",
              "value" : 
              [ "false",
                "true" ],
              "defaultvalue" : "false" },
            
            { "name" : "TimeAlign",
              "purpose" : "Signal time alignment",
              "htmlid" : "bu2_qza-TimeAlign",
              "value" : 
              [ "false",
                "true" ],
              "defaultvalue" : "false" } ] } ],
      "outputs" : 
      [ 
        { "name" : "wpt",
          "purpose" : "Wavelet packet transform",
          "htmlid" : "bu2_qza-wpt",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "packetlevs",
          "purpose" : "Transform levels",
          "htmlid" : "bu2_qza-packetlevs",
          "value" : 
          [ "vector" ] },
        
        { "name" : "cfreq",
          "purpose" : "Center frequencies of passbands",
          "htmlid" : "bu2_qza-cfreq",
          "value" : 
          [ "vector" ] },
        
        { "name" : "energy",
          "purpose" : "Energy of the wavelet packet coefficients",
          "htmlid" : "bu2_qza-energy",
          "value" : 
          [ "vector" ] },
        
        { "name" : "relenergy",
          "purpose" : "Relative energy",
          "htmlid" : "bu2_qza-relenergy",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "modwpt.html#bu2_rk8-2",
          "open_command" : "openExample('wavelet\/MODWPTUsingDefaultWaveletExample')",
          "title" : "MODWPT Using Default Wavelet" },
        
        { "url" : "modwpt.html#bu3j9ed-1",
          "open_command" : "openExample('wavelet\/MODWPTUsingDaubechiesTwoExample')",
          "title" : "MODWPT Using Daubechies Extremal Phase Wavelet with Two Vanishing Moments" },
        
        { "url" : "modwpt.html#bu3j9a7-1",
          "open_command" : "openExample('wavelet\/MODWPTFullPacketTreeAndPassbandCenterFrequenciesExample')",
          "title" : "MODWPT Full Packet Tree and Passband Center Frequencies" },
        
        { "url" : "modwpt.html#bu3j9a9-1",
          "open_command" : "openExample('wavelet\/MODWPTEnergyAndRelativeEnergyExample')",
          "title" : "MODWPT Energy and Relative Energy" },
        
        { "url" : "modwpt.html#bu3j742-1",
          "open_command" : "openExample('wavelet\/TimeAlignedMODWPTExample')",
          "title" : "Time-Aligned MODWPT" } ],
      "seealso" : 
      [ 
        { "url" : "imodwpt.html",
          "name" : "imodwpt" },
        
        { "url" : "modwptdetails.html",
          "name" : "modwptdetails" },
        
        { "url" : "dwpt.html",
          "name" : "dwpt" } ] },
    { "href" : "ref\/modwptdetails.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "modwptdetails",
          "fcntype" : "simple" } ],
      "refpurpose" : "Maximal overlap discrete wavelet packet transform details",
      "introduced" : "R2016a",
      "description" : "This MATLAB function returns the maximal overlap discrete wavelet packet transform (MODWPT) details for the 1-D real-valued signal, x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "w = modwptdetails(x)",
            "w = modwptdetails(x,wname)",
            "w = modwptdetails(x,lo,hi)",
            "w = modwptdetails(___,lev)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[w,packetlevs] = modwptdetails(___)",
            "[w,packetlevs,cfreq] = modwptdetails(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = modwptdetails(___,'FullTree',tf)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "bu3xmih-1-x",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "bu3xmih-1-wname",
          "value" : 
          [ "\"fk18\"",
            "character vector",
            "string scalar" ],
          "defaultvalue" : "\"fk18\"" },
        
        { "name" : "lo,hi",
          "purpose" : "Filters",
          "htmlid" : "mw_257c694f-3e60-4c94-af10-ae59d386867c",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "lev",
          "purpose" : "Transform level",
          "htmlid" : "bu3xmih-1-lev",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "tf",
          "purpose" : "Return tree option",
          "htmlid" : "mw_610aa0ce-c51f-49aa-bfae-b8aa157202a6",
          "value" : 
          [ "false",
            "true" ],
          "defaultvalue" : "false" } ],
      "outputs" : 
      [ 
        { "name" : "w",
          "purpose" : "Wavelet packet tree details",
          "htmlid" : "bu3xmih-1-w",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "packetlevs",
          "purpose" : "Transform levels",
          "htmlid" : "bu3xmih-1-packetlevs",
          "value" : 
          [ "vector" ] },
        
        { "name" : "cfreq",
          "purpose" : "Center frequencies of passbands",
          "htmlid" : "bu3xmih-1-cfreq",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "modwptdetails.html#bu3xmii-10",
          "open_command" : "openExample('wavelet\/MODWPTDetailsUsingDefaultWaveletExample')",
          "title" : "MODWPT Details Using Default Wavelet" },
        
        { "url" : "modwptdetails.html#bu4ky4m-1",
          "open_command" : "openExample('wavelet\/MODWPTDetailsForTwoSineWavesExample')",
          "title" : "MODWPT Details for Two Sine Waves" },
        
        { "url" : "modwptdetails.html#bu3xmii-11",
          "open_command" : "openExample('wavelet\/MODWPTDetailsForNoisySineWaveExample')",
          "title" : "MODWPT Details for Noisy Sine Wave" },
        
        { "url" : "modwptdetails.html#bu3xmii-12",
          "open_command" : "openExample('wavelet\/MODWPTDetailsUsingScalingAndWaveletFiltersExample')",
          "title" : "MODWPT Details Using Scaling and Wavelet Filters" },
        
        { "url" : "modwptdetails.html#bu3xmii-14",
          "open_command" : "openExample('wavelet\/MODWPTDetailsForFullPacketTreeExample')",
          "title" : "MODWPT Details for Full Packet Tree" } ],
      "seealso" : 
      [ 
        { "url" : "modwpt.html",
          "name" : "modwpt" },
        
        { "url" : "imodwpt.html",
          "name" : "imodwpt" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wavemngr.html",
          "name" : "wavemngr" } ] },
    { "href" : "ref\/modwt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "modwt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Maximal overlap discrete wavelet transform",
      "introduced" : "R2015b",
      "description" : "This MATLAB function returns the maximal overlap discrete wavelet transform (MODWT) of x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "w = modwt(x)",
            "w = modwt(x,wname)",
            "w = modwt(x,Lo,Hi)",
            "w = modwt(___,lev)",
            "w = modwt(___,'reflection')",
            "w = modwt(___,TimeAlign=alignflag)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "buuu3sz-x",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_9238e4f1-9532-4dc8-84fe-bee5f72ae1ad",
          "value" : 
          [ "\"sym4\"",
            "character vector",
            "string scalar" ],
          "defaultvalue" : "\"sym4\"" },
        
        { "name" : "Lo,Hi",
          "purpose" : "Filters",
          "htmlid" : "buuu3sz-Lo",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "lev",
          "purpose" : "Transform level",
          "htmlid" : "buuu3sz-lev",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "alignflag",
          "purpose" : "Time align coefficients logical",
          "htmlid" : "mw_cf6e978b-2817-4346-ac2c-8d056da72794",
          "value" : 
          [ "false or 0",
            "true or 1" ],
          "defaultvalue" : "false or 0" } ],
      "outputs" : 
      [ 
        { "name" : "w",
          "purpose" : "MODWT transform",
          "htmlid" : "buuu3sz-w",
          "value" : 
          [ "matrix",
            "3-D array" ] } ],
      "examples" : 
      [ 
        { "url" : "modwt.html#buux9yh",
          "open_command" : "openExample('wavelet\/MODWTOfECGSignalExample')",
          "title" : "MODWT Using Default Wavelet" },
        
        { "url" : "modwt.html#buux9yz",
          "open_command" : "openExample('wavelet\/MODWTDaubechiesExtremalPhaseWaveletExample')",
          "title" : "MODWT Using Daubechies Extremal Phase Wavelet with Two Vanishing Moments" },
        
        { "url" : "modwt.html#buux_hw",
          "open_command" : "openExample('wavelet\/MODWTUsingScalingAndWaveletFiltersExample')",
          "title" : "MODWT Using Scaling and Wavelet Filters" },
        
        { "url" : "modwt.html#buux_p7",
          "open_command" : "openExample('wavelet\/MODWTToASpecifiedLevelExample')",
          "title" : "MODWT to a Specified Level" },
        
        { "url" : "modwt.html#buux_3p",
          "open_command" : "openExample('wavelet\/MODWTWithReflectionBoundaryExample')",
          "title" : "MODWT with Reflection Boundary" },
        
        { "url" : "modwt.html#mw_06957d5e-ab9d-49fc-9414-65206dd18d08",
          "open_command" : "openExample('wavelet\/TimeAlignMODWTAnalysisExample')",
          "title" : "Time Align MODWT Analysis" },
        
        { "url" : "modwt.html#mw_7f4d20a4-8e25-44d2-8c02-d455d97834bd",
          "open_command" : "openExample('wavelet\/MODWTOfMultisignalExample')",
          "title" : "MODWT of Multisignal" },
        
        { "url" : "modwt.html#mw_fb46bf5c-f36b-44d5-bc60-78f3cdcdf2e7",
          "open_command" : "openExample('wavelet\/ComparingMODWTandMODWTMRAExample')",
          "title" : "Comparing MODWT and MODWTMRA" } ],
      "seealso" : 
      [ 
        { "url" : "waveletsignalanalyzer-app.html",
          "name" : "Wavelet Signal Analyzer" },
        
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "dlmodwt.html",
          "name" : "dlmodwt" },
        
        { "url" : "imodwt.html",
          "name" : "imodwt" },
        
        { "url" : "modwtmra.html",
          "name" : "modwtmra" },
        
        { "url" : "modwtcorr.html",
          "name" : "modwtcorr" },
        
        { "url" : "modwtvar.html",
          "name" : "modwtvar" },
        
        { "url" : "modwtxcorr.html",
          "name" : "modwtxcorr" },
        
        { "url" : "modwtlayer.html",
          "name" : "modwtLayer" } ] },
    { "href" : "ref\/modwtcorr.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "modwtcorr",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multiscale correlation using the maximal overlap discrete wavelet transform",
      "introduced" : "R2015b",
      "description" : "This MATLAB function returns the wavelet correlation by scale for the maximal overlap discrete wavelet transforms (MODWTs) specified in w1 and w2.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wcorr = modwtcorr(w1,w2)",
            "wcorr = modwtcorr(w1,w2,wav)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[wcorr,wcorrci] = modwtcorr(___)",
            "[wcorr,wcorrci] = modwtcorr(___,conflevel)",
            "[wcorr,wcorrci,pval] = modwtcorr(___)",
            "[wcorr,wcorrci,pval,nj] = modwtcorr(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "wcorrtable = modwtcorr(___,'table')" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = modwtcorr(___,'reflection')" ] },
        
        { "title" : "",
          "syntax" : 
          [ "modwtcorr(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "w1",
          "purpose" : "MODWT transform of signal 1",
          "htmlid" : "buu9xgh-w1",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "w2",
          "purpose" : "MODWT transform of signal 2",
          "htmlid" : "buu9xgh-w2",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "wav",
          "purpose" : "Wavelet",
          "htmlid" : "buu9xgh-wav",
          "value" : 
          [ "'sym4'",
            "character vector",
            "string scalar",
            "positive even scalar" ],
          "defaultvalue" : "'sym4'" },
        
        { "name" : "conflevel",
          "purpose" : "Confidence level",
          "htmlid" : "buu9xgh-conflevel",
          "value" : 
          [ "0.95",
            "positive scalar less than 1" ],
          "defaultvalue" : "0.95" } ],
      "outputs" : 
      [ 
        { "name" : "wcorr",
          "purpose" : "Correlation coefficients by scale",
          "htmlid" : "buu9xgh-wcorr",
          "value" : 
          [ "vector" ] },
        
        { "name" : "wcorrci",
          "purpose" : "Confidence intervals by scale",
          "htmlid" : "buu9xgh-wcorrci",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "pval",
          "purpose" : "P-values for null hypothesis test",
          "htmlid" : "buu9xgh-pval",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "nj",
          "purpose" : "Number of nonboundary coefficients",
          "htmlid" : "buu9xgh-nj",
          "value" : 
          [ "vector" ] },
        
        { "name" : "wcorrtable",
          "purpose" : "Correlation table",
          "htmlid" : "buu9xgh-wcorrtable",
          "value" : 
          [ "table" ] } ],
      "examples" : 
      [ 
        { "url" : "modwtcorr.html#buu9xkh-2",
          "open_command" : "openExample('wavelet\/DMUSDExchangeRatesByScaleExample')",
          "title" : "Correlation by Scale" },
        
        { "url" : "modwtcorr.html#buvynec",
          "open_command" : "openExample('wavelet\/MultiscaleCorrelationOfAtmosphericPressureDataExample')",
          "title" : "Multiscale Correlation" },
        
        { "url" : "modwtcorr.html#buvyph2",
          "open_command" : "openExample('wavelet\/ConfidenceIntervalsForCorrelationExample')",
          "title" : "Confidence Intervals for Correlation" },
        
        { "url" : "modwtcorr.html#buvyq7t",
          "open_command" : "openExample('wavelet\/ConfidenceIntervalsWith099CoverageProbabilityExample')",
          "title" : "Confidence Intervals with 0.99 Coverage Probability" },
        
        { "url" : "modwtcorr.html#buvysh8",
          "open_command" : "openExample('wavelet\/PvaluesForCorrelationExample')",
          "title" : "P-values for Correlation" },
        
        { "url" : "modwtcorr.html#buvytfe",
          "open_command" : "openExample('wavelet\/MultiscaleCorrelationInTabularFormExample')",
          "title" : "Multiscale Correlation in Tabular Form" },
        
        { "url" : "modwtcorr.html#buvyw06",
          "open_command" : "openExample('wavelet\/CorrelationWithReflectionBoundaryConditionsExample')",
          "title" : "Correlation with Reflection Boundary Conditions" },
        
        { "url" : "modwtcorr.html#buvyxhv",
          "open_command" : "openExample('wavelet\/PlotCorrelationWithConfidenceIntervalsExample')",
          "title" : "Plot Correlation with Confidence Intervals" } ],
      "seealso" : 
      [ 
        { "url" : "modwtxcorr.html",
          "name" : "modwtxcorr" },
        
        { "url" : "modwtvar.html",
          "name" : "modwtvar" },
        
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "modwtmra.html",
          "name" : "modwtmra" },
        
        { "url" : "imodwt.html",
          "name" : "imodwt" } ] },
    { "href" : "ref\/modwtlayer.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "modwtLayer" },
        
        { "type" : "function",
          "name" : "modwtLayer",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Maximal overlap discrete wavelet transform (MODWT) layer",
      "introduced" : "R2022b",
      "description" : "A MODWT layer computes the MODWT and MODWT multiresolution analysis (MRA) of the input.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "layer = modwtLayer",
            "layer = modwtLayer(Name=Value)" ] } ],
      "classpropertygroup" : 
      [ 
        { "title" : "MODWT",
          "classproperty" : 
          [ 
            { "name" : "Wavelet",
              "purpose" : "Orthogonal wavelet",
              "htmlid" : "mw_29a204df-4ff7-459f-aed8-bbfe7ee674da",
              "value" : 
              [ "\"sym4\"",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "\"sym4\"" },
            
            { "name" : "LowpassFilter",
              "purpose" : "Initial wavelet filter pair",
              "htmlid" : "mw_ba2819de-25fe-4a28-b9da-5d7dd14c2e39",
              "value" : 
              [ "even-length real-valued vectors" ] },
            
            { "name" : "HighpassFilter",
              "purpose" : "Initial wavelet filter pair",
              "htmlid" : "mw_ba2819de-25fe-4a28-b9da-5d7dd14c2e39",
              "value" : 
              [ "even-length real-valued vectors" ] },
            
            { "name" : "Level",
              "purpose" : "Transform level",
              "htmlid" : "mw_dd8181ea-6ac6-46c9-b230-0552cf8d655d",
              "value" : 
              [ "5",
                "positive integer" ],
              "defaultvalue" : "5" },
            
            { "name" : "Boundary",
              "purpose" : "Boundary condition",
              "htmlid" : "mw_f2ff7ba0-08c1-4dc8-a6d4-655d57222270",
              "value" : 
              [ "\"periodic\"",
                "\"reflection\"" ],
              "defaultvalue" : "\"periodic\"" },
            
            { "name" : "SelectedLevels",
              "purpose" : "Selected levels",
              "htmlid" : "mw_038d253b-fc8f-4ae9-8a6c-d0cbcd84f851",
              "value" : 
              [ "1:Level",
                "vector" ],
              "defaultvalue" : "1:Level" },
            
            { "name" : "IncludeLowpass",
              "purpose" : "Include lowpass coefficients",
              "htmlid" : "mw_b7b9aa76-1ee8-4e7c-a208-b9c2d12d422e",
              "value" : 
              [ "true or 1",
                "false or 0" ],
              "defaultvalue" : "true or 1" },
            
            { "name" : "AggregateLevels",
              "purpose" : "Aggregate selected levels",
              "htmlid" : "mw_10720279-75d7-4030-a42f-79549423f2c9",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" },
            
            { "name" : "Algorithm",
              "purpose" : "Algorithm",
              "htmlid" : "mw_0645bb3a-946d-408c-b080-20dd5d586fc5",
              "value" : 
              [ "\"MODWTMRA\"",
                "\"MODWT\"" ],
              "defaultvalue" : "\"MODWTMRA\"" } ] },
        
        { "title" : "Layer",
          "classproperty" : 
          [ 
            { "name" : "WeightLearnRateFactor",
              "purpose" : "Multiplier for weight learning rate",
              "htmlid" : "mw_6481572d-12a9-4833-93d5-5cdf446f4293",
              "value" : 
              [ "0",
                "nonnegative scalar" ],
              "defaultvalue" : "0" },
            
            { "name" : "Name",
              "purpose" : "Layer name",
              "htmlid" : "mw_660e6fbe-2604-49eb-9c9f-c05b6cff4b59_sep_shared-cnn-layer-name",
              "value" : 
              [ "''",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "''" },
            
            { "name" : "NumInputs",
              "purpose" : "Number of inputs",
              "htmlid" : "mw_660e6fbe-2604-49eb-9c9f-c05b6cff4b59_sep_mw_c53eb875-2724-4b88-bdf8-40f8b9cc5dd6",
              "value" : 
              [ "1" ],
              "defaultvalue" : "1" },
            
            { "name" : "InputNames",
              "purpose" : "Input names",
              "htmlid" : "mw_660e6fbe-2604-49eb-9c9f-c05b6cff4b59_sep_mw_ee6c4945-1b30-43e4-b85e-02a30ae516cf",
              "value" : 
              [ "{\"in\"}" ],
              "defaultvalue" : "{\"in\"}" },
            
            { "name" : "NumOutputs",
              "purpose" : "Number of outputs",
              "htmlid" : "mw_660e6fbe-2604-49eb-9c9f-c05b6cff4b59_sep_mw_9267d37d-5b0f-4e51-b3e9-6e11522a81b8",
              "value" : 
              [ "1" ],
              "defaultvalue" : "1" },
            
            { "name" : "OutputNames",
              "purpose" : "Output names",
              "htmlid" : "mw_660e6fbe-2604-49eb-9c9f-c05b6cff4b59_sep_mw_1f7d6a7c-840e-458c-9128-bce094eab496",
              "value" : 
              [ "{'out'}" ],
              "defaultvalue" : "{'out'}" } ] } ],
      "examples" : 
      [ 
        { "url" : "modwtlayer.html#mw_832fb8c0-b21b-49a8-bb88-bf05548a0813",
          "open_command" : "openExample('deeplearning_shared\/UseModwtLayerInDeepLearningNetworkExample')",
          "title" : "Use modwtLayer in Deep Learning Network" },
        
        { "url" : "modwtlayer.html#mw_5331ff22-0f2a-42e6-ab6f-554eeeadb346",
          "open_command" : "openExample('deeplearning_shared\/CompareModwtLayerOutputWithModwtAndModwtmraOutputsExample')",
          "title" : "Compare modwtLayer Output with modwt and modwtmra Outputs" },
        
        { "url" : "modwtlayer.html#mw_ff3a8128-ebc9-4dd0-bc15-c17ffc2afb31",
          "open_command" : "openExample('wavelet\/ComparingMODWTandMODWTMRAExample')",
          "title" : "Comparing MODWT and MODWTMRA" } ],
      "seealso" : 
      [ 
        { "url" : "..\/..\/deeplearning\/ref\/deepnetworkdesigner-app.html",
          "name" : "Deep Network Designer" },
        
        { "url" : "dlmodwt.html",
          "name" : "dlmodwt" },
        
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "modwtmra.html",
          "name" : "modwtmra" },
        
        { "url" : "dlcwt.html",
          "name" : "dlcwt" },
        
        { "url" : "cwtlayer.html",
          "name" : "cwtLayer" },
        
        { "url" : "..\/..\/signal\/ref\/stftlayer.html",
          "name" : "stftLayer" },
        
        { "url" : "..\/..\/deeplearning\/ref\/dlarray.html",
          "name" : "dlarray" },
        
        { "url" : "..\/..\/deeplearning\/ref\/dlnetwork.html",
          "name" : "dlnetwork" } ] },
    { "href" : "ref\/modwtmra.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "modwtmra",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multiresolution analysis based on MODWT",
      "introduced" : "R2015b",
      "description" : "This MATLAB function returns the multiresolution analysis (MRA) of the maximal overlap discrete wavelet transform (MODWT) matrix, w.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "mra = modwtmra(w)",
            "mra = modwtmra(w,wname)",
            "mra = modwtmra(w,Lo,Hi)",
            "mra = modwtmra(___,'reflection')" ] } ],
      "inputs" : 
      [ 
        { "name" : "w",
          "purpose" : "MODWT transform",
          "htmlid" : "buuz1a3-1-w",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "wname",
          "purpose" : "Synthesis wavelet",
          "htmlid" : "buuz1a3-1-wname",
          "value" : 
          [ "'sym4'",
            "character vector",
            "string scalar" ],
          "defaultvalue" : "'sym4'" },
        
        { "name" : "Lo,Hi",
          "purpose" : "Filters",
          "htmlid" : "buuz1a3-1-Lo",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "outputs" : 
      [ 
        { "name" : "mra",
          "purpose" : "Multiresolution analysis",
          "htmlid" : "buuz1a3-1-mra",
          "value" : 
          [ "matrix",
            "3-D array" ] } ],
      "examples" : 
      [ 
        { "url" : "modwtmra.html#buz4apn-1",
          "open_command" : "openExample('wavelet\/PerfectReconstructionWithTheMODWTMRAExample')",
          "title" : "Perfect Reconstruction with the MODWTMRA" },
        
        { "url" : "modwtmra.html#buuz1a4-6",
          "open_command" : "openExample('wavelet\/MRAOfECGSignalExample')",
          "title" : "MRA Using Non-Default Wavelet" },
        
        { "url" : "modwtmra.html#buuz1a4-7",
          "open_command" : "openExample('wavelet\/MRAOfSouthernOscillationIndexDataExample')",
          "title" : "MRA Using the Default Wavelet" },
        
        { "url" : "modwtmra.html#buuz1a4-8",
          "open_command" : "openExample('wavelet\/MRAOfDeutscheMarkUSDollarExchangeDataExample')",
          "title" : "MRA Using Minimum Bandwidth Scaling and Wavelet Filters" },
        
        { "url" : "modwtmra.html#mw_731e6933-158f-4bc2-92d4-a8bd1fa1362e",
          "open_command" : "openExample('wavelet\/MRAUsingFejerKorovkinFiltersExample')",
          "title" : "MRA Using Fejér-Korovkin Filters" },
        
        { "url" : "modwtmra.html#buuz1a4-9",
          "open_command" : "openExample('wavelet\/MRAUsingReflectionBoundaryExample')",
          "title" : "MRA Using Reflection Boundary" },
        
        { "url" : "modwtmra.html#mw_6daed1af-4def-45ff-8130-045abccbf579",
          "open_command" : "openExample('wavelet\/MRAOfMultisignalExample')",
          "title" : "MRA of Multisignal" },
        
        { "url" : "modwtmra.html#mw_6d004016-5688-4ce4-ab86-887d5146f39c",
          "open_command" : "openExample('wavelet\/ComparingMODWTandMODWTMRAExample')",
          "title" : "Comparing MODWT and MODWTMRA" } ],
      "seealso" : 
      [ 
        { "url" : "waveletsignalanalyzer-app.html",
          "name" : "Wavelet Signal Analyzer" },
        
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "dlmodwt.html",
          "name" : "dlmodwt" },
        
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "imodwt.html",
          "name" : "imodwt" },
        
        { "url" : "modwtlayer.html",
          "name" : "modwtLayer" } ] },
    { "href" : "ref\/modwtvar.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "modwtvar",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multiscale variance of maximal overlap discrete wavelet transform",
      "introduced" : "R2015b",
      "description" : "This MATLAB function returns unbiased estimates of the wavelet variance by scale for the maximal overlap discrete wavelet transform (MODWT).",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wvar = modwtvar(w)",
            "wvar = modwtvar(w,wname)",
            "[wvar,wvarci] = modwtvar(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = modwtvar(w,wname,___,conflevel)",
            "[___] = modwtvar(w,wname,___,Name,Value)",
            "[wvar,wvarci,nj] = modwtvar(w,wname,___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "wvartable = modwtvar(w,wname,\"table\")" ] },
        
        { "title" : "",
          "syntax" : 
          [ "modwtvar(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "w",
          "purpose" : "MODWT transform matrix",
          "htmlid" : "bux4vee-1-w",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "bux4vee-1-wname",
          "value" : 
          [ "\"sym4\"",
            "character vector",
            "string scalar",
            "positive even scalar" ],
          "defaultvalue" : "\"sym4\"" },
        
        { "name" : "conflevel",
          "purpose" : "Confidence level",
          "htmlid" : "bux4vee-1-conflevel",
          "value" : 
          [ "0.95",
            "real scalar greater than 0 and less than 1" ],
          "defaultvalue" : "0.95" },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "EstimatorType",
              "purpose" : "Estimator",
              "htmlid" : "bux4vee-1-EstimatorType",
              "value" : 
              [ "\"unbiased\"",
                "\"biased\"" ],
              "defaultvalue" : "\"unbiased\"" },
            
            { "name" : "ConfidenceMethod",
              "purpose" : "Confidence method",
              "htmlid" : "bux4vee-1-ConfidenceMethod",
              "value" : 
              [ "\"chi2eta3\"",
                "\"chi2eta1\"",
                "\"gaussian\"" ],
              "defaultvalue" : "\"chi2eta3\"" },
            
            { "name" : "Boundary",
              "purpose" : "Boundary condition",
              "htmlid" : "bux4vee-1-Boundary",
              "value" : 
              [ "\"periodic\"",
                "\"reflection\"" ],
              "defaultvalue" : "\"periodic\"" } ] } ],
      "outputs" : 
      [ 
        { "name" : "wvar",
          "purpose" : "Wavelet variance estimates",
          "htmlid" : "bux4vee-1-wvar",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "wvarci",
          "purpose" : "Confidence intervals for each variance estimate",
          "htmlid" : "bux4vee-1-wvarci",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "nj",
          "purpose" : "Number of coefficients by level",
          "htmlid" : "bux4vee-1-nj",
          "value" : 
          [ "vector" ] },
        
        { "name" : "wvartable",
          "purpose" : "Variance table",
          "htmlid" : "bux4vee-1-wvartable",
          "value" : 
          [ "table" ] } ],
      "examples" : 
      [ 
        { "url" : "modwtvar.html#buytgix",
          "open_command" : "openExample('wavelet\/WaveletVarianceExample')",
          "title" : "Wavelet Variance Using Default Wavelet" },
        
        { "url" : "modwtvar.html#buytgpj-1",
          "open_command" : "openExample('wavelet\/WaveletVarianceUsingSpecifiedWaveletTypeExample')",
          "title" : "Wavelet Variance Using Specified Wavelet" },
        
        { "url" : "modwtvar.html#buytglo-1",
          "open_command" : "openExample('wavelet\/VarianceEstConfIntUsingMODWTVARExample')",
          "title" : "Variance Estimates and Confidence Intervals Using MODWTVAR" },
        
        { "url" : "modwtvar.html#buytgl2-1",
          "open_command" : "openExample('wavelet\/WaveletConfidenceIntervalsExample')",
          "title" : "Wavelet Confidence Intervals" },
        
        { "url" : "modwtvar.html#buytgl3-1",
          "open_command" : "openExample('wavelet\/DefaultvsGaussianConfIntervalsExample')",
          "title" : "Compare Chi2Eta2 and Gaussian Confidence Intervals" },
        
        { "url" : "modwtvar.html#buytgl4-1",
          "open_command" : "openExample('wavelet\/BiasedvsUnbiasedEstimatorsWaveletVarianceExample')",
          "title" : "Compare Number of Coefficients for Unbiased and Biased Variance Estimates" },
        
        { "url" : "modwtvar.html#buytgl4-1_1",
          "open_command" : "openExample('wavelet\/WaveletVarianceEstimateTableOutputExample')",
          "title" : "Table of Wavelet Variance Estimates Using Gaussian Confidence Intervals" } ],
      "seealso" : 
      [ 
        { "url" : "modwtcorr.html",
          "name" : "modwtcorr" },
        
        { "url" : "modwtxcorr.html",
          "name" : "modwtxcorr" },
        
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "modwtmra.html",
          "name" : "modwtmra" },
        
        { "url" : "imodwt.html",
          "name" : "imodwt" } ] },
    { "href" : "ref\/modwtxcorr.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "modwtxcorr",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet cross-correlation sequence estimates using the maximal overlap discrete wavelet transform (MODWT)",
      "introduced" : "R2015b",
      "description" : "This MATLAB function returns the wavelet cross-correlation sequence estimates for the maximal overlap discrete wavelet transform (MODWT) transforms specified in w1 and w2.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xcseq = modwtxcorr(w1,w2)",
            "xcseq = modwtxcorr(w1,w2,wav)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[xcseq,xcseqci] = modwtxcorr(___)",
            "[xcseq,xcseqci] = modwtxcorr(w1,w2,wav,conflevel)",
            "[xcseq,xcseqci,lags] = modwtxcorr(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = modwtxcorr(___,'reflection')" ] } ],
      "inputs" : 
      [ 
        { "name" : "w1",
          "purpose" : "MODWT transform of signal 1",
          "htmlid" : "buv3j7c-1-w1",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "w2",
          "purpose" : "MODWT transform of signal 2",
          "htmlid" : "buv3j7c-1-w2",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "wav",
          "purpose" : "Wavelet",
          "htmlid" : "buv3j7c-1-wav",
          "value" : 
          [ "'sym4'",
            "character vector",
            "string scalar",
            "positive even integer" ],
          "defaultvalue" : "'sym4'" },
        
        { "name" : "conflevel",
          "purpose" : "Confidence level",
          "htmlid" : "buv3j7c-1-conflevel",
          "value" : 
          [ "0.95",
            "positive scalar less than 1" ],
          "defaultvalue" : "0.95" } ],
      "outputs" : 
      [ 
        { "name" : "xcseq",
          "purpose" : "Cross-correlation sequences by scale",
          "htmlid" : "buv3j7c-1-xcseq",
          "value" : 
          [ "cell array of vectors" ] },
        
        { "name" : "xcseqci",
          "purpose" : "Confidence intervals by scale",
          "htmlid" : "buv3j7c-1-xcseqci",
          "value" : 
          [ "cell array of matrices" ] },
        
        { "name" : "lags",
          "purpose" : "Lags for the cross-correlation sequences",
          "htmlid" : "buv3j7c-1-lags",
          "value" : 
          [ "cell array of vectors" ] } ],
      "examples" : 
      [ 
        { "url" : "modwtxcorr.html#buv3zo3",
          "open_command" : "openExample('wavelet\/CrossCorrelationSequenceExample')",
          "title" : "Cross-Correlation Sequence" },
        
        { "url" : "modwtxcorr.html#buv3z6l",
          "open_command" : "openExample('wavelet\/CrossCorrelationSequenceWithFejerKorovkinWaveletExample')",
          "title" : "Cross-Correlation Sequence with Fejér-Korovkin Wavelet" },
        
        { "url" : "modwtxcorr.html#buxg3_t-1",
          "open_command" : "openExample('wavelet\/ModwtxcorrNoisySinesExample')",
          "title" : "Cross-Correlation Confidence Intervals by Scale" },
        
        { "url" : "modwtxcorr.html#bu0byr1-1",
          "open_command" : "openExample('wavelet\/CrossCorrelation90Example')",
          "title" : "Cross-Correlation .90 and .95 Confidence Intervals Comparison" },
        
        { "url" : "modwtxcorr.html#buv30nq",
          "open_command" : "openExample('wavelet\/PlotCrossCorrelationSequencesByLagExample')",
          "title" : "Plot Cross-Correlation Sequences by Lag" },
        
        { "url" : "modwtxcorr.html#bu0bys3",
          "open_command" : "openExample('wavelet\/CrossCorrelationWithReflectionBoundaryExample')",
          "title" : "Cross-Correlation with Reflection Boundary" } ],
      "seealso" : 
      [ 
        { "url" : "modwtcorr.html",
          "name" : "modwtcorr" },
        
        { "url" : "modwtvar.html",
          "name" : "modwtvar" },
        
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "modwtmra.html",
          "name" : "modwtmra" },
        
        { "url" : "imodwt.html",
          "name" : "imodwt" } ] },
    { "href" : "ref\/morlet.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "morlet",
          "fcntype" : "simple" } ],
      "refpurpose" : "Morlet wavelet",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the Morlet wavelet psi evaluated at x, an n-point regular grid in the interval [lb, ub].",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[psi,x] = morlet(lb,ub,n)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lb",
          "purpose" : "Lower limit",
          "htmlid" : "mw_2b46137b-36ce-48c1-99e8-ed4bb55339c7",
          "value" : 
          [ "real-valued scalar" ] },
        
        { "name" : "ub",
          "purpose" : "Upper limit",
          "htmlid" : "mw_50090d37-74d7-455b-ad7d-625297e080c0",
          "value" : 
          [ "real-valued scalar" ] },
        
        { "name" : "n",
          "purpose" : "Number of points",
          "htmlid" : "mw_9c139853-c6fb-4e99-b146-61393995f6e4",
          "value" : 
          [ "positive integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "psi",
          "purpose" : "Morlet wavelet",
          "htmlid" : "mw_624898fe-32d9-40ed-9666-1ac3665c9c26",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "x",
          "purpose" : "Sampling instants",
          "htmlid" : "mw_d043c6b1-97f3-4b41-b9bd-be240cd00c02",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "morlet.html#mw_5e6fb2fd-d59a-4468-9d77-2ef1b88082b5",
          "open_command" : "openExample('wavelet\/MorletWaveletExample')",
          "title" : "Morlet Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "waveinfo.html",
          "name" : "waveinfo" } ] },
    { "href" : "ref\/mswcmp.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mswcmp",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multisignal 1-D compression using wavelets",
      "introduced" : "R2007a",
      "description" : "mswcmp computes thresholds and, depending on the selected option, performs compression of 1-D signals using wavelets.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[xc,deccmp,thresh] = mswcmp('cmp',dec,mthd)",
            "[xc,deccmp,thresh] = mswcmp('cmp',dec,mthd,param)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[xc,thresh] = mswcmp('cmpsig',___)",
            "[deccmp,thresh] = mswcmp('cmpdec',___)",
            "thresh = mswcmp('thr',___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = mswcmp(option,dirdec,x,wname,lev,mthd)",
            "[___] = mswcmp(option,dirdec,x,wname,lev,mthd,param)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = mswcmp(___,s_or_h)",
            "[___] = mswcmp(___,s_or_h,keepapp)",
            "[___] = mswcmp(___,s_or_h,keepapp,idxsig)" ] } ],
      "inputs" : 
      [ 
        { "name" : "dec",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_851c4a37-d0dc-4bf0-9d95-71602eda3bcd",
          "value" : 
          [ "structure" ] },
        
        { "name" : "mthd",
          "purpose" : "Compression method",
          "htmlid" : "mw_3b7879cc-ca29-4868-a2fd-58a81b9fb5dc",
          "value" : 
          [ "'rem_n0'",
            "'bal_sn'",
            "'sqrtbal_sn'",
            "'scarce'",
            "'scarcehi'",
            "'scarceme'",
            "'scarcelo'",
            "'L2_perf'",
            "'N0_perf'",
            "'glb_thr'",
            "'man_thr'" ] },
        
        { "name" : "param",
          "purpose" : "Parameter",
          "htmlid" : "mw_a2fa0de1-d194-4ff5-bfcd-126c896c3589",
          "value" : 
          [ "real number",
            "matrix" ] },
        
        { "name" : "option",
          "purpose" : "Compression outputs option",
          "htmlid" : "mw_b2724974-b99d-41bb-b2fc-9b02a6c8f8e3",
          "value" : 
          [ "'cmp'",
            "'cmpsig'",
            "'cmpdec'",
            "'thr'" ] },
        
        { "name" : "dirdec",
          "purpose" : "Direction indicator",
          "htmlid" : "mw_5df3fca4-b5f7-43ab-8c53-22a021e366b3",
          "value" : 
          [ "'r'",
            "'c'" ] },
        
        { "name" : "x",
          "purpose" : "Multisignal",
          "htmlid" : "mw_75ad48fb-8b3a-4073-9d69-3c5cf6126142",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_47b66e31-0781-44e6-8668-cfdb0c941745",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "lev",
          "purpose" : "Level of decomposition",
          "htmlid" : "mw_44497039-831f-41ac-8742-aa4c5e45c845",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "s_or_h",
          "purpose" : "Type of thresholding",
          "htmlid" : "mw_fd543c17-3635-4e70-ab32-c7ead56e2e80",
          "value" : 
          [ "'h'",
            "'s'" ],
          "defaultvalue" : "'h'" },
        
        { "name" : "keepapp",
          "purpose" : "Threshold approximation",
          "htmlid" : "mw_87296392-1ad0-4148-9b0e-88b36aa2c067",
          "value" : 
          [ "false or 0",
            "true or 1" ],
          "defaultvalue" : "false or 0" },
        
        { "name" : "idxsig",
          "purpose" : "Indices of initial signals",
          "htmlid" : "mw_c25b5de4-6510-4a15-8b26-838654cb54df",
          "value" : 
          [ "'all'",
            "vector of positive integers" ],
          "defaultvalue" : "'all'" } ],
      "outputs" : 
      [ 
        { "name" : "xc",
          "purpose" : "Compressed multisignal",
          "htmlid" : "mw_13ee4ada-024a-4922-a392-31f4ae5e0a20",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "deccmp",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_31360047-d00d-4715-ab17-b261e531d1ee",
          "value" : 
          [ "structure" ] },
        
        { "name" : "thresh",
          "purpose" : "Threshold values",
          "htmlid" : "mw_c5645f83-c9ba-4087-a71b-8f61e8862701",
          "value" : 
          [ "real-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "mswcmp.html#mw_64b72185-f18a-405e-b3f9-63fff75ad146",
          "open_command" : "openExample('wavelet\/CompressMultisignalExample')",
          "title" : "Compress Multisignal" } ],
      "seealso" : 
      [ 
        { "url" : "mdwtdec.html",
          "name" : "mdwtdec" },
        
        { "url" : "mdwtrec.html",
          "name" : "mdwtrec" },
        
        { "url" : "mswthresh.html",
          "name" : "mswthresh" },
        
        { "url" : "wthresh.html",
          "name" : "wthresh" } ] },
    { "href" : "ref\/mswcmpscr.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mswcmpscr",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multisignal 1-D wavelet compression scores",
      "introduced" : "R2007a",
      "description" : "This MATLAB function computes four matrices: thresholds THR, compression scores L2SCR and NOSCR, and indices IDXSORT.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[THR,L2SCR,NOSCR,IDXSORT] = mswcmpscr(DEC)" ] } ],
      "examples" : 
      [ 
        { "url" : "mswcmpscr.html#mw_de23ac3e-ea4d-4d44-951c-90047a2acf46",
          "open_command" : "openExample('wavelet\/MultisignalCompressionScoresExample')",
          "title" : "Multisignal Compression Scores" } ],
      "seealso" : 
      [ 
        { "url" : "mdwtdec.html",
          "name" : "mdwtdec" },
        
        { "url" : "mdwtrec.html",
          "name" : "mdwtrec" },
        
        { "url" : "ddencmp.html",
          "name" : "ddencmp" },
        
        { "url" : "wdencmp.html",
          "name" : "wdencmp" } ] },
    { "href" : "ref\/mswcmptp.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mswcmptp",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multisignal 1-D compression thresholds and performances",
      "introduced" : "R2007a",
      "description" : "This MATLAB function or [THR_VAL,L2_Perf,N0_Perf] = mswcmptp(DEC,METH,PARAM) computes the vectors THR_VAL, L2_Perf and N0_Perf obtained after a compression using the METH method and, if required, the PARAM parameter (see mswcmp for more information on METH and PARAM).",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[THR_VAL,L2_Perf,N0_Perf] = mswcmptp(DEC,METH)",
            "[THR_VAL,L2_Perf,N0_Perf] = mswcmptp(DEC,METH,PARAM)" ] } ],
      "examples" : 
      [ 
        { "url" : "mswcmptp.html#mw_fb16f957-8108-4df7-971e-533eb9752177",
          "open_command" : "openExample('wavelet\/MultisignalCompressionThresholdsAndPerformanceExample')",
          "title" : "Multisignal Compression Thresholds and Performance" } ],
      "seealso" : 
      [ 
        { "url" : "mdwtdec.html",
          "name" : "mdwtdec" },
        
        { "url" : "mdwtrec.html",
          "name" : "mdwtrec" },
        
        { "url" : "ddencmp.html",
          "name" : "ddencmp" },
        
        { "url" : "wdencmp.html",
          "name" : "wdencmp" } ] },
    { "href" : "ref\/mswden.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mswden",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multisignal 1-D denoising using wavelets",
      "introduced" : "R2007a",
      "description" : "This MATLAB function returns a denoised version XD of the original multisignal matrix X, whose wavelet decomposition structure is DEC.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[XD,DECDEN,THRESH] = mswden('den',...)",
            "THRESH = mswden('thr',...)",
            "[...] = mswden(OPTION,DIRDEC,X,WNAME,LEV,METH,PARAM)",
            "[...] = mswden(...,S_OR_H)",
            "[...] = mswden(...,S_OR_H,KEEPAPP)",
            "[...] = mswden(...,S_OR_H,KEEPAPP,IDXSIG)" ] } ],
      "examples" : 
      [ 
        { "url" : "mswden.html#mw_097e427b-87b4-4268-855c-053b05123001",
          "open_command" : "openExample('wavelet\/Multisignal1DWaveletDenoisingExample')",
          "title" : "Multisignal 1-D Wavelet Denoising" } ],
      "seealso" : 
      [ 
        { "url" : "mdwtdec.html",
          "name" : "mdwtdec" },
        
        { "url" : "mdwtrec.html",
          "name" : "mdwtrec" },
        
        { "url" : "mswthresh.html",
          "name" : "mswthresh" },
        
        { "url" : "wthresh.html",
          "name" : "wthresh" },
        
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" } ] },
    { "href" : "ref\/mswthresh.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "mswthresh",
          "fcntype" : "simple" } ],
      "refpurpose" : "Perform multisignal 1-D thresholding",
      "introduced" : "R2007a",
      "description" : "This MATLAB function returns the soft or hard T-thresholding of the matrix X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Y = mswthresh(X,sorh,T)",
            "Y = mswthresh(X,sorh,T,'c')" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "mw_55faa4ec-c6dd-4b86-904b-2982c7eb2e32",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "sorh",
          "purpose" : "Type of thresholding",
          "htmlid" : "mw_374a8230-c301-4b64-b16e-db8ab227db4a",
          "value" : 
          [ "'s'",
            "'h'" ] },
        
        { "name" : "T",
          "purpose" : "Threshold value",
          "htmlid" : "mw_cdfdfcb7-f82a-45ab-a5ed-356e0813ee48",
          "value" : 
          [ "real-valued scalar or vector" ] } ],
      "outputs" : 
      [ 
        { "name" : "Y",
          "purpose" : "Thresholded data",
          "htmlid" : "mw_ca57d90a-640e-4935-8647-2351699194b5",
          "value" : 
          [ "real-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "mswthresh.html#mw_1a1e8c62-6ae7-4e73-9d9f-53cd44ee3cab",
          "open_command" : "openExample('wavelet\/MultisignalThresholdingExample')",
          "title" : "Multisignal Thresholding" } ],
      "seealso" : 
      [ 
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "mswden.html",
          "name" : "mswden" },
        
        { "url" : "mswcmp.html",
          "name" : "mswcmp" },
        
        { "url" : "wthresh.html",
          "name" : "wthresh" },
        
        { "url" : "wden.html",
          "name" : "wden" },
        
        { "url" : "wdencmp.html",
          "name" : "wdencmp" },
        
        { "url" : "wpdencmp.html",
          "name" : "wpdencmp" } ] },
    { "href" : "ref\/nodeasc.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "nodeasc",
          "fcntype" : "simple" } ],
      "refpurpose" : "Node ascendants",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the indices of all the ascendants of the node N in the tree T where N can be the index node or the depth and position of the node.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "A = nodeasc(T,N)" ] } ],
      "seealso" : 
      [ 
        { "url" : "nodedesc.html",
          "name" : "nodedesc" },
        
        { "url" : "nodepar.html",
          "name" : "nodepar" },
        
        { "url" : "ntree.wtreemgr.html",
          "name" : "wtreemgr" } ] },
    { "href" : "ref\/nodedesc.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "nodedesc",
          "fcntype" : "simple" } ],
      "refpurpose" : "Node descendants",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the indices of all the descendants of the node N in the tree T where N can be the index node or the depth and position of node.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "D = nodedesc(T,N)",
            "D = nodedesc(T,N,'deppos')" ] } ],
      "seealso" : 
      [ 
        { "url" : "nodeasc.html",
          "name" : "nodeasc" },
        
        { "url" : "nodepar.html",
          "name" : "nodepar" },
        
        { "url" : "ntree.wtreemgr.html",
          "name" : "wtreemgr" } ] },
    { "href" : "ref\/nodepar.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "nodepar",
          "fcntype" : "simple" } ],
      "refpurpose" : "Node parent",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the indices of the \"parent(s)\" of the nodes N in the tree T where N can be a column vector containing the indices of nodes or a matrix that contains the depths and positions of nodes.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "F = nodepar(T,N)",
            "F = nodepar(T,N,'deppos')" ] } ],
      "seealso" : 
      [ 
        { "url" : "nodeasc.html",
          "name" : "nodeasc" },
        
        { "url" : "nodedesc.html",
          "name" : "nodedesc" },
        
        { "url" : "ntree.wtreemgr.html",
          "name" : "wtreemgr" } ] },
    { "href" : "ref\/noleaves.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "noleaves",
          "fcntype" : "simple" } ],
      "refpurpose" : "Determine nonterminal nodes",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the indices of nonterminal nodes of the tree T (i.e., nodes that are not leaves).",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "N = noleaves(T)",
            "N = noleaves(T,'dp')" ] } ],
      "seealso" : 
      [ 
        { "url" : "leaves.html",
          "name" : "leaves" } ] },
    { "href" : "ref\/ntnode.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ntnode",
          "fcntype" : "simple" } ],
      "refpurpose" : "Number of terminal nodes",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the number of terminal nodes in the tree T.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "NB = ntnode(T)" ] } ],
      "seealso" : 
      [ 
        { "url" : "ntree.wtreemgr.html",
          "name" : "wtreemgr" } ] },
    { "href" : "ref\/ntree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "ntree",
          "fcntype" : "simple" } ],
      "refpurpose" : "NTREE constructor",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns an NTREE object, which is a complete tree of order ord and depth d.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = ntree(ord,d)",
            "T = ntree(ord,d,s)",
            "T = ntree(ord,d,s,u)",
            "[T,nb] = ntree(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "ord",
          "purpose" : "Tree order",
          "htmlid" : "mw_f89df322-53b5-4946-916f-aada2fa2e511",
          "value" : 
          [ "2",
            "positive integer" ],
          "defaultvalue" : "2" },
        
        { "name" : "d",
          "purpose" : "Tree depth",
          "htmlid" : "mw_b3f8e2df-175a-4147-8919-5188957a593d",
          "value" : 
          [ "0",
            "nonnegative integer" ],
          "defaultvalue" : "0" },
        
        { "name" : "s",
          "purpose" : "Split scheme",
          "htmlid" : "mw_01d2ce53-453c-46d7-bfa5-451238eec675",
          "value" : 
          [ "ones(ord,1)",
            "logical array" ],
          "defaultvalue" : "ones(ord,1)" },
        
        { "name" : "u",
          "purpose" : "User data",
          "htmlid" : "mw_3cefeecb-fac1-4bb7-8392-7b4c288de4d7",
          "value" : 
          [ "{}",
            "array",
            "cell array",
            "structure array" ],
          "defaultvalue" : "{}" } ],
      "outputs" : 
      [ 
        { "name" : "T",
          "purpose" : "Tree",
          "htmlid" : "mw_9e351ee1-6bc6-44f2-a840-bac41a06b82f",
          "value" : 
          [ "NTREE object" ] },
        
        { "name" : "nb",
          "purpose" : "Number of terminal nodes",
          "htmlid" : "mw_b85b421f-6006-4386-999a-db9a5549f9b7",
          "value" : 
          [ "integer" ] } ],
      "examples" : 
      [ 
        { "url" : "ntree.html#mw_f39efb8d-d9ef-425a-9caf-68cf925f5c9c",
          "open_command" : "openExample('wavelet\/CreateNTREEObjectExample')",
          "title" : "Create NTREE Object" } ],
      "seealso" : 
      [ 
        { "url" : "wtbo.html",
          "name" : "wtbo" } ] },
    { "href" : "ref\/ntree.wtreemgr.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wtreemgr",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "ntree.wtreemgr",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "NTREE manager",
      "introduced" : "preR2006a",
      "description" : "wtreemgr is a tree management utility.",
      "seealso" : 
      [ 
        { "url" : "allnodes.html",
          "name" : "allnodes" },
        
        { "url" : "istnode.html",
          "name" : "istnode" },
        
        { "url" : "leaves.html",
          "name" : "leaves" },
        
        { "url" : "nodeasc.html",
          "name" : "nodeasc" },
        
        { "url" : "nodedesc.html",
          "name" : "nodedesc" },
        
        { "url" : "nodepar.html",
          "name" : "nodepar" },
        
        { "url" : "noleaves.html",
          "name" : "noleaves" },
        
        { "url" : "ntnode.html",
          "name" : "ntnode" },
        
        { "url" : "tnodes.html",
          "name" : "tnodes" },
        
        { "url" : "treedpth.html",
          "name" : "treedpth" },
        
        { "url" : "treeord.html",
          "name" : "treeord" } ] },
    { "href" : "ref\/orthfilt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "orthfilt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Orthogonal wavelet filters",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function computes the four lowpass and highpass, decomposition and reconstruction filters associated with the scaling filter W corresponding to a wavelet.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[LoD,HiD,LoR,HiR] = orthfilt(W)" ] } ],
      "inputs" : 
      [ 
        { "name" : "W",
          "purpose" : "Scaling filter",
          "htmlid" : "mw_9ea6270d-bae0-4345-99dd-02ec6189d1a0",
          "value" : 
          [ "real-valued vector" ] } ],
      "outputs" : 
      [ 
        { "name" : "LoD",
          "purpose" : "Decomposition lowpass filter",
          "htmlid" : "mw_df5e0558-630a-4fdf-9e63-7b6bf49557a7",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "HiD",
          "purpose" : "Decomposition highpass filter",
          "htmlid" : "mw_49041fe0-36c9-4945-84ba-91a4692f128f",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "LoR",
          "purpose" : "Reconstruction lowpass filter",
          "htmlid" : "mw_bcb86330-4a51-4dcd-8ad1-d747322c7232",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "HiR",
          "purpose" : "Reconstruction highpass filter",
          "htmlid" : "mw_d0ce27d1-2769-4e13-9adf-8d3f625a5e62",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "orthfilt.html#mw_2721a73f-00fc-44bf-af78-2518d24c733c",
          "open_command" : "openExample('wavelet\/ComputeOrthogonalWaveletFilterSetOfScalingFilterExample')",
          "title" : "Compute Orthogonal Wavelet Filters of Scaling Filter" } ],
      "seealso" : 
      [ 
        { "url" : "biorfilt.html",
          "name" : "biorfilt" },
        
        { "url" : "qmf.html",
          "name" : "qmf" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" } ] },
    { "href" : "ref\/otnodes.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "otnodes",
          "fcntype" : "simple" } ],
      "refpurpose" : "Order terminal nodes of binary wavelet packet tree",
      "introduced" : "R2010b",
      "description" : "This MATLAB function returns the terminal nodes of the binary wavelet packet tree, WPT, in Paley (natural) ordering, Tn_Pal, and sequency (frequency) ordering, Tn_Seq.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[Tn_Pal,Tn_Seq] = otnodes(WPT)",
            "[Tn_Pal,Tn_Seq,I,J] = otnodes(WPT)",
            "[DP_Pal,DP_Seq] = otnodes(WPT,'dp')" ] } ],
      "inputs" : 
      [ 
        { "name" : "WPT",
          "purpose" : "Binary wavelet packet tree",
          "htmlid" : "mw_c04de2c4-4b15-47ba-bf2c-2a6c9c7722b7",
          "value" : 
          [ "wptree object" ] } ],
      "outputs" : 
      [ 
        { "name" : "Tn_Pal",
          "purpose" : "Terminal nodes in Paley (natural) ordering",
          "htmlid" : "mw_4b1ff068-0973-4c12-b082-5126c68b98db",
          "value" : 
          [ "vector" ] },
        
        { "name" : "Tn_Seq",
          "purpose" : "Terminal nodes in sequency ordering",
          "htmlid" : "mw_1bd835d1-0dc9-4473-8d00-cb2e7380a79e",
          "value" : 
          [ "vector" ] },
        
        { "name" : "I",
          "purpose" : "Permutations of Paley-ordered terminal node indices",
          "htmlid" : "mw_f107d153-9afd-47e1-a5c7-d86a65bc6188",
          "value" : 
          [ "vector" ] },
        
        { "name" : "J",
          "purpose" : "Permutations of sequency-ordered terminal node indices",
          "htmlid" : "mw_0830e559-50c9-4020-a67a-ddb2e438b46b",
          "value" : 
          [ "vector" ] },
        
        { "name" : "DP_Pal",
          "purpose" : "Paley-ordered terminal nodes in depth-position format",
          "htmlid" : "mw_686874aa-5ea3-4c29-9145-ab3d090000f7",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "DP_Seq",
          "purpose" : "Sequency-ordered terminal nodes in depth-position format",
          "htmlid" : "mw_877acc42-af9a-4996-aa41-fb7b5d546e1d",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "otnodes.html#mw_54ab2eb1-c1df-4d83-a509-62535c07afe5",
          "open_command" : "openExample('wavelet\/OrderTerminalNodesExample')",
          "title" : "Order Terminal Nodes" },
        
        { "url" : "otnodes.html#mw_dc906f36-1013-486f-bd44-bb01d05718e9",
          "open_command" : "openExample('wavelet\/ReturnPermutationsForOrderingExample')",
          "title" : "Return Permutations for Ordering" },
        
        { "url" : "otnodes.html#mw_c157660c-da22-41d4-a263-cb845939254d",
          "open_command" : "openExample('wavelet\/OrderTerminalNodesByDepthAndPositionExample')",
          "title" : "Order Terminal Nodes by Depth and Position" },
        
        { "url" : "otnodes.html#mw_10338034-dc4f-41ae-be86-4dc3e58661ad",
          "open_command" : "openExample('wavelet\/OrderTerminalNodesFromWaveletPacketTreeExample')",
          "title" : "Order Terminal Nodes from Wavelet Packet Tree" } ],
      "seealso" : 
      [ 
        { "url" : "leaves.html",
          "name" : "leaves" },
        
        { "url" : "treeord.html",
          "name" : "treeord" } ] },
    { "href" : "ref\/pat2cwav.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "pat2cwav",
          "fcntype" : "simple" } ],
      "refpurpose" : "Build wavelet from pattern",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns an admissible wavelet psi for the continuous wavelet transform (CWT) adapted to the pattern ypat.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[psi,xval,nc] = pat2cwav(ypat,method,poldegree,regularity)" ] } ],
      "inputs" : 
      [ 
        { "name" : "ypat",
          "purpose" : "Pattern",
          "htmlid" : "mw_67630668-4bdb-46aa-af18-1bf48987f863",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "method",
          "purpose" : "Least-squares fitting method",
          "htmlid" : "mw_7826d681-27a7-4ecf-87cc-09b8d1f1d16d",
          "value" : 
          [ "'polynomial'",
            "'orthconst'" ] },
        
        { "name" : "poldegree",
          "purpose" : "Degree of polynomial",
          "htmlid" : "mw_bad02d2a-6fc2-451c-8481-f99c41c5ab04",
          "value" : 
          [ "integer" ] },
        
        { "name" : "regularity",
          "purpose" : "Boundary constraints",
          "htmlid" : "mw_38789529-6921-4c3e-95e1-e7eed574d926",
          "value" : 
          [ "'continuous'",
            "'differentiable'",
            "'none'" ] } ],
      "outputs" : 
      [ 
        { "name" : "psi",
          "purpose" : "Admissible wavelet",
          "htmlid" : "mw_15c69a58-e5e3-4191-b4d3-714a58dc9316",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "xval",
          "purpose" : "Sampling instants",
          "htmlid" : "mw_2f53458c-5493-4b0c-9a36-f22c934b9a0d",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "nc",
          "purpose" : "Normalizing constant",
          "htmlid" : "mw_2bbece22-fad4-4c71-87fb-aadbc4adfacc",
          "value" : 
          [ "scalar" ] } ],
      "examples" : 
      [ 
        { "url" : "pat2cwav.html#mw_ab3d49c6-83bf-4900-8f66-904ed461e6eb",
          "open_command" : "openExample('wavelet\/CreateWaveletForContinuousWaveletTransformExample')",
          "title" : "Create Wavelet for Continuous Wavelet Transform" } ],
      "seealso" : 
      [ 
        { "url" : "wavemngr.html",
          "name" : "wavemngr" } ] },
    { "href" : "ref\/plot.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "plot",
          "fcntype" : "simple" } ],
      "refpurpose" : "Plot tree GUI",
      "introduced" : "preR2006a",
      "description" : "plot is a graphical tree-management utility.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "plot(t)",
            "fig = plot(t)",
            "newt = plot(trobj,'read',fig)" ] } ],
      "inputs" : 
      [ 
        { "name" : "t",
          "purpose" : "Tree",
          "htmlid" : "mw_f970be29-a5ff-4b42-b1c7-81ad471d4bbc",
          "value" : 
          [ "ntree object",
            "dtree object",
            "wptree object" ] },
        
        { "name" : "trobj",
          "purpose" : "Object",
          "htmlid" : "mw_6e8adc8a-f02e-4597-b6a1-c087668f1301",
          "value" : 
          [ "NTREE-parented object" ] } ],
      "outputs" : 
      [ 
        { "name" : "fig",
          "purpose" : "Figure",
          "htmlid" : "mw_758af013-5336-492a-b3fe-3ea8d0c3264a",
          "value" : 
          [ "Figure object" ] } ],
      "examples" : 
      [ 
        { "url" : "plot.html#mw_4abecea0-162f-419d-a1df-340074633bcb",
          "open_command" : "openExample('wavelet\/PlotWaveletPacketTreesExample')",
          "title" : "Plot Wavelet Packet Trees" } ],
      "seealso" : 
      [ 
        { "url" : "ntree.html",
          "name" : "ntree" },
        
        { "url" : "dtree.html",
          "name" : "dtree" },
        
        { "url" : "wptree.html",
          "name" : "wptree" } ] },
    { "href" : "ref\/plotdt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "plotdt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Plot dual-tree or double-density wavelet transform",
      "introduced" : "R2013b",
      "description" : "This MATLAB function plots the coefficients of the 1-D or 2-D wavelet filter bank decomposition, wt.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "plotdt(wt)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wt",
          "purpose" : "Wavelet transform",
          "htmlid" : "btzsyjj-wt",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "plotdt.html#btzsynv-2",
          "open_command" : "openExample('wavelet\/PlotComplexDualTreeWaveletTransformof1DSignalExample')",
          "title" : "Plot Complex Dual-Tree Wavelet Transform of 1-D Signal" },
        
        { "url" : "plotdt.html#btzs8j5-2",
          "open_command" : "openExample('wavelet\/PlotComplexOrientedDualTreeWaveletTransformof2DImageExample')",
          "title" : "Plot Complex Oriented Dual-Tree Wavelet Transform of 2-D Image" } ],
      "seealso" : 
      [ 
        { "url" : "dddtree.html",
          "name" : "dddtree" },
        
        { "url" : "dddtree2.html",
          "name" : "dddtree2" },
        
        { "url" : "dddtreecfs.html",
          "name" : "dddtreecfs" },
        
        { "url" : "dualtree.html",
          "name" : "dualtree" },
        
        { "url" : "dualtree2.html",
          "name" : "dualtree2" } ] },
    { "href" : "ref\/qbiorthfilt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "qbiorthfilt",
          "fcntype" : "simple" } ],
      "refpurpose" : "First-level dual-tree biorthogonal filters",
      "introduced" : "R2020a",
      "description" : "This MATLAB function returns the first-level biorthogonal filters for Kingsbury's Q-shift complex dual-tree transform specified by name.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[LoD,HiD,LoR,HiR] = qbiorthfilt(name)" ] } ],
      "inputs" : 
      [ 
        { "name" : "name",
          "purpose" : "First-level biorthogonal filter",
          "htmlid" : "mw_678c78a8-2f1d-41d1-a927-1b5d98d7ede2",
          "value" : 
          [ "'nearsym5_7'",
            "'nearsym13_19'",
            "'antonini'",
            "'legall'" ] } ],
      "outputs" : 
      [ 
        { "name" : "LoD",
          "purpose" : "Lowpass analysis filter",
          "htmlid" : "mw_0e8a55e6-c96b-4bad-85e1-ad0442bbca22",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "HiD",
          "purpose" : "Highpass analysis filter",
          "htmlid" : "mw_cb311cfa-7126-4779-a51e-0ab45a81da50",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "LoR",
          "purpose" : "Lowpass synthesis filter",
          "htmlid" : "mw_ecbe5489-347f-4297-8cb5-dbaf60462b7d",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "HiR",
          "purpose" : "Highpass synthesis filter",
          "htmlid" : "mw_496a8803-6512-4655-aa7a-e55fd8509584",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "qbiorthfilt.html#mw_cd053905-fa56-4fc6-b692-9e5647df70a8",
          "open_command" : "openExample('wavelet\/DTCWTFirstLevelBiorthogonalFiltersExample')",
          "title" : "DTCWT First-Level Biorthogonal Filters" } ],
      "seealso" : 
      [ 
        { "url" : "dualtree3.html",
          "name" : "dualtree3" },
        
        { "url" : "dualtree2.html",
          "name" : "dualtree2" },
        
        { "url" : "dualtree.html",
          "name" : "dualtree" },
        
        { "url" : "qorthwavf.html",
          "name" : "qorthwavf" } ] },
    { "href" : "ref\/qmf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "qmf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Scaling and wavelet filter",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function changes the signs of the even-indexed elements of the reversed vector filter coefficients X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Y = qmf(X)",
            "Y = qmf(X,P)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Filter coefficients",
          "htmlid" : "mw_cb6cefdb-d5c6-4977-9d60-d49bc1641fe2",
          "value" : 
          [ "vector" ] },
        
        { "name" : "P",
          "purpose" : "Phase parameter",
          "htmlid" : "mw_fe672513-f90a-4489-8d31-b4619c218498",
          "value" : 
          [ "0",
            "1" ],
          "defaultvalue" : "0" } ],
      "examples" : 
      [ 
        { "url" : "qmf.html#mw_800f90a1-1654-4486-9500-ed3cfb797278",
          "open_command" : "openExample('wavelet\/QuadratureMirrorFilterExample')",
          "title" : "Create Quadrature Mirror Filter" },
        
        { "url" : "qmf.html#mw_f6eaccef-baee-4da7-aa13-1a4225d2cf06",
          "open_command" : "openExample('wavelet\/ControllingThePhaseOfAQuadratureMirrorFilterExample')",
          "title" : "Controlling Phase of a Quadrature Mirror Filter" } ],
      "seealso" : 
      [ 
        { "url" : "wfilters.html",
          "name" : "wfilters" },
        
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" } ] },
    { "href" : "ref\/qorthwavf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "qorthwavf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Kingsbury Q-shift filters",
      "introduced" : "R2020a",
      "description" : "This MATLAB function returns the Kingsbury Q-shift filters for the Q-shift complex dual-tree transform.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[LoDa,LoDb,HiDa,HiDb,LoRa,LoRb,HiRa,HiRb] = qorthwavf(num)" ] } ],
      "inputs" : 
      [ 
        { "name" : "num",
          "purpose" : "Number of nonzero coefficients",
          "htmlid" : "mw_70dd7996-e6ec-4310-9aaa-36cf143c1d54",
          "value" : 
          [ "6",
            "10",
            "14",
            "16",
            "18" ] } ],
      "outputs" : 
      [ 
        { "name" : "LoDa",
          "purpose" : "Tree A lowpass analysis filter",
          "htmlid" : "mw_f07e7c56-7f34-4cb0-a713-41fb02bcf7d1",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "LoDb",
          "purpose" : "Tree B lowpass analysis filter",
          "htmlid" : "mw_df99abbb-a6e0-40ac-9a40-d1bc8c47197a",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "HiDa",
          "purpose" : "Tree A highpass analysis filter",
          "htmlid" : "mw_1cf97b9f-0133-4f4d-b2e3-551dcba9ec1a",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "HiDb",
          "purpose" : "Tree B highpass analysis filter",
          "htmlid" : "mw_1a58dc23-03e9-4de5-bb92-f01d4a7b897c",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "LoRa",
          "purpose" : "Tree A lowpass synthesis filter",
          "htmlid" : "mw_d9a9e9ea-75cf-4ed3-ad3e-0dc426a71b28",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "LoRb",
          "purpose" : "Tree B lowpass synthesis filter",
          "htmlid" : "mw_823bddc9-92c6-4a30-86fc-ad4c3e0d91b2",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "HiRa",
          "purpose" : "Tree A highpass synthesis filter",
          "htmlid" : "mw_078ce07f-9de7-4894-a9c9-978cf6b71ca5",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "HiRb",
          "purpose" : "Tree B highpass synthesis filter",
          "htmlid" : "mw_6915b01d-8c87-49ed-9505-350bcfe8a127",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "qorthwavf.html#mw_e9487180-3718-4765-9cc4-28d5f09696d2",
          "open_command" : "openExample('wavelet\/KingsburyQshiftFiltersExample')",
          "title" : "Kingsbury Q-shift Filters" } ],
      "seealso" : 
      [ 
        { "url" : "qbiorthfilt.html",
          "name" : "qbiorthfilt" },
        
        { "url" : "dualtree3.html",
          "name" : "dualtree3" },
        
        { "url" : "dualtree2.html",
          "name" : "dualtree2" },
        
        { "url" : "dualtree.html",
          "name" : "dualtree" } ] },
    { "href" : "ref\/rbiowavf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "rbiowavf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Reverse biorthogonal spline wavelet filters",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the reconstruction (synthesis) and decomposition (analysis) scaling filters, RF and DF, respectively, associated with the reverse biorthogonal wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[RF,DF] = rbiowavf(wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Name of reverse biorthogonal wavelet",
          "htmlid" : "mw_69bbda1f-c99a-4254-a0a5-22b94b2888ab",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "RF",
          "purpose" : "Reconstruction filter",
          "htmlid" : "mw_cf2986c1-ab46-4ebb-b1d5-77df48036a77",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "DF",
          "purpose" : "Decomposition filter",
          "htmlid" : "mw_63bd2655-fbb7-49a4-96bb-7c69aafcfaa1",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "rbiowavf.html#mw_7470385e-3787-4860-bc87-cd131c85e194",
          "open_command" : "openExample('wavelet\/ReverseBiorthgonalScalingFilterExample')",
          "title" : "Reverse Biorthogonal Scaling Filter" } ],
      "seealso" : 
      [ 
        { "url" : "biorfilt.html",
          "name" : "biorfilt" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" } ] },
    { "href" : "ref\/readtree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "readtree",
          "fcntype" : "simple" } ],
      "refpurpose" : "(To be removed) Read wavelet packet decomposition tree from figure",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function reads the wavelet packet decomposition tree from the figure whose handle is F.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = readtree(F)" ] } ] },
    { "href" : "ref\/scal2frq.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "scal2frq",
          "fcntype" : "simple" } ],
      "refpurpose" : "Scale to frequency",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the pseudo-frequencies corresponding to the scales given by A and the wavelet specified by wname and the sampling period delta.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "frq = scal2frq(A,wname,delta)",
            "frq = scal2frq(A,wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Scales",
          "htmlid" : "mw_5c2b99db-c675-40cc-b9ad-452a6b2ce1c5",
          "value" : 
          [ "positive real-valued vector" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_b6bb08c1-3e29-4d71-8d37-1f63b78434fa",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "delta",
          "purpose" : "Sampling period",
          "htmlid" : "mw_62bff43b-41cc-4772-9cd6-dbd1a94bb7d4",
          "value" : 
          [ "1",
            "positive real-valued scalar" ],
          "defaultvalue" : "1" } ],
      "examples" : 
      [ 
        { "url" : "scal2frq.html#mw_d90cf671-4b72-45e0-9f89-a58f101cce3c",
          "open_command" : "openExample('wavelet\/ScalesAndPseudofrequenciesExample')",
          "title" : "Scales and Pseudo-Frequencies" },
        
        { "url" : "scal2frq.html#mw_dcfb1e86-ad4a-4861-9767-c992e3ede408",
          "open_command" : "openExample('wavelet\/PlotCWTWithFrequenciesExample')",
          "title" : "Plot CWT with Frequencies in a Contour Plot" } ],
      "seealso" : 
      [ 
        { "url" : "centfrq.html",
          "name" : "centfrq" } ] },
    { "href" : "ref\/sensingdictionary.basispursuit.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "basisPursuit",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "sensingDictionary.basisPursuit",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Recover sparse signal using the basis pursuit algorithm",
      "introduced" : "R2022a",
      "description" : "This MATLAB function recovers the sparse signal approximation Xr of Y by solving the Basis Pursuit Denoising Problem using the sensingDictionary A.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[Xr,MSE,lambda] = basisPursuit(A,Y)",
            "[Xr,MSE,lambda] = basisPursuit(___,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Sensing dictionary",
          "htmlid" : "mw_019e07a3-71d5-40b3-9526-40e2ced649e4_sep_mw_4914ac58-7a1d-4ee1-a95d-d75d7e80997a",
          "value" : 
          [ "sensingDictionary object" ] },
        
        { "name" : "Y",
          "purpose" : "Sensor measurements",
          "htmlid" : "mw_019e07a3-71d5-40b3-9526-40e2ced649e4_sep_mw_54a0f755-d05a-47a4-87b3-5430312b388b",
          "value" : 
          [ "vector" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "maxIterations",
              "purpose" : "Maximum number of iterations",
              "htmlid" : "mw_1d16b754-0550-48d7-a02d-952b482147a4",
              "value" : 
              [ "200",
                "positive integer" ],
              "defaultvalue" : "200" },
            
            { "name" : "RelTol",
              "purpose" : "Relative tolerance",
              "htmlid" : "mw_3194a358-4dc4-4a55-b458-057cb24f5664",
              "value" : 
              [ "1e-4",
                "positive scalar" ],
              "defaultvalue" : "1e-4" },
            
            { "name" : "AbsTol",
              "purpose" : "Absolute tolerance",
              "htmlid" : "mw_d361cbd1-21de-4c6b-b630-06d08e8414ad",
              "value" : 
              [ "1e-5",
                "positive scalar" ],
              "defaultvalue" : "1e-5" },
            
            { "name" : "MaxErr",
              "purpose" : "Maximum error",
              "htmlid" : "mw_7cf62411-2f3d-4b51-9b8c-8dc2b4c5f181",
              "value" : 
              [ "positive scalar" ] } ] } ],
      "outputs" : 
      [ 
        { "name" : "Xr",
          "purpose" : "Sparse signal",
          "htmlid" : "mw_019e07a3-71d5-40b3-9526-40e2ced649e4_sep_mw_8cc1aa34-f8cf-4580-bf98-29e2281e7923",
          "value" : 
          [ "vector" ] },
        
        { "name" : "MSE",
          "purpose" : "Minimum mean squared error",
          "htmlid" : "mw_51a8836c-7e9b-4b37-aeba-f9ba36679df1",
          "value" : 
          [ "scalar" ] },
        
        { "name" : "lambda",
          "purpose" : "Lagrangian parameter",
          "htmlid" : "mw_85caf06b-f830-415f-a4ff-10aba93a60ee",
          "value" : 
          [ "scalar" ] } ],
      "examples" : 
      [ 
        { "url" : "sensingdictionary.basispursuit.html#mw_be7494d5-65d2-4522-9ac7-bdf817da0d97",
          "open_command" : "openExample('wavelet\/BasisPursuitApproximationOfSignalExample')",
          "title" : "Basis Pursuit Approximation of Signal" } ],
      "seealso" : 
      [ 
        { "url" : "sensingdictionary.matchingpursuit.html",
          "name" : "matchingPursuit" },
        
        { "url" : "sensingdictionary.html",
          "name" : "sensingDictionary" } ] },
    { "href" : "ref\/sensingdictionary.horzcat.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "horzcat",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "sensingDictionary.horzcat",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Horizontal concatenation of two sensing dictionaries",
      "introduced" : "R2022a",
      "description" : "This MATLAB function creates a custom sensing dictionary by appending the columns in B after the columns in A.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Anew = horzcat(A,B)",
            "Anew = [A,B]" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Sensing dictionary",
          "htmlid" : "mw_a0092f1c-04d0-4455-be6d-6041902f8ce4_sep_mw_4914ac58-7a1d-4ee1-a95d-d75d7e80997a",
          "value" : 
          [ "sensingDictionary object" ] },
        
        { "name" : "B",
          "purpose" : "Sensing dictionary",
          "htmlid" : "mw_ccf78727-4248-4fc3-a913-2d683c9f6218",
          "value" : 
          [ "sensingDictionary object",
            "matrix" ] } ],
      "outputs" : 
      [ 
        { "name" : "Anew",
          "purpose" : "Sensing dictionary",
          "htmlid" : "mw_1ee235e2-93cd-4989-bc77-c51ff9ad91a5",
          "value" : 
          [ "sensingDictionary object" ] } ],
      "examples" : 
      [ 
        { "url" : "sensingdictionary.horzcat.html#mw_dbe7a8ec-d826-401c-90f8-7f5e273886de",
          "open_command" : "openExample('wavelet\/ConcatenateTwoSensingDictionariesExample')",
          "title" : "Concatenate Two Sensing Dictionaries" } ],
      "seealso" : 
      [ 
        { "url" : "sensingdictionary.html",
          "name" : "sensingDictionary" } ] },
    { "href" : "ref\/sensingdictionary.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "sensingDictionary" },
        
        { "type" : "function",
          "name" : "sensingDictionary",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Sensing dictionary for sparse signal recovery",
      "introduced" : "R2022a",
      "description" : "Use sensingDictionary to create a sensing dictionary object for sparse approximations of 1-D signals.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "A = sensingDictionary",
            "A = sensingDictionary(Name=Value)" ] } ],
      "classpropertygroup" : 
      [ 
        { "classproperty" : 
          [ 
            { "name" : "Size",
              "purpose" : "Sensing dictionary size",
              "htmlid" : "mw_dee6b1da-7485-4f9c-8747-eaada6eda1a5",
              "value" : 
              [ "[100 100]",
                "positive integer",
                "two-element vector" ],
              "defaultvalue" : "[100 100]" },
            
            { "name" : "Type",
              "purpose" : "Dictionary basis type",
              "htmlid" : "mw_4ae3a4b2-55e9-4105-95fb-e34c5bae7a2d",
              "value" : 
              [ "cell array of character vectors" ] },
            
            { "name" : "Name",
              "purpose" : "Basis name",
              "htmlid" : "mw_d6882524-29dc-4bef-b7a1-af3c22959ca2",
              "value" : 
              [ "cell array of character vectors" ] },
            
            { "name" : "Level",
              "purpose" : "Decomposition level",
              "htmlid" : "mw_c2b215a7-cb29-4fc6-9dd9-340104b66362",
              "value" : 
              [ "floor(log2(A.Size(1)))",
                "integer",
                "vector" ],
              "defaultvalue" : "floor(log2(A.Size(1)))" },
            
            { "name" : "CustomDictionary",
              "purpose" : "Custom sensing dictionary matrix",
              "htmlid" : "mw_a5e6e129-4c7f-48fa-b850-e12cb0a8a72b",
              "value" : 
              [ "matrix" ] } ] } ],
      "examples" : 
      [ 
        { "url" : "sensingdictionary.html#mw_463ff485-312f-4ef6-a914-3987d8929c26",
          "open_command" : "openExample('wavelet\/CreateSensingDictionaryExample')",
          "title" : "Create Sensing Dictionary" },
        
        { "url" : "sensingdictionary.html#mw_1c4ddb9e-2e43-4d17-b1b1-af02e8dee30e",
          "open_command" : "openExample('wavelet\/ObtainBestFitUsingMatchingPursuitExample')",
          "title" : "Obtain Best Fit Using Matching Pursuit" } ] },
    { "href" : "ref\/sensingdictionary.matchingpursuit.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "matchingPursuit",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "sensingDictionary.matchingPursuit",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Recover sparse signal using matching pursuit algorithm",
      "introduced" : "R2022a",
      "description" : "This MATLAB function recovers the sparse signal Xr using the sensingDictionary A and sensor measurement Y.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[Xr,YI,I,R] = matchingPursuit(A,Y)",
            "[Xr,YI,I,R] = matchingPursuit(___,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Sensing dictionary",
          "htmlid" : "mw_969277e6-b721-46e3-b5d9-801be5a2c23a_sep_mw_4914ac58-7a1d-4ee1-a95d-d75d7e80997a",
          "value" : 
          [ "sensingDictionary object" ] },
        
        { "name" : "Y",
          "purpose" : "Sensor measurements",
          "htmlid" : "mw_969277e6-b721-46e3-b5d9-801be5a2c23a_sep_mw_54a0f755-d05a-47a4-87b3-5430312b388b",
          "value" : 
          [ "vector" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Algorithm",
              "purpose" : "Recovery algorithm",
              "htmlid" : "mw_56d44611-cf5f-478d-a3d1-538f6e9738c4",
              "value" : 
              [ "\"BMP\"",
                "\"OMP\"",
                "\"WMP\"" ],
              "defaultvalue" : "\"BMP\"" },
            
            { "name" : "wmpcfs",
              "purpose" : "Optimality factor",
              "htmlid" : "mw_4b3e23ca-d895-4eea-916a-ffddfc9c343e",
              "value" : 
              [ "0.6",
                "positive scalar" ],
              "defaultvalue" : "0.6" },
            
            { "name" : "maxIterations",
              "purpose" : "Maximum number of iterations",
              "htmlid" : "mw_92533371-65da-4b76-8eed-dda75d6b415b",
              "value" : 
              [ "25",
                "positive integer" ],
              "defaultvalue" : "25" },
            
            { "name" : "maxerr",
              "purpose" : "Maximum error criteria",
              "htmlid" : "mw_40e51a20-63b3-4ba8-9684-f9033fac29c3",
              "value" : 
              [ "{\"L2\",1}",
                "cell" ],
              "defaultvalue" : "{\"L2\",1}" } ] } ],
      "outputs" : 
      [ 
        { "name" : "Xr",
          "purpose" : "Sparse signal",
          "htmlid" : "mw_969277e6-b721-46e3-b5d9-801be5a2c23a_sep_mw_8cc1aa34-f8cf-4580-bf98-29e2281e7923",
          "value" : 
          [ "vector" ] },
        
        { "name" : "YI",
          "purpose" : "Best fit",
          "htmlid" : "mw_a1276df0-2cfd-4015-a2e2-32ee944ce135",
          "value" : 
          [ "vector" ] },
        
        { "name" : "I",
          "purpose" : "Index",
          "htmlid" : "mw_84403d6c-afb6-43ec-a18f-3e092e8aeb42",
          "value" : 
          [ "vector" ] },
        
        { "name" : "R",
          "purpose" : "Residual",
          "htmlid" : "mw_87a5d40e-a216-43ff-9ab6-4059097e4156",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "sensingdictionary.matchingpursuit.html#mw_3d615f60-0cac-4cdf-8445-3036f6b142a2",
          "open_command" : "openExample('wavelet\/ObtainSparseApproximationExample')",
          "title" : "Obtain Sparse Approximation" } ],
      "seealso" : 
      [ 
        { "url" : "sensingdictionary.basispursuit.html",
          "name" : "basisPursuit" },
        
        { "url" : "sensingdictionary.html",
          "name" : "sensingDictionary" } ] },
    { "href" : "ref\/sensingdictionary.subdict.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "subdict",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "sensingDictionary.subdict",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Extract submatrix from a sensing dictionary",
      "introduced" : "R2022a",
      "description" : "This MATLAB function returns the submatrix Ar that corresponds to the rows and columns specified by rowIndices and colIndices, respectively.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Ar = subdict(A,rowIndices,colIndices)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Sensing dictionary",
          "htmlid" : "mw_11275456-f3c8-4e7c-a282-f30449a9c961_sep_mw_4914ac58-7a1d-4ee1-a95d-d75d7e80997a",
          "value" : 
          [ "sensingDictionary object" ] },
        
        { "name" : "rowIndices",
          "purpose" : "Row indices",
          "htmlid" : "mw_403b0f5c-5783-4819-ac35-8da426439815",
          "value" : 
          [ "vector" ] },
        
        { "name" : "colIndices",
          "purpose" : "Column indices",
          "htmlid" : "mw_8af86542-efd6-418b-a53c-9559f48f25d6",
          "value" : 
          [ "vector" ] } ],
      "outputs" : 
      [ 
        { "name" : "Ar",
          "purpose" : "Submatrix",
          "htmlid" : "mw_c0b4678b-3f18-439a-bbc1-6413e1942a6c",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "sensingdictionary.subdict.html#mw_884d9a0c-cc6e-46b3-9245-9b8bdb9c176f",
          "open_command" : "openExample('wavelet\/ExtractAndVisualizeSubmatrixExample')",
          "title" : "Extract and Visualize Submatrix" } ],
      "seealso" : 
      [ 
        { "url" : "sensingdictionary.html",
          "name" : "sensingDictionary" } ] },
    { "href" : "ref\/set.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "set",
          "fcntype" : "simple" } ],
      "refpurpose" : "WPTREE field contents",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function sets the content of the specified fields for the WPTREE object T.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = set(T,'FieldName1',FieldValue1,'FieldName2',FieldValue2, ...)" ] } ],
      "seealso" : 
      [ 
        { "url" : "disp.html",
          "name" : "disp" },
        
        { "url" : "get.html",
          "name" : "get" },
        
        { "url" : "wptree.read.html",
          "name" : "read" },
        
        { "url" : "write.html",
          "name" : "write" } ] },
    { "href" : "ref\/shanwavf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "shanwavf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Complex Shannon wavelet",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns values of the complex Shannon wavelet.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[PSI,X] = shanwavf(LB,UB,N,FB,FC)" ] } ],
      "examples" : 
      [ 
        { "url" : "shanwavf.html#buo46vs",
          "open_command" : "openExample('wavelet\/ComplexShannonWaveletExample')",
          "title" : "Complex Shannon Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "waveinfo.html",
          "name" : "waveinfo" } ] },
    { "href" : "ref\/shearletsystem.filterbank.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "filterbank",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "shearletSystem.filterbank",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Shearlet system filters",
      "introduced" : "R2019b",
      "description" : "This MATLAB function returns the Fourier transforms of the shearlet filters defined by the shearlet system sls as a 3-D real-valued array.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "psi = filterbank(sls)",
            "[psi,scale] = filterbank(sls)",
            "[psi,scale,shear] = filterbank(sls)",
            "[psi,scale,shear,cone] = filterbank(sls)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sls",
          "purpose" : "Shearlet system",
          "htmlid" : "mw_184711d6-6ffa-4bec-88c6-c5501d55b96a_sep_mw_cfe83093-7fe1-4583-bb5f-b378b74044c9",
          "value" : 
          [ "shearletSystem object" ] } ],
      "outputs" : 
      [ 
        { "name" : "psi",
          "purpose" : "Fourier transforms of shearlet filters",
          "htmlid" : "mw_54712db9-5296-4d3b-8027-f4544bcf99f9",
          "value" : 
          [ "real-valued 3-D array" ] },
        
        { "name" : "scale",
          "purpose" : "Scale parameters",
          "htmlid" : "mw_2b2fc071-5962-4862-992f-a389b0a5e806",
          "value" : 
          [ "integer vector" ] },
        
        { "name" : "shear",
          "purpose" : "Shearing parameters",
          "htmlid" : "mw_4b3ca392-1dc1-4579-b6b6-4ac9093be850",
          "value" : 
          [ "integer vector" ] },
        
        { "name" : "cone",
          "purpose" : "Frequency cones",
          "htmlid" : "mw_43a3a188-449c-4333-9ca4-9ccb78cd4541",
          "value" : 
          [ "cell array of characters" ] } ],
      "examples" : 
      [ 
        { "url" : "shearletsystem.filterbank.html#mw_88e561ff-8787-45c5-8d21-de10664b7477",
          "open_command" : "openExample('wavelet\/ShearletSystemFiltersExample')",
          "title" : "Obtain Shearlet Filters" },
        
        { "url" : "shearletsystem.filterbank.html#mw_7840f609-ee83-4de5-b7f9-b0323c0af1a5",
          "open_command" : "openExample('wavelet\/PlotShearletFiltersExample')",
          "title" : "Plot Shearlet Filters" } ],
      "seealso" : 
      [ 
        { "url" : "shearletsystem.html",
          "name" : "shearletSystem" },
        
        { "url" : "shearletsystem.numshears.html",
          "name" : "numshears" } ] },
    { "href" : "ref\/shearletsystem.framebounds.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "framebounds",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "shearletSystem.framebounds",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Shearlet system frame bounds",
      "introduced" : "R2019b",
      "description" : "This MATLAB function returns the lower and upper frame bounds for the shearlet system sls.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[a,b] = framebounds(sls)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sls",
          "purpose" : "Shearlet system",
          "htmlid" : "mw_46c49c4f-e1d7-42ac-b273-fc841d9d51ba_sep_mw_cfe83093-7fe1-4583-bb5f-b378b74044c9",
          "value" : 
          [ "shearletSystem object" ] } ],
      "outputs" : 
      [ 
        { "name" : "a,b",
          "purpose" : "Lower and upper frame bounds",
          "htmlid" : "mw_6c224709-d46c-4e48-b5bb-2d7ca3710bd0",
          "value" : 
          [ "positive real numbers" ] } ],
      "examples" : 
      [ 
        { "url" : "shearletsystem.framebounds.html#mw_1824a322-0141-4c8c-9f7c-f2bdf0665e05",
          "open_command" : "openExample('wavelet\/ShearletSystemFrameBoundsExample')",
          "title" : "Shearlet System Frame Bounds" } ],
      "seealso" : 
      [ 
        { "url" : "shearletsystem.html",
          "name" : "shearletSystem" } ] },
    { "href" : "ref\/shearletsystem.isheart2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "isheart2",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "shearletSystem.isheart2",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Inverse shearlet transform",
      "introduced" : "R2019b",
      "description" : "This MATLAB function returns the inverse shearlet transform or shearlet synthesis based on the shearlet system sls and the shearlet transform coefficients cfs.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "imrec = isheart2(sls,cfs)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sls",
          "purpose" : "Shearlet system",
          "htmlid" : "mw_2d6ffd3e-3e95-4a9f-a8f9-a1f917377c92_sep_mw_cfe83093-7fe1-4583-bb5f-b378b74044c9",
          "value" : 
          [ "shearletSystem object" ] },
        
        { "name" : "cfs",
          "purpose" : "Shearlet transform coefficients",
          "htmlid" : "mw_4b531add-9511-4300-8f9d-5ebeaef04236",
          "value" : 
          [ "3-D array" ] } ],
      "outputs" : 
      [ 
        { "name" : "imrec",
          "purpose" : "Inverse shearlet transform",
          "htmlid" : "mw_f15b7bc5-fdac-4581-8d83-81f001640da7",
          "value" : 
          [ "real-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "shearletsystem.isheart2.html#mw_2c739e25-d286-4cf2-b27e-4c5bd60a2f65",
          "open_command" : "openExample('wavelet\/PerfectReconstructionOfTheShearletTransformExample')",
          "title" : "Perfect Reconstruction of Shearlet Transform" } ],
      "seealso" : 
      [ 
        { "url" : "shearletsystem.sheart2.html",
          "name" : "sheart2" },
        
        { "url" : "shearletsystem.html",
          "name" : "shearletSystem" } ] },
    { "href" : "ref\/shearletsystem.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "shearletSystem" },
        
        { "type" : "function",
          "name" : "shearletSystem",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Cone-adapted bandlimited shearlet system",
      "introduced" : "R2019b",
      "description" : "The shearletSystem object represents a cone-adapted bandlimited shearlet system.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "sls = shearletSystem",
            "sls = shearletSystem(Name,Value)" ] } ],
      "classpropertygroup" : 
      [ 
        { "classproperty" : 
          [ 
            { "name" : "ImageSize",
              "purpose" : "Image size",
              "htmlid" : "mw_770d2a29-492d-43e5-a97c-ebe1edfa1e72",
              "value" : 
              [ "[128 128]",
                "two-element integer-valued vector" ],
              "defaultvalue" : "[128 128]" },
            
            { "name" : "NumScales",
              "purpose" : "Number of scales",
              "htmlid" : "mw_d196b824-6220-4fc0-b99c-5023ea462e6b",
              "value" : 
              [ "4",
                "positive integer" ],
              "defaultvalue" : "4" },
            
            { "name" : "TransformType",
              "purpose" : "Shearlet system type",
              "htmlid" : "mw_d57fdd9c-ded6-48e6-a51a-86c2b871314a",
              "value" : 
              [ "'real'",
                "'complex'" ],
              "defaultvalue" : "'real'" },
            
            { "name" : "FilterBoundary",
              "purpose" : "Shearlet filter boundary handling",
              "htmlid" : "mw_8ffe2506-2b3f-4348-a4a0-0785c91e73fd",
              "value" : 
              [ "'periodic'",
                "'truncated'" ],
              "defaultvalue" : "'periodic'" },
            
            { "name" : "PreserveEnergy",
              "purpose" : "Shearlet system analysis normalization",
              "htmlid" : "mw_91b97469-18c9-44f8-afc1-e1488aab87b2",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" },
            
            { "name" : "Precision",
              "purpose" : "Shearlet system precision",
              "htmlid" : "mw_81176ed5-f507-48f2-afe2-cbd07f410905",
              "value" : 
              [ "'double'",
                "'single'" ],
              "defaultvalue" : "'double'" } ] } ],
      "examples" : 
      [ 
        { "url" : "shearletsystem.html#mw_28581b7f-659f-497d-b005-cc12af5b3cbb",
          "open_command" : "openExample('wavelet\/CreateAnEnergyPreservingShearletSystemExample')",
          "title" : "Create Energy-Preserving Shearlet System" } ],
      "seealso" : 
      [ 
        { "url" : "cwtft2.html",
          "name" : "cwtft2" },
        
        { "url" : "dddtree2.html",
          "name" : "dddtree2" } ] },
    { "href" : "ref\/shearletsystem.numshears.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "numshears",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "shearletSystem.numshears",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Number of shearlets",
      "introduced" : "R2019b",
      "description" : "This MATLAB function returns the number of shearlets in the shearlet system sls.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "NS = numshears(sls)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sls",
          "purpose" : "Shearlet system",
          "htmlid" : "mw_632b6601-5836-4181-a0d8-11a9bab3d142_sep_mw_cfe83093-7fe1-4583-bb5f-b378b74044c9",
          "value" : 
          [ "shearletSystem object" ] } ],
      "examples" : 
      [ 
        { "url" : "shearletsystem.numshears.html#mw_309e8b85-32d6-4095-aed8-e14945c8c697",
          "open_command" : "openExample('wavelet\/NumberOfShearletFiltersInAShearletSystemExample')",
          "title" : "Number of Shearlets in Shearlet System" } ],
      "seealso" : 
      [ 
        { "url" : "shearletsystem.html",
          "name" : "shearletSystem" },
        
        { "url" : "shearletsystem.filterbank.html",
          "name" : "filterbank" } ] },
    { "href" : "ref\/shearletsystem.sheart2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "sheart2",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "shearletSystem.sheart2",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Shearlet transform",
      "introduced" : "R2019b",
      "description" : "This MATLAB function returns the shearlet transform or shearlet analysis of the real-valued 2-D image im for the shearlet system sls.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "coefs = sheart2(sls,im)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sls",
          "purpose" : "Shearlet system",
          "htmlid" : "mw_897dacd7-f472-4ad5-9277-e7a3f9afc5c6_sep_mw_cfe83093-7fe1-4583-bb5f-b378b74044c9",
          "value" : 
          [ "shearletSystem object" ] },
        
        { "name" : "im",
          "purpose" : "Input image",
          "htmlid" : "mw_38ad3cd4-8682-4592-b01e-61c5efa01eb1",
          "value" : 
          [ "real-valued matrix" ] } ],
      "outputs" : 
      [ 
        { "name" : "coefs",
          "purpose" : "Shearlet coefficients",
          "htmlid" : "mw_6d1db136-030b-4009-938f-99a62b77cb80",
          "value" : 
          [ "3-D array" ] } ],
      "examples" : 
      [ 
        { "url" : "shearletsystem.sheart2.html#mw_22a656d7-7f85-488c-841a-a58a3bf7774c",
          "open_command" : "openExample('wavelet\/ShearletTransformOfACircleExample')",
          "title" : "Shearlet Transform of Circle" } ],
      "seealso" : 
      [ 
        { "url" : "shearletsystem.html",
          "name" : "shearletSystem" },
        
        { "url" : "shearletsystem.isheart2.html",
          "name" : "isheart2" } ] },
    { "href" : "ref\/signallabeldefinition.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "signalLabelDefinition" },
        
        { "type" : "function",
          "name" : "signalLabelDefinition",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Create signal label definition",
      "introduced" : "R2018b",
      "description" : "Use signalLabelDefinition to create signal label definitions for data sets.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "sld = signalLabelDefinition(name)",
            "sld = signalLabelDefinition(name,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "name",
          "purpose" : "Label name",
          "htmlid" : "mw_7b0b9bb1-019c-41ca-8c9e-0f19b8b09106",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "classpropertygroup" : 
      [ 
        { "classproperty" : 
          [ 
            { "name" : "Name",
              "purpose" : "Name of label",
              "htmlid" : "mw_3b8e3014-977a-48fe-8a37-bb665696d28c",
              "value" : 
              [ "character vector",
                "string scalar" ] },
            
            { "name" : "LabelType",
              "purpose" : "Type of label",
              "htmlid" : "mw_df8f6bd8-3baf-488a-9be1-a0c4b237c596",
              "value" : 
              [ "\"attribute\"",
                "\"roi\"",
                "\"point\"",
                "\"attributeFeature\"",
                "\"roiFeature\"" ],
              "defaultvalue" : "\"attribute\"" },
            
            { "name" : "LabelDataType",
              "purpose" : "Data type of label",
              "htmlid" : "mw_8f90bc39-2f59-409a-9e0b-7dea67af7379",
              "value" : 
              [ "\"logical\"",
                "\"categorical\"",
                "\"numeric\"",
                "\"string\"",
                "\"table\"",
                "\"timetable\"" ],
              "defaultvalue" : "\"logical\"" },
            
            { "name" : "Categories",
              "purpose" : "Label category names",
              "htmlid" : "mw_4ed80261-e60b-4dec-8f84-a8e53002834a",
              "value" : 
              [ "string array",
                "cell array of character vectors" ] },
            
            { "name" : "ROILimitsDataType",
              "purpose" : "Data type of ROI limits",
              "htmlid" : "mw_0aac3bc4-905a-4dab-b242-e821d3300d95",
              "value" : 
              [ "\"double\"",
                "\"duration\"" ],
              "defaultvalue" : "\"double\"" },
            
            { "name" : "PointLocationsDataType",
              "purpose" : "Data type of point locations",
              "htmlid" : "mw_9edb50cb-d237-456f-aa7d-5ad9a5bc47d9",
              "value" : 
              [ "\"double\"",
                "\"duration\"" ],
              "defaultvalue" : "\"double\"" },
            
            { "name" : "ValidationFunction",
              "purpose" : "Validation function",
              "htmlid" : "mw_7c4b2c62-ade1-4ce2-846e-54b00fb6417a",
              "value" : 
              [ "function handle" ] },
            
            { "name" : "DefaultValue",
              "purpose" : "Default value of label",
              "htmlid" : "mw_bcd2da67-ad6a-4ad4-bb3a-fd5cad22abff",
              "value" : 
              [ "[]",
                "LabelDataType value" ],
              "defaultvalue" : "[]" },
            
            { "name" : "Description",
              "purpose" : "Label description",
              "htmlid" : "mw_fc6dc324-cf5a-4a8b-93a4-7954576f52c0",
              "value" : 
              [ "character vector",
                "string scalar" ] },
            
            { "name" : "Tag",
              "purpose" : "Label tag identifier",
              "htmlid" : "mw_66160d6c-2b5a-4bd9-9255-f82ec65aeac1",
              "value" : 
              [ "character vector",
                "string scalar" ] },
            
            { "name" : "Sublabels",
              "purpose" : "Array of sublabels",
              "htmlid" : "mw_6e0e7002-f3ce-487f-af22-550c013a31ed",
              "value" : 
              [ "signal label definition object" ] },
            
            { "name" : "FrameSize",
              "purpose" : "Frame size",
              "htmlid" : "mw_06c09734-665f-43c6-a130-15492ef9d8f2",
              "value" : 
              [ "numeric scalar" ] },
            
            { "name" : "FrameOverlapLength",
              "purpose" : "Overlap length of adjacent frames",
              "htmlid" : "mw_e737e2e9-a9a7-413c-8e9e-baf487d21c31",
              "value" : 
              [ "0",
                "numeric scalar" ],
              "defaultvalue" : "0" },
            
            { "name" : "FrameRate",
              "purpose" : "Frame rate",
              "htmlid" : "mw_1fd22891-70b7-4264-b22a-0564d69571af",
              "value" : 
              [ "0",
                "numeric scalar" ],
              "defaultvalue" : "0" } ] } ],
      "examples" : 
      [ 
        { "url" : "signallabeldefinition.html#mw_3f44690e-a7cc-4f48-be52-cf357e6b739b",
          "open_command" : "openExample('predmaint_shared\/LabelDefinitionsForWhaleSongsExample')",
          "title" : "Label Definitions for Whale Songs" },
        
        { "url" : "signallabeldefinition.html#mw_4c168f92-c135-4c3d-a5b8-05eafd3f03f3",
          "open_command" : "openExample('predmaint_shared\/CountLabelValuesExample')",
          "title" : "Count Label Values and Create Datastores" } ],
      "seealso" : 
      [ 
        { "url" : "..\/..\/signal\/ref\/signallabeler-app.html",
          "name" : "Signal Labeler" },
        
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "..\/..\/signal\/ref\/signalmask.html",
          "name" : "signalMask" } ] },
    { "href" : "ref\/signallabeldefinition.labeldefinitionshierarchy.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "labelDefinitionsHierarchy",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "signalLabelDefinition.labelDefinitionsHierarchy",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Get hierarchical list of label and sublabel names",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns a character array with a hierarchical list of label and sublabel names contained in lbldefs, a vector of signalLabelDefinition objects.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "str = labelDefinitionsHierarchy(lbldefs)",
            "str = labelDefinitionsHierarchy(lss)" ] } ],
      "inputs" : 
      [ 
        { "name" : "lbldefs",
          "purpose" : "Signal label definitions",
          "htmlid" : "mw_433ef0bf-aed1-40e8-a12b-43ceb08e1651_sep_mw_f956ed14-de04-4d5e-b888-16e834683f0f",
          "value" : 
          [ "signalLabelDefinition object",
            "vector of signalLabelDefinition objects" ] },
        
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_433ef0bf-aed1-40e8-a12b-43ceb08e1651_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] } ],
      "outputs" : 
      [ 
        { "name" : "str",
          "purpose" : "List of label and sublabel names",
          "htmlid" : "mw_649a3ffd-28fc-4cbb-b3b6-a1ebda8d561a",
          "value" : 
          [ "character array" ] } ],
      "examples" : 
      [ 
        { "url" : "signallabeldefinition.labeldefinitionshierarchy.html#mw_57f1fa29-71f0-4be9-9ba0-4dc6da58c12b",
          "open_command" : "openExample('predmaint_shared\/LabelHierarchyExample')",
          "title" : "Label Hierarchy" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/signallabeldefinition.labeldefinitionssummary.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "labelDefinitionsSummary",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "signalLabelDefinition.labelDefinitionsSummary",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Get summary table of signal label definitions",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns a table, T, with the properties of the label definitions contained in lbldefs, a vector of signalLabelDefinition objects.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = labelDefinitionsSummary(lbldefs)",
            "T = labelDefinitionsSummary(lss)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "T = labelDefinitionsSummary(___,lblname)",
            "T = labelDefinitionsSummary(___,lblname,'sublbls')" ] } ],
      "inputs" : 
      [ 
        { "name" : "lbldefs",
          "purpose" : "Signal label definitions",
          "htmlid" : "mw_cd07dcf9-0a62-4a4c-a490-10ab630dbcdd_sep_mw_f956ed14-de04-4d5e-b888-16e834683f0f",
          "value" : 
          [ "signalLabelDefinition object",
            "vector of signalLabelDefinition objects" ] },
        
        { "name" : "lss",
          "purpose" : "Labeled signal set",
          "htmlid" : "mw_cd07dcf9-0a62-4a4c-a490-10ab630dbcdd_sep_mw_2f819912-afe7-45f1-a717-85f1be7c14ba",
          "value" : 
          [ "labeledSignalSet object" ] },
        
        { "name" : "lblname",
          "purpose" : "Label or sublabel name",
          "htmlid" : "mw_cd07dcf9-0a62-4a4c-a490-10ab630dbcdd_sep_mw_f5a84ef3-7074-411e-9b04-f926d42f0bef",
          "value" : 
          [ "character vector",
            "string scalar",
            "cell array of character vectors",
            "string array" ] } ],
      "outputs" : 
      [ 
        { "name" : "T",
          "purpose" : "Summary table",
          "htmlid" : "mw_0aace583-80ce-4fea-aa91-9a46d69b20df",
          "value" : 
          [ "table" ] } ],
      "examples" : 
      [ 
        { "url" : "signallabeldefinition.labeldefinitionssummary.html#mw_cc653df1-15e0-49db-86cb-7b6ce0150446",
          "open_command" : "openExample('predmaint_shared\/LabelPropertiesExample')",
          "title" : "Label Properties" } ],
      "seealso" : 
      [ 
        { "url" : "labeledsignalset.html",
          "name" : "labeledSignalSet" },
        
        { "url" : "signallabeldefinition.html",
          "name" : "signalLabelDefinition" } ] },
    { "href" : "ref\/signalmultiresolutionanalyzer-app.html",
      "refentity" : 
      [ 
        { "type" : "app",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "type" : "function",
          "name" : "signalMultiresolutionAnalyzer",
          "fcntype" : "applauncher" } ],
      "refpurpose" : "Decompose signals into time-aligned components",
      "introduced" : "R2018b",
      "description" : "The Signal Multiresolution Analyzer app is an interactive tool for visualizing multilevel wavelet- and data adaptive-based decompositions of real-valued 1-D signals and comparing results.",
      "appthumbnail" : 
      { "fileref" : "ref\/mra-app.png",
        "alt" : "Signal Multiresolution Analyzer app" },
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "signalMultiresolutionAnalyzer",
            "signalMultiresolutionAnalyzer(sig)" ] } ],
      "examples" : 
      [ 
        { "url" : "signalmultiresolutionanalyzer-app.html#mw_fa353bb2-25e3-47fe-a395-96aa5202bec9",
          "open_command" : "openExample('wavelet\/VisualizeTimeAlignedWaveletDecompositionExample')",
          "title" : "Visualize Time-Aligned MODWTMRA Decomposition" },
        
        { "url" : "signalmultiresolutionanalyzer-app.html#mw_e236a5fe-cbd9-4e1c-9c86-8082a7f2dc54",
          "open_command" : "openExample('wavelet\/CompareMODWTMRAAndEMDDecompositionsExample')",
          "title" : "Compare MODWTMRA and EMD Decompositions" },
        
        { "url" : "signalmultiresolutionanalyzer-app.html#mw_0bf10b73-ce4b-4fd4-a9ed-727281ab3617",
          "open_command" : "openExample('wavelet\/GenerateMODWTMRADecompositionScriptExample')",
          "title" : "Duplicate Decomposition and Generate Script" } ],
      "seealso" : 
      [ 
        { "url" : "waveletsignalanalyzer-app.html",
          "name" : "Wavelet Signal Analyzer" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" },
        
        { "url" : "wavelettimefrequencyanalyzer-app.html",
          "name" : "Wavelet Time-Frequency Analyzer" },
        
        { "url" : "emd.html",
          "name" : "emd" },
        
        { "url" : "ewt.html",
          "name" : "ewt" },
        
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "modwtmra.html",
          "name" : "modwtmra" },
        
        { "url" : "tqwt.html",
          "name" : "tqwt" },
        
        { "url" : "tqwtmra.html",
          "name" : "tqwtmra" },
        
        { "url" : "vmd.html",
          "name" : "vmd" } ] },
    { "href" : "ref\/swt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "swt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Discrete stationary wavelet transform 1-D",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the stationary wavelet decomposition of the signal x at level n using the wavelet wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "swc = swt(x,n,wname)",
            "swc = swt(x,n,LoD,HiD)",
            "[swa,swd] = swt(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "mw_b48a0fcf-f5b5-4788-bc2b-e057cab67563",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "n",
          "purpose" : "Level of decomposition",
          "htmlid" : "mw_7515c401-015b-4f16-8702-e4a10e6c2543",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_e2889da1-65d0-498d-a339-063dd9ff56ce",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoD,HiD",
          "purpose" : "Wavelet decomposition filters",
          "htmlid" : "mw_455b3f69-7481-4234-9739-e3887f77b3ab",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "outputs" : 
      [ 
        { "name" : "swc",
          "purpose" : "Stationary wavelet decomposition",
          "htmlid" : "mw_4560a5b8-850d-490e-9d8a-64388086d6dc",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "swa",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_ad353897-22c0-4ae1-be1b-30147f6354e7",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "swd",
          "purpose" : "Detail coefficients",
          "htmlid" : "mw_5b73073b-3c6e-4cf1-a2f6-7368a0985607",
          "value" : 
          [ "real-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "swt.html#mw_f3a6c0a0-4099-4de2-a53d-79f87438c694",
          "open_command" : "openExample('wavelet\/PerformingAStationaryWaveletDecompositionExample')",
          "title" : "Multilevel Stationary Wavelet Decomposition" } ],
      "seealso" : 
      [ 
        { "url" : "dwt.html",
          "name" : "dwt" },
        
        { "url" : "iswt.html",
          "name" : "iswt" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "modwt.html",
          "name" : "modwt" } ] },
    { "href" : "ref\/swt2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "swt2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Discrete stationary 2-D wavelet transform",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the approximation coefficients A and the horizontal, vertical, and diagonal detail coefficients H, V, and D, respectively, of the stationary 2-D wavelet decomposition of the image X at level N using the wavelet wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[A,H,V,D] = swt2(X,N,wname)",
            "[A,H,V,D] = swt2(X,N,LoD,HiD)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "swc = swt2(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input image",
          "htmlid" : "mw_48be2a6f-a225-40df-830c-c963df3667b0",
          "value" : 
          [ "2-D matrix",
            "3-D array" ] },
        
        { "name" : "N",
          "purpose" : "Level of decomposition",
          "htmlid" : "mw_e2ea4c28-5d85-4ff0-8fb9-59bc62dedcdc",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_f3f4ec54-b72f-4e08-b868-d002c9586e6a",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoD,HiD",
          "purpose" : "Wavelet decomposition filters",
          "htmlid" : "mw_f7efee91-1800-43bd-be19-6f137fd18f51",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "outputs" : 
      [ 
        { "name" : "A",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_e6dc6217-7d37-415c-94f1-e059d66c7521",
          "value" : 
          [ "2-D matrix",
            "3-D array",
            "4-D array" ] },
        
        { "name" : "H,V,D",
          "purpose" : "Detail coefficients",
          "htmlid" : "mw_7aa8b65e-d818-4ff5-ba1f-e55f4b624186",
          "value" : 
          [ "2-D matrix",
            "3-D array",
            "4-D array" ] },
        
        { "name" : "swc",
          "purpose" : "Stationary wavelet decomposition",
          "htmlid" : "mw_bd9b1527-1c08-4064-b496-3daf1353e710",
          "value" : 
          [ "3-D array",
            "4-D array" ] } ],
      "examples" : 
      [ 
        { "url" : "swt2.html#mw_ca46f28e-53b4-477e-9dc7-bc7ce64d21ba",
          "open_command" : "openExample('wavelet\/ExtractAndDisplay2DStationaryWaveletDecompositionExample')",
          "title" : "Extract and Display 2-D Stationary Wavelet Decomposition" },
        
        { "url" : "swt2.html#mw_dc1b9c6f-3490-4fc6-a899-a9af194fa5d7",
          "open_command" : "openExample('wavelet\/StationaryWaveletTransformTruecolorExample')",
          "title" : "Stationary Wavelet Transform of RGB Image" } ],
      "seealso" : 
      [ 
        { "url" : "dwt2.html",
          "name" : "dwt2" },
        
        { "url" : "iswt2.html",
          "name" : "iswt2" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" } ] },
    { "href" : "ref\/symaux.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "symaux",
          "fcntype" : "simple" } ],
      "refpurpose" : "Symlet wavelet filter computation",
      "introduced" : "preR2006a",
      "description" : "The symaux function generates the scaling filter coefficients for the \"least asymmetric\" Daubechies wavelets.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "w = symaux(n)",
            "w = symaux(___,sumw)" ] } ],
      "inputs" : 
      [ 
        { "name" : "n",
          "purpose" : "Order of symlet",
          "htmlid" : "mw_60b98860-ca66-497f-a465-bd9c34ce2c79",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "sumw",
          "purpose" : "Sum of coefficients",
          "htmlid" : "mw_426dce2f-7ccb-419d-98c6-c8348c920c15",
          "value" : 
          [ "1",
            "positive real number" ],
          "defaultvalue" : "1" } ],
      "outputs" : 
      [ 
        { "name" : "w",
          "purpose" : "Filter coefficients",
          "htmlid" : "mw_180c5980-9013-4896-b3f8-fa40ed068c17",
          "value" : 
          [ "row vector" ] } ],
      "examples" : 
      [ 
        { "url" : "symaux.html#mw_5c5afa0b-6d54-47f6-872a-ee9b2061bb7e",
          "open_command" : "openExample('wavelet\/SymletScalingFilterCoefsUnitNormExample')",
          "title" : "Unit Norm Scaling Filter Coefficients" },
        
        { "url" : "symaux.html#mw_e7ff4820-fc68-4965-82ef-d1ee39b0894a",
          "open_command" : "openExample('wavelet\/LeastAsymExtremalPolyExample')",
          "title" : "Symlet and Daubechies Scaling Filters" },
        
        { "url" : "symaux.html#mw_472cedac-3a2a-4fb7-a90d-fc05982b7017",
          "open_command" : "openExample('wavelet\/LeastAsymmetricWaveletExample')",
          "title" : "Least Asymmetric Wavelet and Phase" },
        
        { "url" : "symaux.html#mw_98f34a92-105a-4b12-beec-c2ea52c54f7a",
          "open_command" : "openExample('wavelet\/ExtremalPhaseExample')",
          "title" : "Extremal Phase" } ],
      "seealso" : 
      [ 
        { "url" : "symwavf.html",
          "name" : "symwavf" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" },
        
        { "url" : "dbaux.html",
          "name" : "dbaux" } ] },
    { "href" : "ref\/symwavf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "symwavf",
          "fcntype" : "simple" } ],
      "refpurpose" : "Symlet wavelet filter",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the scaling filter associated with the Symlet wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "f = symwavf(wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Symlet wavelet",
          "htmlid" : "mw_99de4696-b182-4894-866d-4b7f96695e2a",
          "value" : 
          [ "'symN'" ] } ],
      "examples" : 
      [ 
        { "url" : "symwavf.html#mw_2cda009f-444e-45b0-b03a-315692eb5c7f",
          "open_command" : "openExample('wavelet\/ScalingFilterAssociatedWithTheSymletWaveletExample')",
          "title" : "Scaling Filter Associated With the Symlet Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "symaux.html",
          "name" : "symaux" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" } ] },
    { "href" : "ref\/thselect.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "thselect",
          "fcntype" : "simple" } ],
      "refpurpose" : "Threshold selection for denoising",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the threshold value adapted to the 1-D signal X using the selection rule specified by TPTR.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "THR = thselect(X,TPTR)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "mw_144fb0cb-8133-44bd-ab60-0a627fa0ce72",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "TPTR",
          "purpose" : "Threshold selection rule",
          "htmlid" : "mw_9d24ed05-c82b-4229-8cb1-6f36545555f5",
          "value" : 
          [ "'rigrsure'",
            "'heursure'",
            "'sqtwolog'",
            "'minimaxi'" ] } ],
      "outputs" : 
      [ 
        { "name" : "THR",
          "purpose" : "Threshold",
          "htmlid" : "mw_3f5f07d2-c808-475a-9a3f-6a513c670891",
          "value" : 
          [ "positive real number" ] } ],
      "examples" : 
      [ 
        { "url" : "thselect.html#mw_bd0271a2-aa02-45c8-aa6e-4c46452f4e0d",
          "open_command" : "openExample('wavelet\/ThresholdSelectionRulesExample')",
          "title" : "Threshold Selection Rules" } ],
      "seealso" : 
      [ 
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wdenoise2.html",
          "name" : "wdenoise2" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" } ] },
    { "href" : "ref\/tnodes.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "tnodes",
          "fcntype" : "simple" } ],
      "refpurpose" : "Determine terminal nodes",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the indices of terminal nodes of the tree T.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "N = tnodes(T)",
            "N = tnodes(T,'deppos')",
            "[N,K] = tnodes(T)",
            "[N,K] = tnodes(T,'deppos'), M = N(K)" ] } ],
      "seealso" : 
      [ 
        { "url" : "leaves.html",
          "name" : "leaves" },
        
        { "url" : "noleaves.html",
          "name" : "noleaves" },
        
        { "url" : "ntree.wtreemgr.html",
          "name" : "wtreemgr" } ] },
    { "href" : "ref\/tqwt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "tqwt",
          "fcntype" : "simple" } ],
      "refpurpose" : "Tunable Q-factor wavelet transform",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the tunable Q-factor wavelet transform (TQWT) of x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wt = tqwt(x)",
            "wt = tqwt(x,Name=Value)",
            "[wt,info] = tqwt(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "mw_5552f0dd-90fc-47ef-80f0-04d795b271dd",
          "value" : 
          [ "vector",
            "matrix",
            "3-D array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Level",
              "purpose" : "Decomposition level",
              "htmlid" : "mw_ecb1cb5d-2715-49d5-ac3a-65247142b302",
              "value" : 
              [ "positive integer" ] },
            
            { "name" : "QualityFactor",
              "purpose" : "Quality factor",
              "htmlid" : "mw_62220ec0-6083-4923-a40b-e684122c593e",
              "value" : 
              [ "1",
                "positive scalar" ],
              "defaultvalue" : "1" } ] } ],
      "outputs" : 
      [ 
        { "name" : "wt",
          "purpose" : "Tunable Q-factor wavelet transform",
          "htmlid" : "mw_0cfc5625-0674-4b78-aa27-ecd508293001",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "info",
          "purpose" : "Transform information",
          "htmlid" : "mw_bbec611f-2db6-48df-812d-2109f8e34f97",
          "value" : 
          [ "structure array" ] } ],
      "examples" : 
      [ 
        { "url" : "tqwt.html#mw_37e5d846-6694-4d58-87ff-43782db2d138",
          "open_command" : "openExample('wavelet\/TunableQfactorWaveletTransformOfMultisignalExample')",
          "title" : "Tunable Q-factor Wavelet Transform of Multisignal" },
        
        { "url" : "tqwt.html#mw_0b8cb900-8ec3-4514-b94e-9a42d4468ed5",
          "open_command" : "openExample('wavelet\/InspectTQWTInformationStructureExample')",
          "title" : "Inspect TQWT Information Structure" } ],
      "seealso" : 
      [ 
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "itqwt.html",
          "name" : "itqwt" },
        
        { "url" : "tqwtmra.html",
          "name" : "tqwtmra" } ] },
    { "href" : "ref\/tqwtmra.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "tqwtmra",
          "fcntype" : "simple" } ],
      "refpurpose" : "Tunable Q-factor multiresolution analysis",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the tunable Q-factor wavelet multiresolution analysis (MRA) for the TQWT analysis, wt, obtained with the default quality factor of 1.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "mra = tqwtmra(wt,n)",
            "mra = tqwtmra(wt,n,QualityFactor=qf)",
            "tqwtmra(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wt",
          "purpose" : "Tunable Q-factor wavelet transform",
          "htmlid" : "mw_a940fb81-8126-48c3-a2a7-3c1c7e2e6368",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "n",
          "purpose" : "Original signal length",
          "htmlid" : "mw_b3dcd4a8-2b5b-4d3b-a1b0-5641f400cae4",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "qf",
          "purpose" : "Quality factor",
          "htmlid" : "mw_1b562aee-aabb-47ad-ac36-edaec0b7a7ea",
          "value" : 
          [ "1",
            "positive scalar" ],
          "defaultvalue" : "1" } ],
      "outputs" : 
      [ 
        { "name" : "mra",
          "purpose" : "Multiresolution analysis",
          "htmlid" : "mw_d1884dbe-e548-4528-8f14-de187498dc6c",
          "value" : 
          [ "array" ] } ],
      "examples" : 
      [ 
        { "url" : "tqwtmra.html#mw_24f5821d-753c-49b6-b4e5-00f6ed67b6ed",
          "open_command" : "openExample('wavelet\/PerformTunableQfactorMultiresolutionAnalysisExample')",
          "title" : "Perform Tunable Q-factor Multiresolution Analysis" },
        
        { "url" : "tqwtmra.html#mw_24a80dfb-be86-490f-8365-e4473bd0e08a",
          "open_command" : "openExample('wavelet\/IdentifyTunableQfactorMRASubbandsByEnergyExample')",
          "title" : "Identify Tunable Q-factor MRA Subbands by Energy" } ],
      "seealso" : 
      [ 
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "tqwt.html",
          "name" : "tqwt" },
        
        { "url" : "itqwt.html",
          "name" : "itqwt" } ] },
    { "href" : "ref\/treedpth.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "treedpth",
          "fcntype" : "simple" } ],
      "refpurpose" : "Tree depth",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the depth D of the tree T.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "D = treedpth(T)" ] } ],
      "seealso" : 
      [ 
        { "url" : "ntree.wtreemgr.html",
          "name" : "wtreemgr" } ] },
    { "href" : "ref\/treeord.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "treeord",
          "fcntype" : "simple" } ],
      "refpurpose" : "Tree order",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the order ORD of the tree T.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "ORD = treeord(T)" ] } ],
      "seealso" : 
      [ 
        { "url" : "ntree.wtreemgr.html",
          "name" : "wtreemgr" } ] },
    { "href" : "ref\/upcoef.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "upcoef",
          "fcntype" : "simple" } ],
      "refpurpose" : "Direct reconstruction from 1-D wavelet coefficients",
      "introduced" : "preR2006a",
      "description" : "upcoef is a one-dimensional wavelet analysis function.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "y = upcoef(o,x,wname)",
            "y = upcoef(o,x,LoR,HiR)",
            "y = upcoef(o,x,wname,n)",
            "y = upcoef(o,x,LoR,HiR,n)",
            "y = upcoef(o,x,wname,n,l)",
            "y = upcoef(o,x,LoR,HiR,n,l)" ] } ],
      "inputs" : 
      [ 
        { "name" : "o",
          "purpose" : "Type of reconstructed coefficients",
          "htmlid" : "mw_ddbbf0d9-cae6-406c-ab84-90205165205a",
          "value" : 
          [ "\"a\"",
            "\"d\"" ] },
        
        { "name" : "x",
          "purpose" : "Signal",
          "htmlid" : "mw_47a064d8-e359-4bfd-926e-4fee16be9faa",
          "value" : 
          [ "vector" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_78b70586-3ee6-422b-b3b4-135460a887cc",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "n",
          "purpose" : "Number of reconstruction steps",
          "htmlid" : "mw_7cd6a874-eeb1-48e5-80b1-9d4184ea6f69",
          "value" : 
          [ "1",
            "positive integer" ],
          "defaultvalue" : "1" },
        
        { "name" : "l",
          "purpose" : "Length of central portion",
          "htmlid" : "mw_64254324-0b13-4726-82fe-666709222d33",
          "value" : 
          [ "0",
            "nonnegative integer" ],
          "defaultvalue" : "0" },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_b05f70cc-dcca-443b-b201-e3217b92a757",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "outputs" : 
      [ 
        { "name" : "y",
          "purpose" : "Reconstructed coefficients",
          "htmlid" : "mw_65aa3386-9088-41a3-b31b-df237c2359b4",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "upcoef.html#mw_c7d254e9-60db-4d25-a6dd-0237955e5817",
          "open_command" : "openExample('wavelet\/ReconstructWaveletCoefficientsUpCoefExample')",
          "title" : "Reconstruct Wavelet Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "idwt.html",
          "name" : "idwt" } ] },
    { "href" : "ref\/upcoef2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "upcoef2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Direct reconstruction from 2-D wavelet coefficients",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function computes the N-step reconstructed coefficients of matrix X and takes the central part of size S.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Y = upcoef2(O,X,wname,N,S)",
            "Y = upcoef2(O,X,Lo_R,Hi_R,N,S)",
            "Y = upcoef2(O,X,wname,N)",
            "Y = upcoef2(O,X,Lo_R,Hi_R,N)",
            "Y = upcoef2(O,X,wname)",
            "Y = upcoef2(O,X,wname,1)",
            "Y = upcoef2(O,X,Lo_R,Hi_R)",
            "Y = upcoef2(O,X,Lo_R,Hi_R,1)" ] } ],
      "seealso" : 
      [ 
        { "url" : "idwt2.html",
          "name" : "idwt2" } ] },
    { "href" : "ref\/upwlev.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "upwlev",
          "fcntype" : "simple" } ],
      "refpurpose" : "Single-level reconstruction of 1-D wavelet decomposition",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function performs the single-level reconstruction of the wavelet decomposition structure [c,l] using the wavelet specified by wname, giving the new decomposition structure [nc,nl], and extracts the last approximation coefficients vector ca.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[nc,nl,ca] = upwlev(c,l,wname)",
            "[nc,nl,ca] = upwlev(c,l,LoR,HiR)" ] } ],
      "inputs" : 
      [ 
        { "name" : "c",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_cbd6b52e-07f8-4ed9-b140-aeb4873d5338",
          "value" : 
          [ "vector" ] },
        
        { "name" : "l",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "mw_a4ef46e0-bc1b-4f7a-957e-dfdd78a42bbf",
          "value" : 
          [ "vector" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_ea16865f-7151-4b5f-9dc2-349b21f7858d",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_e348c2b7-ea5a-4fdd-9637-667d189debe1",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "outputs" : 
      [ 
        { "name" : "nc",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_7d4b5ff9-4575-4be7-833a-080825550dab",
          "value" : 
          [ "vector" ] },
        
        { "name" : "nl",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "mw_a5e42f1b-fde9-459b-befe-53fab0c2d6fd",
          "value" : 
          [ "vector" ] },
        
        { "name" : "ca",
          "purpose" : "Approximation coefficients",
          "htmlid" : "mw_f3fcd38b-5541-4678-924a-af45c0026f4b",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "upwlev.html#mw_bf8f09cb-23e3-4a38-9bae-eaba78253837",
          "open_command" : "openExample('wavelet\/SingleLevelReconstructionOf1DWaveletDecompositionExample')",
          "title" : "Single-Level Reconstruction of 1-D Wavelet Decomposition" } ],
      "seealso" : 
      [ 
        { "url" : "idwt.html",
          "name" : "idwt" },
        
        { "url" : "upcoef.html",
          "name" : "upcoef" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" } ] },
    { "href" : "ref\/upwlev2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "upwlev2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Single-level reconstruction of 2-D wavelet decomposition",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function performs the single-level reconstruction of wavelet decomposition structure [C,S] giving the new one [NC,NS], and extracts the last approximation coefficients matrix cA.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[NC,NS,cA] = upwlev2(C,S,wname)",
            "[NC,NS,cA] = upwlev2(C,S,Lo_R,Hi_R)" ] } ],
      "seealso" : 
      [ 
        { "url" : "idwt2.html",
          "name" : "idwt2" },
        
        { "url" : "upcoef2.html",
          "name" : "upcoef2" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" } ] },
    { "href" : "ref\/vmd.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "vmd",
          "fcntype" : "simple" } ],
      "refpurpose" : "Variational mode decomposition",
      "introduced" : "R2020a",
      "description" : "This MATLAB function returns the variational mode decomposition of x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "imf = vmd(x)",
            "[imf,residual] = vmd(x)",
            "[imf,residual,info] = vmd(x)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = vmd(x,Name=Value)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "vmd(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Uniformly sampled time-domain signal",
          "htmlid" : "mw_397ad621-09ed-453c-9bb6-266dd98afdba",
          "value" : 
          [ "vector",
            "timetable" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "AbsoluteTolerance",
              "purpose" : "Mode convergence absolute tolerance",
              "htmlid" : "mw_cd9e3fb6-2b33-4fb4-a77f-87c79973a11d",
              "value" : 
              [ "5e-6",
                "positive real scalar" ],
              "defaultvalue" : "5e-6" },
            
            { "name" : "RelativeTolerance",
              "purpose" : "Mode convergence relative tolerance",
              "htmlid" : "mw_4f31ba1c-b66f-48fc-9dbe-0074cfe48da2",
              "value" : 
              [ "AbsoluteTolerance*1e3",
                "positive real scalar" ],
              "defaultvalue" : "AbsoluteTolerance*1e3" },
            
            { "name" : "MaxIterations",
              "purpose" : "Maximum number of optimization iterations",
              "htmlid" : "mw_760f6f46-27ff-4521-bc3d-f386c0ac5cbe",
              "value" : 
              [ "500",
                "positive scalar integer" ],
              "defaultvalue" : "500" },
            
            { "name" : "NumIMF",
              "purpose" : "Number of IMFs extracted",
              "htmlid" : "mw_918ea576-c3a7-46a5-98ee-d40e261d0f9a",
              "value" : 
              [ "5",
                "positive scalar integer" ],
              "defaultvalue" : "5" },
            
            { "name" : "CentralFrequencies",
              "purpose" : "Initial central IMF frequencies",
              "htmlid" : "mw_83384d0f-3e50-4b88-9959-ad7687a0cb0b",
              "value" : 
              [ "vector" ] },
            
            { "name" : "InitialIMFs",
              "purpose" : "Initial IMFs",
              "htmlid" : "mw_97440e68-b6de-4aad-83d0-387d0ab10893",
              "value" : 
              [ "zero matrix",
                "real matrix" ],
              "defaultvalue" : "zero matrix" },
            
            { "name" : "PenaltyFactor",
              "purpose" : "Penalty factor",
              "htmlid" : "mw_5f51349b-6ba0-4a1c-a824-1d1b876f8962",
              "value" : 
              [ "1000",
                "positive real scalar" ],
              "defaultvalue" : "1000" },
            
            { "name" : "InitialLM",
              "purpose" : "Initial Lagrange multiplier",
              "htmlid" : "mw_6d2a1117-9971-4251-8281-d821b78ceb9d",
              "value" : 
              [ "complex vector of zeros",
                "complex vector" ],
              "defaultvalue" : "complex vector of zeros" },
            
            { "name" : "LMUpdateRate",
              "purpose" : "Update rate for Lagrange multiplier",
              "htmlid" : "mw_2ac9797d-9f9b-4c49-aaf1-0056211733bb",
              "value" : 
              [ "0.01",
                "real scalar" ],
              "defaultvalue" : "0.01" },
            
            { "name" : "InitializeMethod",
              "purpose" : "Method to initialize central frequencies",
              "htmlid" : "mw_f2047010-2a3e-4df8-bf06-3edcf25ef261",
              "value" : 
              [ "\"peaks\"",
                "\"random\"",
                "\"grid\"" ],
              "defaultvalue" : "\"peaks\"" },
            
            { "name" : "Display",
              "purpose" : "Toggle progress display in command window",
              "htmlid" : "mw_dc42bb3f-669d-4eaa-b61c-f1df8215473e",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" } ] } ],
      "outputs" : 
      [ 
        { "name" : "imf",
          "purpose" : "Intrinsic mode function",
          "htmlid" : "mw_ec55149f-efb3-458c-b69c-e4d1087873b6",
          "value" : 
          [ "matrix",
            "timetable" ] },
        
        { "name" : "residual",
          "purpose" : "Residual signal",
          "htmlid" : "mw_7d79bdda-75b7-4f3e-848f-ac96a3447023",
          "value" : 
          [ "column vector",
            "single data column timetable" ] },
        
        { "name" : "info",
          "purpose" : "Additional information for diagnostics",
          "htmlid" : "mw_403c1366-0558-4a2d-a86f-7639fb497944",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "vmd.html#mw_025cea2f-9ebf-48b2-9117-b1262fa3105a",
          "open_command" : "openExample('predmaint_shared\/VariationalModeDecompositionOfDialToneSignalExample')",
          "title" : "Variational Mode Decomposition of Dial Tone Signal" },
        
        { "url" : "vmd.html#mw_9ae5866f-c810-427e-85ca-b380c9f5ddb6",
          "open_command" : "openExample('predmaint_shared\/VMDOfMulticomponentSignalExample')",
          "title" : "VMD of Multicomponent Signal" },
        
        { "url" : "vmd.html#mw_d8a2ca69-2e4d-46ea-b969-9d6ba184f78b",
          "open_command" : "openExample('predmaint_shared\/VMDOfAPiecewiseSignalExample')",
          "title" : "VMD of Piecewise Signal" },
        
        { "url" : "vmd.html#mw_baefc34d-b019-4584-a625-bfc920e57526",
          "open_command" : "openExample('predmaint_shared\/NoiseRemovalFromECGSignalUsingVMDExample')",
          "title" : "Noise Removal from ECG Signal Using VMD" } ],
      "seealso" : 
      [ 
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "hht.html",
          "name" : "hht" },
        
        { "url" : "emd.html",
          "name" : "emd" } ] },
    { "href" : "ref\/wave2lp.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wave2lp",
          "fcntype" : "simple" } ],
      "refpurpose" : "Laurent polynomials associated with wavelet",
      "introduced" : "R2021b",
      "description" : "This MATLAB function returns the four Laurent polynomials associated with the wavelet wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[LoDz,HiDz,LoRz,HiRz] = wave2lp(wname)",
            "[___,PRCond,AACond] = wave2lp(wname)",
            "[___] = wave2lp(wname,PmaxHS)",
            "[___] = wave2lp(wname,PmaxHS,AddPOW)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_2480063f-1d44-4292-9a49-311ae5fa15c7",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "PmaxHS",
          "purpose" : "Maximum power",
          "htmlid" : "mw_0257a633-3a80-4020-9c27-c661cd881a7c",
          "value" : 
          [ "0",
            "integer" ],
          "defaultvalue" : "0" },
        
        { "name" : "AddPOW",
          "purpose" : "Integer",
          "htmlid" : "mw_fe027ded-c5be-46d9-963b-d4dcc5d728fa",
          "value" : 
          [ "0",
            "integer" ],
          "defaultvalue" : "0" } ],
      "outputs" : 
      [ 
        { "name" : "LoDz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_45bd5967-8e23-4f66-9b3e-1f529521136d",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "HiDz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_8166c5ec-10fc-40de-aa3e-8bc17f3307ae",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "LoRz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_c0ad7728-fbab-4349-8947-8cf41739f6d9",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "HiRz",
          "purpose" : "Laurent polynomial",
          "htmlid" : "mw_a6d20610-7f1e-4843-b9b1-b94ab767e12a",
          "value" : 
          [ "laurentPolynomial object" ] },
        
        { "name" : "PRCond,AACond",
          "purpose" : "Perfect reconstruction and anti-aliasing conditions",
          "htmlid" : "mw_fe717483-500c-417c-b760-f63ee4d4c704",
          "value" : 
          [ "laurentPolynomial objects" ] } ],
      "examples" : 
      [ 
        { "url" : "wave2lp.html#mw_83382e70-d5f5-44a5-b570-5ae070d30349",
          "open_command" : "openExample('wavelet\/LaurentPolynomialsAssociatedWithWaveletExample')",
          "title" : "Laurent Polynomials Associated with Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "filters2lp.html",
          "name" : "filters2lp" },
        
        { "url" : "laurentpolynomial.lp2filters.html",
          "name" : "lp2filters" },
        
        { "url" : "laurentmatrix.html",
          "name" : "laurentMatrix" },
        
        { "url" : "laurentpolynomial.html",
          "name" : "laurentPolynomial" },
        
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" } ] },
    { "href" : "ref\/wavedec.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wavedec",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multilevel 1-D discrete wavelet transform",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the wavelet decomposition of the 1-D signal x at level n using the wavelet wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[c,l] = wavedec(x,n,wname)",
            "[c,l] = wavedec(x,n,LoD,HiD)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "d124e117647",
          "value" : 
          [ "vector" ] },
        
        { "name" : "n",
          "purpose" : "Level of decomposition",
          "htmlid" : "d124e117677",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "d124e117711",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoD,HiD",
          "purpose" : "Wavelet decomposition filters",
          "htmlid" : "mw_d50af297-96d0-479f-be95-ef760acb55ce",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "outputs" : 
      [ 
        { "name" : "c",
          "purpose" : "Wavelet decomposition vector",
          "htmlid" : "d124e117778",
          "value" : 
          [ "vector" ] },
        
        { "name" : "l",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "d124e117805",
          "value" : 
          [ "vector of positive integers" ] } ],
      "examples" : 
      [ 
        { "url" : "wavedec.html#mw_49b47b24-3400-4629-a09c-78d049660902",
          "open_command" : "openExample('wavelet\/PerformMultilevelOneDimensionalWaveletAnalysisExample')",
          "title" : "Multilevel One-Dimensional Wavelet Analysis" },
        
        { "url" : "wavedec.html#mw_577ee36a-f722-4377-9f40-6b48b0a75cad",
          "open_command" : "openExample('wavelet\/MultilevelDiscreteWaveletTransformOnAGPUExample')",
          "title" : "Multilevel Discrete Wavelet Transform on a GPU" } ],
      "seealso" : 
      [ 
        { "url" : "dwt.html",
          "name" : "dwt" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "waverec.html",
          "name" : "waverec" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" },
        
        { "url" : "wmaxlev.html",
          "name" : "wmaxlev" },
        
        { "url" : "appcoef.html",
          "name" : "appcoef" },
        
        { "url" : "detcoef.html",
          "name" : "detcoef" },
        
        { "url" : "dwtfilterbank.html",
          "name" : "dwtfilterbank" } ] },
    { "href" : "ref\/wavedec2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wavedec2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multilevel 2-D discrete wavelet transform",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the wavelet decomposition of the matrix X at level N using the wavelet wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[C,S] = wavedec2(X,N,wname)",
            "[C,S] = wavedec2(X,N,LoD,HiD)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "mw_1c33e120-47da-420b-a80d-cd314030e3de",
          "value" : 
          [ "numeric array",
            "logical array" ] },
        
        { "name" : "N",
          "purpose" : "Decomposition level",
          "htmlid" : "mw_de556c19-9e41-4354-a77f-8d71f2f7249e",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_c55baa97-0b87-48de-97ae-8154b24dc0e3",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoD,HiD",
          "purpose" : "Wavelet decomposition filters",
          "htmlid" : "mw_bba88ecd-2aad-4788-92e2-5cc4fec7da04",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "outputs" : 
      [ 
        { "name" : "C",
          "purpose" : "Wavelet decomposition vector",
          "htmlid" : "mw_50c1c073-3b20-4483-9085-213a84729aab",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "S",
          "purpose" : "Bookkeeping matrix",
          "htmlid" : "mw_ec23471e-2aee-4234-a726-3e405ca79e08",
          "value" : 
          [ "integer-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "wavedec2.html#mw_21832107-a126-4b29-bad3-96bffdeeacd1",
          "open_command" : "openExample('wavelet\/Wavedec2ImageDecompositionLevelExample')",
          "title" : "Extract and Display Image Decomposition Level" },
        
        { "url" : "wavedec2.html#mw_ecc0ca02-3480-44e2-b67f-2940c3ede41f",
          "open_command" : "openExample('wavelet\/DecompositionStructureExample')",
          "title" : "2-D Wavelet Decomposition Structure" },
        
        { "url" : "wavedec2.html#mw_d4e80b3b-befc-4d09-91c1-c83811ff5254",
          "open_command" : "openExample('wavelet\/Multilevel2DDiscreteWaveletTransformOnAGPUExample')",
          "title" : "Multilevel 2-D Discrete Wavelet Transform on a GPU" } ],
      "seealso" : 
      [ 
        { "url" : "waveletimageanalyzer-app.html",
          "name" : "Wavelet Image Analyzer" },
        
        { "url" : "dwt2.html",
          "name" : "dwt2" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "waverec2.html",
          "name" : "waverec2" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" },
        
        { "url" : "wmaxlev.html",
          "name" : "wmaxlev" } ] },
    { "href" : "ref\/wavedec3.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wavedec3",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multilevel 3-D discrete wavelet transform",
      "introduced" : "R2010a",
      "description" : "This MATLAB function returns the wavelet decomposition of the 3-D array x at level n, using the wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wdec = wavedec3(x,n,wname)",
            "wdec = wavedec3(x,n,wname,'mode',extmode)",
            "wdec = wavedec3(x,n,{LoD,HiD,LoR,HiR})" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_fa5750b7-dc02-4e1b-9a9f-bbf086808b19",
          "value" : 
          [ "3-D array" ] },
        
        { "name" : "n",
          "purpose" : "Decomposition level",
          "htmlid" : "mw_af28ef58-c26b-4724-a495-1a16e418a6eb",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_7598202a-a98e-4957-9212-66525e9b023f",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "extmode",
          "purpose" : "Extension mode",
          "htmlid" : "mw_88a735ab-ecab-4fb5-ae33-7707e1c7c414",
          "value" : 
          [ "'zpd'",
            "'sp0'",
            "'spd'" ] },
        
        { "name" : "LoD,HiD",
          "purpose" : "Wavelet decomposition filters",
          "htmlid" : "mw_d55dfb19-f9e6-4955-a984-9fb38515e3a9",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_e98bc158-11d9-4bb4-9f9e-a433c5c58d34",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "outputs" : 
      [ 
        { "name" : "wdec",
          "purpose" : "Wavelet output decomposition",
          "htmlid" : "mw_ac9ec265-b68c-4ca7-809b-3802fd616959",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "wavedec3.html#mw_97c4619d-b0be-47eb-b32e-430955bf8c53",
          "open_command" : "openExample('wavelet\/DWaveletTransformExample')",
          "title" : "3-D Wavelet Transform" },
        
        { "url" : "wavedec3.html#mw_96e26ac8-d045-4fbc-b7a7-7b067e5b531e",
          "open_command" : "openExample('wavelet\/CoefficientOrderin3DWaveletTransformExample')",
          "title" : "Coefficient Order in 3-D Wavelet Transform" },
        
        { "url" : "wavedec3.html#mw_9e6869c1-d4bd-465d-b994-8c3f117aceb6",
          "open_command" : "openExample('wavelet\/DWaveletTransformUsingSpecifiedDecompAndReconstrucFiltsExample')",
          "title" : "3-D Wavelet Transform Using Specified Decomposition and Reconstruction Filters" } ],
      "seealso" : 
      [ 
        { "url" : "dwt3.html",
          "name" : "dwt3" },
        
        { "url" : "dwtmode.html",
          "name" : "dwtmode" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "waverec3.html",
          "name" : "waverec3" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" },
        
        { "url" : "wmaxlev.html",
          "name" : "wmaxlev" } ] },
    { "href" : "ref\/wavefun.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wavefun",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet and scaling functions",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns psi and phi, approximations of the wavelet and scaling functions, respectively, associated with the orthogonal wavelet wname, or the Meyer wavelet.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[phi,psi,xval] = wavefun(wname,iter)",
            "[phi1,psi1,phi2,psi2,xval] = wavefun(wname,iter)",
            "[psi,xval] = wavefun(wname,iter)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = wavefun(wname,A,B)",
            "[___] = wavefun(wname,0)",
            "[___] = wavefun(wname,8,0)",
            "[___] = wavefun(wname)",
            "[___] = wavefun(wname,8)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_b108b167-48de-4fae-beea-ef4349aad58f",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "iter",
          "purpose" : "Number of iterations",
          "htmlid" : "mw_1410b0b3-0976-4681-88a3-b24dbc85d76c",
          "value" : 
          [ "8",
            "positive integer" ],
          "defaultvalue" : "8" },
        
        { "name" : "A,B",
          "purpose" : "Iteration",
          "htmlid" : "mw_8ff32ca5-971b-48d2-b5e0-6db9036ed86f",
          "value" : 
          [ "positive integers" ] } ],
      "outputs" : 
      [ 
        { "name" : "phi",
          "purpose" : "Scaling function approximation",
          "htmlid" : "mw_228f797d-3bfd-4862-b6f9-d564158d9e53",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "psi",
          "purpose" : "Wavelet approximation",
          "htmlid" : "mw_b02c8bea-2ba7-4e3b-b6c2-0df64ac4d700",
          "value" : 
          [ "real-valued vector",
            "complex-valued vector" ] },
        
        { "name" : "phi1,psi1",
          "purpose" : "Approximations of decomposition scaling and wavelet functions",
          "htmlid" : "mw_51c19fef-6cd2-4e37-9f2b-e9921d38bc41",
          "value" : 
          [ "real-valued vectors" ] },
        
        { "name" : "phi2,psi2",
          "purpose" : "Approximations of reconstruction scaling and wavelet functions",
          "htmlid" : "mw_0798fa54-87e5-4883-8cee-07def35f426e",
          "value" : 
          [ "real-valued vectors" ] },
        
        { "name" : "xval",
          "purpose" : "Grid points",
          "htmlid" : "mw_381b5c59-0b13-41a9-a431-162309107381",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wavefun.html#mw_433bef07-6b71-4dbc-8d71-dc2241460941",
          "open_command" : "openExample('wavelet\/WaveletApproximationsExample')",
          "title" : "Wavelet Approximations" },
        
        { "url" : "wavefun.html#mw_37d64c60-f93f-48e2-9418-b687fb407c6c",
          "open_command" : "openExample('wavelet\/ApproximationsOfBiorthogonalWaveletsExample')",
          "title" : "Approximations of Biorthogonal Wavelets" } ],
      "seealso" : 
      [ 
        { "url" : "intwave.html",
          "name" : "intwave" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" } ] },
    { "href" : "ref\/wavefun2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wavefun2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet and scaling functions 2-D",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function, the scaling function S is the tensor product of PHI and PSI.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[PHI,PSI,XVAL] = wavefun('wname',ITER)",
            "[S,W1,W2,W3,XYVAL] = wavefun2('wname',ITER,'plot')",
            "[S,W1,W2,W3,XYVAL] = wavefun2(wname,A,B)",
            "[S,W1,W2,W3,XYVAL] = wavefun2('wname',max(A,B))",
            "[S,W1,W2,W3,XYVAL] = wavefun2('wname',0)",
            "[S,W1,W2,W3,XYVAL] = wavefun2('wname',4,0)",
            "[S,W1,W2,W3,XYVAL] = wavefun2('wname')",
            "[S,W1,W2,W3,XYVAL] = wavefun2('wname',4)" ] } ],
      "seealso" : 
      [ 
        { "url" : "intwave.html",
          "name" : "intwave" },
        
        { "url" : "wavefun.html",
          "name" : "wavefun" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" } ] },
    { "href" : "ref\/waveinfo.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "waveinfo",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelets information",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function provides information on all wavelets within the toolbox.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "waveinfo",
            "waveinfo(wname)",
            "waveinfo(\"wsys\")" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Wavelet family short name",
          "htmlid" : "mw_e080b821-6fa2-4a38-bb72-8ea83f54de19",
          "value" : 
          [ "character vector",
            "string scalar",
            "\"haar\"",
            "\"db\"",
            "\"sym\"",
            "\"coif\"" ] } ],
      "examples" : 
      [ 
        { "url" : "waveinfo.html#mw_a29b4db9-c36b-4409-853a-9d4988060c3b",
          "open_command" : "openExample('wavelet\/WaveletFamilyInformationExample')",
          "title" : "Wavelet Family Information" } ],
      "seealso" : 
      [ 
        { "url" : "wavemngr.html",
          "name" : "wavemngr" } ] },
    { "href" : "ref\/waveletanalyzer-app.html",
      "refentity" : 
      [ 
        { "type" : "app",
          "name" : "Wavelet Analyzer" },
        
        { "type" : "function",
          "name" : "waveletAnalyzer",
          "fcntype" : "applauncher" } ],
      "refpurpose" : "(To be removed) Analyze signals and images using wavelets",
      "deprecationstatus" : "warn",
      "introduced" : "preR2006a",
      "description" : "The Wavelet Analyzer app is an interactive tool for using wavelets to visualize and analyze signals and images.",
      "appthumbnail" : 
      { "fileref" : "ref\/app_wvlt_analyzer_graphic.png",
        "alt" : "Wavelet Analyzer app" },
      "seealso" : 
      [ 
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "waveletimageanalyzer-app.html",
          "name" : "Wavelet Image Analyzer" },
        
        { "url" : "waveletsignalanalyzer-app.html",
          "name" : "Wavelet Signal Analyzer" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" },
        
        { "url" : "wavelettimefrequencyanalyzer-app.html",
          "name" : "Wavelet Time-Frequency Analyzer" } ] },
    { "href" : "ref\/waveletfamilies.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "waveletfamilies",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet families and family members",
      "introduced" : "R2008a",
      "description" : "This MATLAB function displays the names of all available wavelet families.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "waveletfamilies('f')",
            "waveletfamilies('n')",
            "waveletfamilies('a')" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletfamilies.html#mw_47759f38-dcda-4d1f-98df-36d180eb46ad",
          "open_command" : "openExample('wavelet\/WaveletFamiliesExample')",
          "title" : "Wavelet Families" } ],
      "seealso" : 
      [ 
        { "url" : "wavemngr.html",
          "name" : "wavemngr" } ] },
    { "href" : "ref\/waveletimageanalyzer-app.html",
      "refentity" : 
      [ 
        { "type" : "app",
          "name" : "Wavelet Image Analyzer" },
        
        { "type" : "function",
          "name" : "waveletImageAnalyzer",
          "fcntype" : "applauncher" } ],
      "refpurpose" : "Decompose and visualize images",
      "introduced" : "R2023a",
      "description" : "The Wavelet Image Analyzer app enables you to visualize the discrete wavelet decomposition of images.",
      "appthumbnail" : 
      { "fileref" : "ref\/wavelet-image-analyzer-app.png",
        "alt" : "Wavelet Image Analyzer app" },
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "waveletImageAnalyzer",
            "waveletImageAnalyzer(img)" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletimageanalyzer-app.html#mw_58a3db18-ad62-4439-89da-7932bd9c0695",
          "open_command" : "openExample('wavelet\/UsingWaveletImageAnalyzerAppExample')",
          "title" : "Using Wavelet Image Analyzer App" } ],
      "seealso" : 
      [ 
        { "url" : "waveletsignalanalyzer-app.html",
          "name" : "Wavelet Signal Analyzer" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" },
        
        { "url" : "wavelettimefrequencyanalyzer-app.html",
          "name" : "Wavelet Time-Frequency Analyzer" },
        
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" },
        
        { "url" : "waverec2.html",
          "name" : "waverec2" },
        
        { "url" : "swt2.html",
          "name" : "swt2" },
        
        { "url" : "iswt2.html",
          "name" : "iswt2" },
        
        { "url" : "dualtree2.html",
          "name" : "dualtree2" },
        
        { "url" : "idualtree2.html",
          "name" : "idualtree2" },
        
        { "url" : "cwtft2.html",
          "name" : "cwtft2" } ] },
    { "href" : "ref\/waveletscattering.centerfrequencies.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "centerFrequencies",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering.centerFrequencies",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Wavelet scattering bandpass center frequencies",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the wavelet bandpass center frequencies for all filter banks of the wavelet time scattering network, sf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "F = centerFrequencies(sf)",
            "F = centerFrequencies(sf,filterbanks)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet time scattering network",
          "htmlid" : "mw_cc1fcbd8-b18b-4834-8112-87093f46f93d_sep_mw_654aaa98-2548-4b11-b418-71619445bc3c",
          "value" : 
          [ "waveletScattering object" ] },
        
        { "name" : "filterbanks",
          "purpose" : "Filter bank indices",
          "htmlid" : "mw_b8ff7fe8-3b64-4478-9fca-7b11d93817a2",
          "value" : 
          [ "positive integer",
            "vector of integers" ] } ],
      "outputs" : 
      [ 
        { "name" : "F",
          "purpose" : "Wavelet bandpass center frequencies",
          "htmlid" : "mw_e6ff439b-5b04-4ca6-a424-e0b9c462672a",
          "value" : 
          [ "vector",
            "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.centerfrequencies.html#mw_0da0cc27-03ca-4bd5-88fe-dc7b61b546e1",
          "open_command" : "openExample('wavelet\/WaveletBandpassCenterFrequenciesExample')",
          "title" : "Wavelet Bandpass Center Frequencies" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" } ] },
    { "href" : "ref\/waveletscattering.featurematrix.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "featureMatrix",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering.featureMatrix",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Scattering feature matrix",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the scattering coefficient matrix for the wavelet time scattering network sf and the real-valued input data x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "smat = featureMatrix(sf,x)",
            "[smat,u] = featureMatrix(sf,x)",
            "smat = featureMatrix(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet time scattering network",
          "htmlid" : "mw_edb9d918-ed3b-469f-8cb0-5e6cbd25f87c_sep_mw_654aaa98-2548-4b11-b418-71619445bc3c",
          "value" : 
          [ "waveletScattering object" ] },
        
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_9066b381-0e51-4332-bdf2-264f76146339",
          "value" : 
          [ "vector",
            "matrix",
            "3-D array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Normalization",
              "purpose" : "Type of normalization",
              "htmlid" : "mw_092a0610-c1d8-4b3f-a45a-eebe2bdf369a",
              "value" : 
              [ "'none'",
                "'parent'" ],
              "defaultvalue" : "'none'" },
            
            { "name" : "Transform",
              "purpose" : "Type of transformation",
              "htmlid" : "mw_6fe89b88-82fb-4f7a-86a9-17ce876fb8b5",
              "value" : 
              [ "'none'",
                "'log'" ],
              "defaultvalue" : "'none'" } ] } ],
      "outputs" : 
      [ 
        { "name" : "smat",
          "purpose" : "Scattering coefficients",
          "htmlid" : "mw_d244321e-a614-42c2-b890-8b0e9844b8fb",
          "value" : 
          [ "matrix",
            "3-D array",
            "4-D array" ] },
        
        { "name" : "u",
          "purpose" : "Scalogram coefficients",
          "htmlid" : "mw_1c409155-3946-4ce5-94dd-8c39f62323bc",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.featurematrix.html#mw_e1631feb-b048-4ee0-b4c9-9ec772102ac4",
          "open_command" : "openExample('wavelet\/ObtainAScatteringFeatureMatrixExample')",
          "title" : "Obtain Scattering Feature Matrix" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" },
        
        { "url" : "waveletscattering.scatteringtransform.html",
          "name" : "scatteringTransform" } ] },
    { "href" : "ref\/waveletscattering.filterbank.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "filterbank",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering.filterbank",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Wavelet time scattering filter banks",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the filter banks used in the computation of the scattering coefficients.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "filters = filterbank(sf)",
            "[filters,f] = filterbank(sf)",
            "[filters,f,filterparams] = filterbank(sf)",
            "[___] = filterbank(sf,order)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet time scattering network",
          "htmlid" : "mw_1a6bd5a0-cb07-4133-9d58-73d7e38d0a69_sep_mw_654aaa98-2548-4b11-b418-71619445bc3c",
          "value" : 
          [ "waveletScattering object" ] },
        
        { "name" : "order",
          "purpose" : "Order of scattering coefficients",
          "htmlid" : "mw_fe46f40f-e95a-42f1-9cce-5da15ddb4f05",
          "value" : 
          [ "positive integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "filters",
          "purpose" : "Filter banks",
          "htmlid" : "mw_922077a8-3012-4e06-8a64-859abe6632b6",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "f",
          "purpose" : "Frequencies",
          "htmlid" : "mw_84a9e1bf-bdee-4c07-bc9e-37abbceb7f21",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "filterparams",
          "purpose" : "Filter bank parameters",
          "htmlid" : "mw_fe0fe860-73fd-493e-a618-739bbcbaccce",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.filterbank.html#mw_d27e1cc2-bebe-4ecf-86f2-a354b61ec2e7",
          "open_command" : "openExample('wavelet\/PlotScatteringFrameworkFilterBanksExample')",
          "title" : "Plot Scattering Network Filter Banks" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" },
        
        { "url" : "waveletscattering.littlewoodpaleysum.html",
          "name" : "littlewoodPaleySum" } ] },
    { "href" : "ref\/waveletscattering.gather.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "gather",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering.gather",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Collect scattering network properties into local workspace",
      "introduced" : "R2023a",
      "description" : "This MATLAB function collects all the wavelet time scattering network, sf, properties from the GPU device and returns the gathered waveletScattering object sn.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "sn = gather(sf)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet time scattering network",
          "htmlid" : "mw_6e4be4f9-e934-4e7b-871f-88a90ebbef16_sep_mw_654aaa98-2548-4b11-b418-71619445bc3c",
          "value" : 
          [ "waveletScattering object" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.gather.html#mw_7c5e99ee-0d5b-427c-acdf-7ef603613ab0",
          "open_command" : "openExample('wavelet\/GatherWaveletScatteringObjectExample')",
          "title" : "Gather waveletScattering object" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" } ] },
    { "href" : "ref\/waveletscattering.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "waveletScattering" },
        
        { "type" : "function",
          "name" : "waveletScattering",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Wavelet time scattering",
      "introduced" : "R2018b",
      "description" : "Use the waveletScattering object to create a network for a wavelet time scattering decomposition using the Gabor (analytic Morlet) wavelet.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "sf = waveletScattering",
            "sf = waveletScattering(Name,Value)" ] } ],
      "classpropertygroup" : 
      [ 
        { "classproperty" : 
          [ 
            { "name" : "SignalLength",
              "purpose" : "Signal length",
              "htmlid" : "mw_a00e41dd-482f-436b-9f8b-0d3e85f56ca9",
              "value" : 
              [ "1024",
                "positive integer ≥ 16" ],
              "defaultvalue" : "1024" },
            
            { "name" : "SamplingFrequency",
              "purpose" : "Sampling frequency",
              "htmlid" : "mw_504bb9f1-9cd7-4c5a-974c-08bae61a68d9",
              "value" : 
              [ "1",
                "positive scalar" ],
              "defaultvalue" : "1" },
            
            { "name" : "InvarianceScale",
              "purpose" : "Scattering transform invariance scale",
              "htmlid" : "mw_3377b55e-5060-4838-9892-91f9dd8adb30",
              "value" : 
              [ "one-half of SignalLength",
                "positive scalar" ],
              "defaultvalue" : "one-half of SignalLength" },
            
            { "name" : "QualityFactors",
              "purpose" : "Scattering filter bank Q factors",
              "htmlid" : "mw_a6e61f40-1080-4af9-a10e-ddc542e94d6d",
              "value" : 
              [ "[8 1]",
                "positive integer",
                "vector of positive integers" ],
              "defaultvalue" : "[8 1]" },
            
            { "name" : "Boundary",
              "purpose" : "Signal extension method",
              "htmlid" : "mw_130e58ed-09d4-4e71-92ca-126875675efd",
              "value" : 
              [ "'periodic'",
                "'reflection'" ],
              "defaultvalue" : "'periodic'" },
            
            { "name" : "Precision",
              "purpose" : "Numeric precision of wavelet scattering network",
              "htmlid" : "mw_4654f34f-36b1-47b0-963f-cdb79261b0c5",
              "value" : 
              [ "'double'",
                "'single'" ],
              "defaultvalue" : "'double'" },
            
            { "name" : "OversamplingFactor",
              "purpose" : "Oversampling factor",
              "htmlid" : "mw_7103e151-c4db-4564-8121-9c64ec9f0b51",
              "value" : 
              [ "0",
                "nonnegative integer",
                "Inf" ],
              "defaultvalue" : "0" },
            
            { "name" : "OptimizePath",
              "purpose" : "Optimize scattering transform logical",
              "htmlid" : "mw_ec55a2bb-0f08-4f04-9021-0e1666d75889",
              "value" : 
              [ "false or 0",
                "true or 1" ],
              "defaultvalue" : "false or 0" } ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.html#mw_588774f4-15c3-4db4-a22d-e9342c7147a3",
          "open_command" : "openExample('wavelet\/WaveletTimeScatteringWithDefaultValuesExample')",
          "title" : "Wavelet Time Scattering with Default Values" },
        
        { "url" : "waveletscattering.html#mw_cfe5c068-bca8-4c2f-8643-2034b4cedebe",
          "open_command" : "openExample('wavelet\/ApplyScatteringDecompositionFrameworkExample')",
          "title" : "Apply Wavelet Time Scattering Network" },
        
        { "url" : "waveletscattering.html#mw_9f8bb05f-053e-496d-ad3e-8b36a305e56e",
          "open_command" : "openExample('wavelet\/WaveletTimeScatteringNetworkPrecisionExample')",
          "title" : "Wavelet Time Scattering Network Precision" } ],
      "seealso" : 
      [ 
        { "url" : "cwt.html",
          "name" : "cwt" },
        
        { "url" : "waveletscattering2.html",
          "name" : "waveletScattering2" },
        
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "..\/..\/dsp\/ref\/waveletscattering.html",
          "name" : "Wavelet Scattering" } ] },
    { "href" : "ref\/waveletscattering.littlewoodpaleysum.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "littlewoodPaleySum",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering.littlewoodPaleySum",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Littlewood-Paley sum",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the Littlewood-Paley sum for the scattering filter banks in sf, the wavelet time scattering network.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lpsum = littlewoodPaleySum(sf)",
            "lpsum = littlewoodPaleySum(sf,fb)",
            "[lpsum,f] = littlewoodPaleySum(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet time scattering network",
          "htmlid" : "mw_4d57683a-374f-4f79-aa5b-850d08676c79_sep_mw_654aaa98-2548-4b11-b418-71619445bc3c",
          "value" : 
          [ "waveletScattering object" ] },
        
        { "name" : "fb",
          "purpose" : "Filter bank index",
          "htmlid" : "mw_6a45be6a-881b-41ad-bb8a-26dd0e74d9cd",
          "value" : 
          [ "positive integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "lpsum",
          "purpose" : "Littlewood-Paley sum",
          "htmlid" : "mw_2380ccbc-e44c-47f8-a754-889159fe85f7",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "f",
          "purpose" : "Frequencies",
          "htmlid" : "mw_5bb69d90-01b2-4f8b-934d-3c7e48d0feb2",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.littlewoodpaleysum.html#mw_e130f69d-d15d-485b-bb79-8119e7ae4286",
          "open_command" : "openExample('wavelet\/PlotLittlewoodPaleySumExample')",
          "title" : "Plot Littlewood-Paley Sum" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" } ] },
    { "href" : "ref\/waveletscattering.log.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "log",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering.log",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Natural logarithm of scattering transform",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the natural logarithm of the scattering coefficients in the cell array s.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "slog = log(sf,s)",
            "ulog = log(sf,u)",
            "xlog = log(sf,x)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet time scattering network",
          "htmlid" : "mw_3ad5b983-f402-4676-9a30-9367d30aecf8_sep_mw_654aaa98-2548-4b11-b418-71619445bc3c",
          "value" : 
          [ "waveletScattering object" ] },
        
        { "name" : "s",
          "purpose" : "Scattering coefficients",
          "htmlid" : "mw_3003d05c-0e24-4ed8-88fc-8ac902c0b91c",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "u",
          "purpose" : "Scalogram coefficients",
          "htmlid" : "mw_a44db33e-0f5a-4d4c-ac76-b478c7d8f473",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "x",
          "purpose" : "Scattering feature matrix",
          "htmlid" : "mw_1d445afe-a512-4f82-9f9f-0fc7dda62ddf",
          "value" : 
          [ "real-valued matrix",
            "real-valued array" ] } ],
      "outputs" : 
      [ 
        { "name" : "slog",
          "purpose" : "Natural logarithm of scattering coefficients",
          "htmlid" : "mw_f90c16b7-e9e5-4aec-9939-bbc96a7c744c",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "ulog",
          "purpose" : "Natural logarithm of scalogram coefficients",
          "htmlid" : "mw_9afe1be5-20b0-4354-9142-309839d8e430",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "xlog",
          "purpose" : "Natural logarithm of scattering feature matrix",
          "htmlid" : "mw_556c6f4d-fc90-4a86-842b-09b6f6464b61",
          "value" : 
          [ "real-valued matrix",
            "real-valued array" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.log.html#mw_2b8ca1c1-d661-4c4c-94fc-b250864e3a5c",
          "open_command" : "openExample('wavelet\/NaturalLogarithmOfScatteringCoefficientsExample')",
          "title" : "Natural Logarithm of Scattering Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" },
        
        { "url" : "waveletscattering.scatteringtransform.html",
          "name" : "scatteringTransform" } ] },
    { "href" : "ref\/waveletscattering.numcoefficients.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "numCoefficients",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering.numCoefficients",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Number of wavelet scattering coefficients",
      "introduced" : "R2019a",
      "description" : "This MATLAB function returns the number of scattering coefficients for each scattering path in the wavelet time scattering network sf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "ncf = numCoefficients(sf)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet time scattering network",
          "htmlid" : "mw_f38f4bb3-2641-4586-a2ec-41530afe4646_sep_mw_654aaa98-2548-4b11-b418-71619445bc3c",
          "value" : 
          [ "waveletScattering object" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.numcoefficients.html#mw_ee780ff4-0f14-42e9-b790-32e22aeb87e3",
          "open_command" : "openExample('wavelet\/Oversample1DWaveletScatteringTransformExample')",
          "title" : "Oversample 1-D Wavelet Scattering Transform" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" } ] },
    { "href" : "ref\/waveletscattering.numfilterbanks.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "numfilterbanks",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering.numfilterbanks",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Number of scattering filter banks",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the number of filter banks in the wavelet time scattering network, sf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "nfb = numfilterbanks(sf)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet time scattering network",
          "htmlid" : "mw_fecf5681-1b18-4bcf-b3b6-9a7f28d1620f_sep_mw_654aaa98-2548-4b11-b418-71619445bc3c",
          "value" : 
          [ "waveletScattering object" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.numfilterbanks.html#mw_55916fa4-f983-4c03-ad15-0bc01ddfeb69",
          "open_command" : "openExample('wavelet\/NumberOfFilterBanksInAScatteringDecompositionFrameworkExample')",
          "title" : "Number of Filter Banks in Wavelet Scattering Network" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" },
        
        { "url" : "waveletscattering2.html",
          "name" : "waveletScattering2" } ] },
    { "href" : "ref\/waveletscattering.numorders.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "numorders",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering.numorders",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Number of scattering orders",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the number of orders for the wavelet time scattering network, sf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "no = numorders(sf)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet time scattering network",
          "htmlid" : "mw_bb804323-2087-41b9-ae6d-67b09b59aeab_sep_mw_654aaa98-2548-4b11-b418-71619445bc3c",
          "value" : 
          [ "waveletScattering object" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.numorders.html#mw_0d3a0b97-f5c7-4620-a33b-46114f5fc5bd",
          "open_command" : "openExample('wavelet\/NumberOfOrdersInAScatteringDecompositionFrameworkExample')",
          "title" : "Number of Orders in Wavelet Time Scattering Network" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" },
        
        { "url" : "waveletscattering2.html",
          "name" : "waveletScattering2" } ] },
    { "href" : "ref\/waveletscattering.paths.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "paths",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering.paths",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Scattering network paths",
      "introduced" : "R2021a",
      "description" : "This MATLAB function returns the scattering paths for the scattering network, sf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "spaths = paths(sf)",
            "[spaths,npaths] = paths(sf)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet time scattering network",
          "htmlid" : "mw_a52ac00a-4dc3-499f-8285-ea1a9a2bab15_sep_mw_654aaa98-2548-4b11-b418-71619445bc3c",
          "value" : 
          [ "waveletScattering object" ] } ],
      "outputs" : 
      [ 
        { "name" : "spaths",
          "purpose" : "Scattering paths",
          "htmlid" : "mw_8c5aed86-72a6-4532-99d8-6e3eacb3ab61",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "npaths",
          "purpose" : "Number of wavelet scattering paths",
          "htmlid" : "mw_020a20f0-c0cb-4caa-a347-151cd6877f18",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.paths.html#mw_171174c1-7e27-43e6-a73c-00ca74ec6b81",
          "open_command" : "openExample('wavelet\/WaveletScatteringPathsExample')",
          "title" : "Wavelet Scattering Paths" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" },
        
        { "url" : "waveletscattering.filterbank.html",
          "name" : "filterbank" } ] },
    { "href" : "ref\/waveletscattering.scattergram.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "scattergram",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering.scattergram",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Visualize scattering or scalogram coefficients",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the scattergram as a matrix for the first-order scattering coefficients, S.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "img = scattergram(sf,S)",
            "img = scattergram(sf,U)",
            "img = scattergram(___,Name,Value)",
            "scattergram(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet time scattering network",
          "htmlid" : "mw_9c756973-bdf2-4ade-8b3a-37a1a91152eb_sep_mw_654aaa98-2548-4b11-b418-71619445bc3c",
          "value" : 
          [ "waveletScattering object" ] },
        
        { "name" : "S",
          "purpose" : "Scattering coefficients",
          "htmlid" : "mw_9c4a5983-79ef-45c5-ab6d-2cc28bfd0b10",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "U",
          "purpose" : "Scalogram coefficients",
          "htmlid" : "mw_49f14db5-341d-4378-868b-3be48f56ef98",
          "value" : 
          [ "cell array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "FilterBank",
              "purpose" : "Filter bank index",
              "htmlid" : "mw_a0ed0168-c76f-48cd-b02b-708893f0679d",
              "value" : 
              [ "positive integer between 1 and the number of filter banks in sf inclusive" ] },
            
            { "name" : "P",
              "purpose" : "Path parent index",
              "htmlid" : "mw_08349a03-ded9-4615-9499-60fb31073930",
              "value" : 
              [ "nonnegative integer" ] } ] } ],
      "outputs" : 
      [ 
        { "name" : "img",
          "purpose" : "Scattergram",
          "htmlid" : "mw_22cb3b46-05d5-49e1-b567-0277882266c2",
          "value" : 
          [ "real-valued matrix",
            "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.scattergram.html#mw_4320e4f4-a0d2-40f2-a665-5a46d9a6772a",
          "open_command" : "openExample('wavelet\/VisualizeScattergramExample')",
          "title" : "Visualize Scattergram" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" } ] },
    { "href" : "ref\/waveletscattering.scatteringtransform.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "scatteringTransform",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering.scatteringTransform",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Wavelet 1-D scattering transform",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the wavelet 1-D scattering transform of x with metadata for the wavelet time scattering network, sf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "s = scatteringTransform(sf,x)",
            "[s,u] = scatteringTransform(sf,x)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet time scattering network",
          "htmlid" : "mw_0c46730d-f993-4741-a9ae-efec8f16d76a_sep_mw_654aaa98-2548-4b11-b418-71619445bc3c",
          "value" : 
          [ "waveletScattering object" ] },
        
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_208c1156-5e03-4414-8473-5a9fe463c805",
          "value" : 
          [ "vector",
            "matrix",
            "3-D array" ] } ],
      "outputs" : 
      [ 
        { "name" : "s",
          "purpose" : "Scattering coefficients",
          "htmlid" : "mw_246e588f-2930-4078-ae7c-ea9256bfa625",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "u",
          "purpose" : "Scalogram coefficients",
          "htmlid" : "mw_dccff220-9322-49b2-8638-1f83ff90504a",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering.scatteringtransform.html#mw_d493221c-a22d-4a03-b7ff-4f3bbc26cd54",
          "open_command" : "openExample('wavelet\/ScatteringTransformOfAnECGSignalExample')",
          "title" : "Scattering Transform of ECG Signal" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" },
        
        { "url" : "waveletscattering.featurematrix.html",
          "name" : "featureMatrix" } ] },
    { "href" : "ref\/waveletscattering2.coefficientsize.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "coefficientSize",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering2.coefficientSize",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Size of image scattering coefficients",
      "introduced" : "R2019a",
      "description" : "This MATLAB function returns the scattering coefficient sizes for the wavelet image scattering network, sf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "sz = coefficientSize(sf)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet image scattering network",
          "htmlid" : "mw_4c084f2e-4ed8-4928-834d-724a51580c0f_sep_mw_7ed7681b-5485-42c4-8d49-1ccedecfe1a6",
          "value" : 
          [ "waveletScattering2 object" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering2.coefficientsize.html#mw_00a13b9e-4fc1-4bd8-bdd8-028394f45f44",
          "open_command" : "openExample('wavelet\/ScatteringCoefficientSizesForImageScatteringFrameworkExample')",
          "title" : "Scattering Coefficient Sizes for Image Scattering Network" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering2.html",
          "name" : "waveletScattering2" },
        
        { "url" : "waveletscattering2.paths.html",
          "name" : "paths" } ] },
    { "href" : "ref\/waveletscattering2.featurematrix.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "featureMatrix",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering2.featureMatrix",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Image scattering feature matrix",
      "introduced" : "R2019a",
      "description" : "This MATLAB function returns the scattering feature matrix for the wavelet image scattering network, sf, and the input image, im.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "smat = featureMatrix(sf,im)",
            "smat = featureMatrix(sf,sc)",
            "smat = featureMatrix(___,'Transform',transformtype)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet image scattering network",
          "htmlid" : "mw_54b93a05-b3ee-4573-9ae5-95e81f505132_sep_mw_7ed7681b-5485-42c4-8d49-1ccedecfe1a6",
          "value" : 
          [ "waveletScattering2 object" ] },
        
        { "name" : "im",
          "purpose" : "Input image",
          "htmlid" : "mw_f4af4470-d7eb-4cd3-b193-7ada5aebf1f7",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "sc",
          "purpose" : "Scattering coefficients",
          "htmlid" : "mw_216279e1-498a-47ef-869d-ee8cd8efc7cb",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "transformtype",
          "purpose" : "Transformation",
          "htmlid" : "mw_d03c19f1-b2ee-4a79-95bf-5cc8b2b0fdbe",
          "value" : 
          [ "'none'",
            "'log'" ],
          "defaultvalue" : "'none'" } ],
      "outputs" : 
      [ 
        { "name" : "smat",
          "purpose" : "Scattering feature matrix",
          "htmlid" : "mw_71c5e23f-a5d2-4076-8137-6968ef61d594",
          "value" : 
          [ "real-valued array" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering2.featurematrix.html#mw_2616c8f9-fbef-4eb2-a218-a03422256dfc",
          "open_command" : "openExample('wavelet\/ObtainFeatureMatrixForWaveletImageScatteringFrameworkExample')",
          "title" : "Obtain Feature Matrix for Wavelet Image Scattering Network" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering2.html",
          "name" : "waveletScattering2" },
        
        { "url" : "waveletscattering2.scatteringtransform.html",
          "name" : "scatteringTransform" } ] },
    { "href" : "ref\/waveletscattering2.filterbank.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "filterbank",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering2.filterbank",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Wavelet and scaling filters",
      "introduced" : "R2019a",
      "description" : "This MATLAB function returns the Fourier transform of the scaling filter for the 2-D wavelet scattering network, sf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "phif = filterbank(sf)",
            "[phif,psifilters] = filterbank(sf)",
            "[phif,psifilters,f] = filterbank(sf)",
            "[phif,psifilters,f,filterparams] = filterbank(sf)",
            "[___] = filterbank(sf,fb)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet image scattering network",
          "htmlid" : "mw_e9d9195a-aed1-4b53-bc46-eb77e00d639e_sep_mw_7ed7681b-5485-42c4-8d49-1ccedecfe1a6",
          "value" : 
          [ "waveletScattering2 object" ] },
        
        { "name" : "fb",
          "purpose" : "Filter banks",
          "htmlid" : "mw_c56ae842-f031-45ed-af6e-263f181cd8f5",
          "value" : 
          [ "positive integer",
            "vector of positive integers" ] } ],
      "outputs" : 
      [ 
        { "name" : "phif",
          "purpose" : "Fourier transform of scaling filter",
          "htmlid" : "mw_ebc84e6e-1974-4803-a405-e93de9125837",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "psifilters",
          "purpose" : "Fourier transforms of the wavelet filters",
          "htmlid" : "mw_dd097c7c-1333-48f2-b00b-d2a96d3f81ba",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "f",
          "purpose" : "Center spatial frequencies",
          "htmlid" : "mw_fd7bc22e-f14a-44a5-a71e-520307488ce8",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "filterparams",
          "purpose" : "Filter parameters",
          "htmlid" : "mw_ce33c5e5-5426-48a9-adb8-d306c16db401",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering2.filterbank.html#mw_cff04c4e-96be-4245-a258-67ff7cd3189b",
          "open_command" : "openExample('wavelet\/PlotWaveletCenterFrequenciesExample')",
          "title" : "Plot Wavelet Center Frequencies" },
        
        { "url" : "waveletscattering2.filterbank.html#mw_45a7ea65-4701-46f5-a71c-fd8455caae73",
          "open_command" : "openExample('wavelet\/PlotSpecificWaveletOfImageScatteringFrameworkExample')",
          "title" : "Plot Specific Wavelet of Image Scattering Network" },
        
        { "url" : "waveletscattering2.filterbank.html#mw_2cb9e62c-f05e-4157-b650-ee5a5043d2b4",
          "open_command" : "openExample('wavelet\/DetermineWaveletSemiMajorAxisExample')",
          "title" : "Determine Wavelet Semi-Major Axis" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering2.html",
          "name" : "waveletScattering2" } ] },
    { "href" : "ref\/waveletscattering2.html",
      "refentity" : 
      [ 
        { "type" : "object",
          "name" : "waveletScattering2" },
        
        { "type" : "function",
          "name" : "waveletScattering2",
          "fcntype" : "constructor" } ],
      "refpurpose" : "Wavelet image scattering",
      "introduced" : "R2019a",
      "description" : "Use the waveletScattering2 object to create a network for a wavelet image scattering decomposition using complex-valued 2-D Morlet wavelets.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "sf = waveletScattering2",
            "sf = waveletScattering2(Name,Value)" ] } ],
      "classpropertygroup" : 
      [ 
        { "classproperty" : 
          [ 
            { "name" : "ImageSize",
              "purpose" : "Image size",
              "htmlid" : "mw_b01cb0d8-b9ea-4b54-8e92-4054be938daf",
              "value" : 
              [ "[128 128]",
                "two-element integer-valued vector" ],
              "defaultvalue" : "[128 128]" },
            
            { "name" : "InvarianceScale",
              "purpose" : "Scattering transform invariance scale",
              "htmlid" : "mw_4b7fa500-ffd1-4ac1-b143-bc364a970a2d",
              "value" : 
              [ "64",
                "positive scalar" ],
              "defaultvalue" : "64" },
            
            { "name" : "NumRotations",
              "purpose" : "Number of rotations per wavelet",
              "htmlid" : "mw_eac8712c-b601-48c1-bd20-3b4e583afc39",
              "value" : 
              [ "[6 6]",
                "integer-valued vector" ],
              "defaultvalue" : "[6 6]" },
            
            { "name" : "QualityFactors",
              "purpose" : "Scattering filter bank quality factors",
              "htmlid" : "mw_e0f6ec3d-a5e7-471e-b72f-5cc4fb0170fa",
              "value" : 
              [ "[1 1]",
                "integer-valued vector" ],
              "defaultvalue" : "[1 1]" },
            
            { "name" : "Precision",
              "purpose" : "Precision of scattering coefficients and filters",
              "htmlid" : "mw_a523c5ac-586e-480f-86c4-db5c404b260e",
              "value" : 
              [ "'single'",
                "'double'" ],
              "defaultvalue" : "'single'" },
            
            { "name" : "OversamplingFactor",
              "purpose" : "Oversampling factor",
              "htmlid" : "mw_b35087dc-e349-4b10-b089-3add60bdf7c8",
              "value" : 
              [ "0",
                "nonnegative integer",
                "Inf" ],
              "defaultvalue" : "0" },
            
            { "name" : "OptimizePath",
              "purpose" : "Optimize scattering transform logical",
              "htmlid" : "mw_45677625-9ba1-451a-ad65-c7cbb89329b7",
              "value" : 
              [ "true",
                "false" ],
              "defaultvalue" : "true" } ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering2.html#mw_76e14666-df5e-46d1-99a9-1d08e593d6fe",
          "open_command" : "openExample('wavelet\/WaveletImageScatteringWithDefaultValuesExample')",
          "title" : "Wavelet Image Scattering with Default Values" } ],
      "seealso" : 
      [ 
        { "url" : "cwtft2.html",
          "name" : "cwtft2" },
        
        { "url" : "dddtree2.html",
          "name" : "dddtree2" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" },
        
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" } ] },
    { "href" : "ref\/waveletscattering2.littlewoodpaleysum.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "littlewoodPaleySum",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering2.littlewoodPaleySum",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Littlewood-Paley sum",
      "introduced" : "R2019a",
      "description" : "This MATLAB function returns the Littlewood-Paley sum for the 2-D filter banks in the 2-D wavelet scattering network sf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "lpsum = littlewoodPaleySum(sf)",
            "lpsum = littlewoodPaleySum(sf,fb)",
            "[lpsum,f] = littlewoodPaleySum(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet image scattering network",
          "htmlid" : "mw_20e240c1-e30c-4634-b674-b40b1ca28cb0_sep_mw_7ed7681b-5485-42c4-8d49-1ccedecfe1a6",
          "value" : 
          [ "waveletScattering2 object" ] },
        
        { "name" : "fb",
          "purpose" : "Filter bank index",
          "htmlid" : "mw_4ffda553-a885-4fd1-b01d-bae324b5cadb",
          "value" : 
          [ "positive integer",
            "vector of positive integers" ] } ],
      "outputs" : 
      [ 
        { "name" : "lpsum",
          "purpose" : "Littlewood-Paley sum",
          "htmlid" : "mw_01ef84c9-595c-49a0-94eb-a586f7baaf6e",
          "value" : 
          [ "real-valued 3-D matrix" ] },
        
        { "name" : "f",
          "purpose" : "Frequencies",
          "htmlid" : "mw_061fbde0-40b0-4dbf-b261-439af013c1c9",
          "value" : 
          [ "real-valued two-column matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering2.littlewoodpaleysum.html#mw_a2c14d27-a7fa-4a3b-8799-713beb98b832",
          "open_command" : "openExample('wavelet\/LittlewoodPaleySumOfImageScatteringFrameworkExample')",
          "title" : "Littlewood-Paley Sum of Image Scattering Network" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering2.html",
          "name" : "waveletScattering2" } ] },
    { "href" : "ref\/waveletscattering2.log.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "log",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering2.log",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Natural logarithm of 2-D scattering transform",
      "introduced" : "R2019a",
      "description" : "This MATLAB function returns the natural logarithm of the scattering coefficients in the cell array s.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "slog = log(sf,s)",
            "ulog = log(sf,u)",
            "xlog = log(sf,x)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet image scattering network",
          "htmlid" : "mw_19f52706-0afd-4241-8838-7ddcbd4864e5_sep_mw_7ed7681b-5485-42c4-8d49-1ccedecfe1a6",
          "value" : 
          [ "waveletScattering2 object" ] },
        
        { "name" : "s",
          "purpose" : "Scattering coefficients",
          "htmlid" : "mw_9bce4330-8037-48c5-be0e-2f9a905b3dc3",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "u",
          "purpose" : "Scalogram coefficients",
          "htmlid" : "mw_9bec2ae1-5990-4bde-a243-0a47b2041390",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "x",
          "purpose" : "Scattering feature matrix",
          "htmlid" : "mw_99b00f7b-dc37-4cd4-beb2-42160056dddf",
          "value" : 
          [ "real-valued matrix",
            "real-valued 4-D tensor" ] } ],
      "outputs" : 
      [ 
        { "name" : "slog",
          "purpose" : "Natural logarithm of scattering coefficients",
          "htmlid" : "mw_da1e504e-973f-42f8-8681-43f1976f7fa4",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "ulog",
          "purpose" : "Natural logarithm of scalogram coefficients",
          "htmlid" : "mw_ae875d3d-b526-4608-914c-9913e566a6f8",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "xlog",
          "purpose" : "Natural logarithm of scattering feature matrix",
          "htmlid" : "mw_c717e45e-cccc-4d3e-bd07-373689c65991",
          "value" : 
          [ "real-valued 3-D matrix",
            "real-valued 4-D tensor" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering2.log.html#mw_22d25b3e-b85c-4649-bc24-83323b67eeef",
          "open_command" : "openExample('wavelet\/NaturalLogarithmOfImageScatteringCoefficientsExample')",
          "title" : "Natural Logarithm of Scattering Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering2.html",
          "name" : "waveletScattering2" },
        
        { "url" : "waveletscattering2.featurematrix.html",
          "name" : "featureMatrix" },
        
        { "url" : "waveletscattering2.scatteringtransform.html",
          "name" : "scatteringTransform" } ] },
    { "href" : "ref\/waveletscattering2.numfilterbanks.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "numfilterbanks",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering2.numfilterbanks",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Number of scattering filter banks",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the number of filter banks in the wavelet image scattering network, sf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "nfb = numfilterbanks(sf)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet image scattering network",
          "htmlid" : "mw_2e22dcf8-da52-419b-970c-5818d6bc4e3a_sep_mw_7ed7681b-5485-42c4-8d49-1ccedecfe1a6",
          "value" : 
          [ "waveletScattering2 object" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering2.numfilterbanks.html#mw_ad5366b3-7a42-4d93-8ca5-609abc9a3782",
          "open_command" : "openExample('wavelet\/NumberOfFilterBanksIn2DWaveletScatteringNetworkExample')",
          "title" : "Number of Filter Banks in 2-D Wavelet Scattering Network" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" },
        
        { "url" : "waveletscattering2.html",
          "name" : "waveletScattering2" } ] },
    { "href" : "ref\/waveletscattering2.numorders.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "numorders",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering2.numorders",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Number of scattering orders",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the number of orders for the wavelet image scattering network, sf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "no = numorders(sf)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet image scattering network",
          "htmlid" : "mw_87401399-a9a5-4d37-b3fb-d3ce2adfc306_sep_mw_7ed7681b-5485-42c4-8d49-1ccedecfe1a6",
          "value" : 
          [ "waveletScattering2 object" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering2.numorders.html#mw_7896e52e-e522-4761-8b12-ce89def874c8",
          "open_command" : "openExample('wavelet\/NumberOfOrdersInWaveletImageScatteringNetworkExample')",
          "title" : "Number of Orders in Wavelet Image Scattering Network" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering.html",
          "name" : "waveletScattering" },
        
        { "url" : "waveletscattering2.html",
          "name" : "waveletScattering2" } ] },
    { "href" : "ref\/waveletscattering2.paths.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "paths",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering2.paths",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Scattering paths",
      "introduced" : "R2019a",
      "description" : "This MATLAB function returns the scattering paths for all orders of the scattering network, sf.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "spaths = paths(sf)",
            "[spaths,npaths] = paths(sf)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet image scattering network",
          "htmlid" : "mw_a160a3ed-b929-4ea2-bd26-df04cd324dfb_sep_mw_7ed7681b-5485-42c4-8d49-1ccedecfe1a6",
          "value" : 
          [ "waveletScattering2 object" ] } ],
      "outputs" : 
      [ 
        { "name" : "spaths",
          "purpose" : "Scattering paths",
          "htmlid" : "mw_89d0ef4d-22ef-4d96-8be4-246b530f22e0",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "npaths",
          "purpose" : "Number of scattering paths",
          "htmlid" : "mw_36c733d2-fb50-48b4-9bdc-5e5b0641b9cb",
          "value" : 
          [ "column vector" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering2.paths.html#mw_24290643-f31b-40bb-964f-e6a75f802e8e",
          "open_command" : "openExample('wavelet\/ScatPathsOfWaveletImageScatFrameworkExample')",
          "title" : "Scattering Paths of Wavelet Image Scattering Network" },
        
        { "url" : "waveletscattering2.paths.html#mw_6ec85815-31a2-4c3e-8f48-750fa49b6e34",
          "open_command" : "openExample('wavelet\/WaveletsOnAScatteringPathExample')",
          "title" : "Wavelets on Scattering Path" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering2.html",
          "name" : "waveletScattering2" },
        
        { "url" : "waveletscattering2.coefficientsize.html",
          "name" : "coefficientSize" } ] },
    { "href" : "ref\/waveletscattering2.scatteringtransform.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "scatteringTransform",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "waveletScattering2.scatteringTransform",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Wavelet 2-D scattering transform",
      "introduced" : "R2019a",
      "description" : "This MATLAB function returns the wavelet 2-D scattering transform of im for sf, the image scattering network.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "s = scatteringTransform(sf,im)",
            "[s,u] = scatteringTransform(sf,im)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sf",
          "purpose" : "Wavelet image scattering network",
          "htmlid" : "mw_a75f7a97-9546-4120-9639-91bc692a98fa_sep_mw_7ed7681b-5485-42c4-8d49-1ccedecfe1a6",
          "value" : 
          [ "waveletScattering2 object" ] },
        
        { "name" : "im",
          "purpose" : "Input image",
          "htmlid" : "mw_cdf6b851-2fa5-425d-bf14-febd21491998",
          "value" : 
          [ "real-valued matrix" ] } ],
      "outputs" : 
      [ 
        { "name" : "s",
          "purpose" : "Scattering coefficients",
          "htmlid" : "mw_a3209c1a-402e-4826-b461-83d44d990b2b",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "u",
          "purpose" : "Scalogram coefficients",
          "htmlid" : "mw_96765598-61dc-4bc9-827d-3dd5dc9678f5",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletscattering2.scatteringtransform.html#mw_bd0bfd53-3ea8-4c7b-a9fc-857be959bd5d",
          "open_command" : "openExample('wavelet\/CompareScatteringAndScalogramCoefficientsExample')",
          "title" : "Compare Scattering and Scalogram Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "waveletscattering2.html",
          "name" : "waveletScattering2" } ] },
    { "href" : "ref\/waveletsignalanalyzer-app.html",
      "refentity" : 
      [ 
        { "type" : "app",
          "name" : "Wavelet Signal Analyzer" },
        
        { "type" : "function",
          "name" : "waveletSignalAnalyzer",
          "fcntype" : "applauncher" } ],
      "refpurpose" : "Analyze and compress signals using wavelets",
      "introduced" : "R2023a",
      "description" : "The Wavelet Signal Analyzer app enables visualization, analysis, and compression of 1-D signals using the nondecimated discrete wavelet transform.",
      "appthumbnail" : 
      { "fileref" : "ref\/wavelet-signal-analyzer-app.png",
        "alt" : "Wavelet Signal Analyzer app" },
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "waveletSignalAnalyzer",
            "waveletSignalAnalyzer(sig)" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletsignalanalyzer-app.html#mw_788896d5-1385-4279-b02e-27062d77dd7d",
          "open_command" : "openExample('wavelet\/VisualizeWaveletDecompositionUsingWaveletSignalAnalyzerExample')",
          "title" : "Visualize Wavelet Decomposition Using Wavelet Signal Analyzer" },
        
        { "url" : "waveletsignalanalyzer-app.html#mw_7aaa0329-4b83-4ea8-820b-6d4b1248bc0a",
          "open_command" : "openExample('wavelet\/CompressSignalAndGenerateScriptExample')",
          "title" : "Compress Signal and Generate Script" },
        
        { "url" : "waveletsignalanalyzer-app.html#mw_492863e3-b078-462e-bb32-23860481dd3d",
          "open_command" : "openExample('wavelet\/VisualizeWaveletDecompositionOfComplexValuedSignalExample')",
          "title" : "Visualize Wavelet Decomposition of Complex-Valued Signal" } ],
      "seealso" : 
      [ 
        { "url" : "waveletimageanalyzer-app.html",
          "name" : "Wavelet Image Analyzer" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" },
        
        { "url" : "wavelettimefrequencyanalyzer-app.html",
          "name" : "Wavelet Time-Frequency Analyzer" },
        
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "imodwt.html",
          "name" : "imodwt" },
        
        { "url" : "modwtmra.html",
          "name" : "modwtmra" } ] },
    { "href" : "ref\/waveletsignaldenoiser-app.html",
      "refentity" : 
      [ 
        { "type" : "app",
          "name" : "Wavelet Signal Denoiser" },
        
        { "type" : "function",
          "name" : "waveletSignalDenoiser",
          "fcntype" : "applauncher" } ],
      "refpurpose" : "Visualize and denoise time series data",
      "introduced" : "R2017b",
      "description" : "The Wavelet Signal Denoiser app is an interactive tool for visualizing and denoising real-valued 1-D signals and comparing results.",
      "appthumbnail" : 
      { "fileref" : "ref\/introimage.png",
        "alt" : "Wavelet Signal Denoiser app" },
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "waveletSignalDenoiser",
            "waveletSignalDenoiser(sig)" ] } ],
      "examples" : 
      [ 
        { "url" : "waveletsignaldenoiser-app.html#mw_35220398-57a8-4f6e-896d-1d1fc3ca69a4",
          "open_command" : "openExample('wavelet\/DenoiseSignalUsingDefaultSettingsExample')",
          "title" : "Denoise Signal Using Default Settings" } ],
      "seealso" : 
      [ 
        { "url" : "waveletsignalanalyzer-app.html",
          "name" : "Wavelet Signal Analyzer" },
        
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "wavelettimefrequencyanalyzer-app.html",
          "name" : "Wavelet Time-Frequency Analyzer" },
        
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wdenoise2.html",
          "name" : "wdenoise2" } ] },
    { "href" : "ref\/wavelettimefrequencyanalyzer-app.html",
      "refentity" : 
      [ 
        { "type" : "app",
          "name" : "Wavelet Time-Frequency Analyzer" },
        
        { "type" : "function",
          "name" : "waveletTimeFrequencyAnalyzer",
          "fcntype" : "applauncher" } ],
      "refpurpose" : "Visualize scalogram of signals",
      "introduced" : "R2022a",
      "description" : "The Wavelet Time-Frequency Analyzer app is an interactive tool for visualizing scalograms of real- and complex-valued 1-D signals.",
      "appthumbnail" : 
      { "fileref" : "ref\/tfappthumbnail.png",
        "alt" : "Wavelet Time-Frequency Analyzer app" },
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "waveletTimeFrequencyAnalyzer",
            "waveletTimeFrequencyAnalyzer(sig)" ] } ],
      "examples" : 
      [ 
        { "url" : "wavelettimefrequencyanalyzer-app.html#mw_db05590f-58d2-48b2-980f-c98304b4b0f4",
          "open_command" : "openExample('wavelet\/VisualizeScalogramsUsingDefaultSettingsExample')",
          "title" : "Visualize Scalograms Using Default Settings" },
        
        { "url" : "wavelettimefrequencyanalyzer-app.html#mw_b868ca1f-31b2-4feb-866e-8669a01bc665",
          "open_command" : "openExample('wavelet\/AdjustMorseWaveletParametersExample')",
          "title" : "Adjust Morse Wavelet Parameters" },
        
        { "url" : "wavelettimefrequencyanalyzer-app.html#mw_9ea4b627-1f45-4922-963a-e8c30d4c1d58",
          "open_command" : "openExample('wavelet\/AdjustScalogramFrequencyAxisScaleExample')",
          "title" : "Adjust Scalogram Frequency Axis Scale" } ],
      "seealso" : 
      [ 
        { "url" : "waveletsignalanalyzer-app.html",
          "name" : "Wavelet Signal Analyzer" },
        
        { "url" : "signalmultiresolutionanalyzer-app.html",
          "name" : "Signal Multiresolution Analyzer" },
        
        { "url" : "..\/..\/signal\/ref\/signalanalyzer-app.html",
          "name" : "Signal Analyzer" },
        
        { "url" : "cwt.html",
          "name" : "cwt" },
        
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" },
        
        { "url" : "cwtfreqbounds.html",
          "name" : "cwtfreqbounds" } ] },
    { "href" : "ref\/wavemngr.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wavemngr",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet manager",
      "introduced" : "preR2006a",
      "description" : "Use wavemngr to add, delete, restore, or read wavelets.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wavemngr('add',FN,FSN,WT,NUMS,FILE)",
            "wavemngr('add',FN,FSN,WT,{NUMS,TYPNUMS},FILE)",
            "wavemngr(___,B)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "wavemngr('del',N)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "wavemngr('restore')",
            "wavemngr('restore',IN2)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "out = wavemngr('read')",
            "out = wavemngr('read',IN2)",
            "out = wavemngr('read_asc')" ] },
        
        { "title" : "",
          "syntax" : 
          [ "wavetype = wavemngr('type',wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "FN",
          "purpose" : "Wavelet family name",
          "htmlid" : "mw_4f5bf41a-36c4-4675-a3e7-cc142edc061f",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "FSN",
          "purpose" : "Wavelet family short name",
          "htmlid" : "mw_6c0a2779-1c22-4491-9d10-b44757f98e4a",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "WT",
          "purpose" : "Wavelet family type",
          "htmlid" : "mw_a07c3cc5-59a0-46c7-8ec0-c26073cf6550",
          "value" : 
          [ "1",
            "2",
            "3",
            "4",
            "5" ] },
        
        { "name" : "NUMS",
          "purpose" : "Wavelet parameters",
          "htmlid" : "mw_b908c512-3d4a-4118-bac1-2b1bf0398cf7",
          "value" : 
          [ "''",
            "character vector",
            "string scalar" ] },
        
        { "name" : "TYPNUMS",
          "purpose" : "Wavelet parameter input format",
          "htmlid" : "mw_d4a40246-886c-478f-9b2c-e048eee1a5ce",
          "value" : 
          [ "'integer'",
            "'real'",
            "'charactervector'" ],
          "defaultvalue" : "'integer'" },
        
        { "name" : "FILE",
          "purpose" : "Wavelet definition file",
          "htmlid" : "mw_c46c3b21-cb9f-4fe3-bcca-77eca67e9d88",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "B",
          "purpose" : "Effective support",
          "htmlid" : "mw_d77feda8-747f-4a75-a76e-91f0612e6f92",
          "value" : 
          [ "two-element real-valued vector" ] },
        
        { "name" : "N",
          "purpose" : "Wavelet",
          "htmlid" : "mw_8c7afcc0-d35d-499e-9e4a-d86d4d149912",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_ddd99ba3-9a9a-4134-8a8d-76453a1f3d17",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "out",
          "purpose" : "Wavelet manager output",
          "htmlid" : "mw_c40a3c67-7adb-44b5-bac9-5b453fb27999",
          "value" : 
          [ "character array" ] },
        
        { "name" : "wavetype",
          "purpose" : "Wavelet family type",
          "htmlid" : "mw_657be92d-3411-4b52-b638-3a1c9c85f991",
          "value" : 
          [ "integer" ] } ],
      "examples" : 
      [ 
        { "url" : "wavemngr.html#mw_262c67d2-1f4e-4d03-a2e8-f7defe360bb4",
          "open_command" : "openExample('wavelet\/WaveletNamesAndFamilyNamesExample')",
          "title" : "Wavelet Names and Family Names" },
        
        { "url" : "wavemngr.html#mw_e58fcbf8-3685-4837-ac0d-3faf9b5be480",
          "open_command" : "openExample('wavelet\/AddWaveletFamiliesExample')",
          "title" : "Add Wavelet Families" } ],
      "seealso" : 
      [ 
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" } ] },
    { "href" : "ref\/wavenames.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wavenames",
          "fcntype" : "simple" } ],
      "refpurpose" : "(To be removed) Wavelet names for LWT",
      "deprecationstatus" : "announce",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns a cell array that contains the name of all wavelets of type T.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "W = wavenames(T)" ] } ],
      "seealso" : 
      [ 
        { "url" : "liftingscheme.html",
          "name" : "liftingScheme" } ] },
    { "href" : "ref\/waverec.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "waverec",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multilevel 1-D discrete wavelet transform reconstruction",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function reconstructs the 1-D signal x based on the multilevel wavelet decomposition structure [c,l] and the wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "x = waverec(c,l,wname)",
            "x = waverec(c,l,LoR,HiR)" ] } ],
      "inputs" : 
      [ 
        { "name" : "c",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_ff1fb7c1-dbc2-42d2-9a0c-e8ca2abc05b6",
          "value" : 
          [ "vector" ] },
        
        { "name" : "l",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "mw_d8ecae14-00b5-437c-b145-f60ce09d15d8",
          "value" : 
          [ "vector" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_5cabe1ab-a163-4805-b29b-24c0b2afbc58",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_48183683-c60f-416f-b456-df36c6ecc518",
          "value" : 
          [ "even-length real-valued vectors" ] } ],
      "outputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Reconstructed signal",
          "htmlid" : "mw_c9152e3f-f3e5-4ab0-9c77-b314f6727a4c",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "waverec.html#mw_104aa515-b9f6-4f8d-9675-819df016692f",
          "open_command" : "openExample('wavelet\/Multilevel1DWaveletReconstructionExample')",
          "title" : "Multilevel 1-D Wavelet Reconstruction" } ],
      "seealso" : 
      [ 
        { "url" : "appcoef.html",
          "name" : "appcoef" },
        
        { "url" : "idwt.html",
          "name" : "idwt" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" } ] },
    { "href" : "ref\/waverec2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "waverec2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multilevel 2-D discrete wavelet transform reconstruction",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function reconstructs the image, imrec, based on the multilevel discrete wavelet transform (DWT), c, and the bookkeeping matrix, s.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "imrec = waverec2(c,s,wname)",
            "imrec = waverec2(c,s,LoR,HiR)",
            "imrec = waverec2(___,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "c",
          "purpose" : "Wavelet decomposition vector",
          "htmlid" : "mw_8ba59d23-9eb7-4067-90a4-0ea637f69408",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "s",
          "purpose" : "Bookkeeping matrix",
          "htmlid" : "mw_b713a868-1146-45fa-b34f-e8e83fcb27ea",
          "value" : 
          [ "integer-valued matrix" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_f3de820f-3fc4-4ebb-a5ea-5a221dc78236",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_0d26e4bb-8f30-42c7-ab2c-8465ce55013b",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "DetailGain",
              "purpose" : "Wavelet subband gains",
              "htmlid" : "mw_8275eed0-c862-41fd-b073-0adce4ff4783",
              "value" : 
              [ "lev-by-3 matrix of ones, where lev is the level of the DWT",
                "lev-by-3 matrix" ],
              "defaultvalue" : "lev-by-3 matrix of ones, where lev is the level of the DWT" },
            
            { "name" : "LowpassGain",
              "purpose" : "Lowpass gain",
              "htmlid" : "mw_e22a446e-8ff0-469d-8573-2c3f816cb200",
              "value" : 
              [ "1",
                "real number" ],
              "defaultvalue" : "1" } ] } ],
      "examples" : 
      [ 
        { "url" : "waverec2.html#mw_9bdf8e53-1c1c-40fb-8972-d3281916144d",
          "open_command" : "openExample('wavelet\/TwoDWaveletReconstructionExample')",
          "title" : "2-D Wavelet Reconstruction" },
        
        { "url" : "waverec2.html#mw_9cb78027-218f-4ebc-a1a1-c75b47bbbe2e",
          "open_command" : "openExample('wavelet\/ApplyGainsToWaveletSubbandsAndReconstructImageExample')",
          "title" : "Apply Gains to Wavelet Subbands and Reconstruct Image" } ],
      "seealso" : 
      [ 
        { "url" : "waveletimageanalyzer-app.html",
          "name" : "Wavelet Image Analyzer" },
        
        { "url" : "appcoef2.html",
          "name" : "appcoef2" },
        
        { "url" : "idwt2.html",
          "name" : "idwt2" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" } ] },
    { "href" : "ref\/waverec3.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "waverec3",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multilevel 3-D discrete wavelet transform reconstruction",
      "introduced" : "R2010a",
      "description" : "This MATLAB function reconstructs the 3-D array x based on the multilevel wavelet decomposition structure wdec.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "x = waverec3(wdec)",
            "c = waverec3(wdec,type,n)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wdec",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_2c249e6c-7920-400f-9d60-fb7a4eee956f",
          "value" : 
          [ "structure" ] },
        
        { "name" : "type",
          "purpose" : "Type of reconstruction or extraction",
          "htmlid" : "mw_8a065822-0f6f-4f2f-8691-33c807025de8",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "n",
          "purpose" : "Decomposition level",
          "htmlid" : "mw_d9b2d5b2-c635-4cc2-a071-955c6bd6426c",
          "value" : 
          [ "wdec.level",
            "integer" ],
          "defaultvalue" : "wdec.level" } ],
      "outputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Reconstruction",
          "htmlid" : "mw_d7be8470-85ea-4cf2-91ad-b375d406a999",
          "value" : 
          [ "3-D array" ] },
        
        { "name" : "c",
          "purpose" : "Extracted coefficients",
          "htmlid" : "mw_a3c877c1-7242-441d-acdd-9a7640f12581",
          "value" : 
          [ "3-D array" ] } ],
      "examples" : 
      [ 
        { "url" : "waverec3.html#mw_7f85577d-a896-4921-a23d-0e44688d86a8",
          "open_command" : "openExample('wavelet\/PerfectReconstructionwith3DDiscreteWaveletTransformExample')",
          "title" : "Perfect Reconstruction with 3-D Discrete Wavelet Transform" },
        
        { "url" : "waverec3.html#mw_383fa8d8-bb4d-4eeb-896d-eb05c9b3cc57",
          "open_command" : "openExample('wavelet\/Comparewaverec3andidwt3Example')",
          "title" : "Compare waverec3 and idwt3" } ],
      "seealso" : 
      [ 
        { "url" : "idwt3.html",
          "name" : "idwt3" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wavedec3.html",
          "name" : "wavedec3" } ] },
    { "href" : "ref\/wavsupport.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wavsupport",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet support",
      "introduced" : "R2010b",
      "description" : "This MATLAB function returns the lower bound, LB, and upper bound, UB, of the support for the wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[LB,UB] = wavsupport(wname)",
            "B = wavsupport(wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_6b9c2977-aa3b-4170-8014-383d133aa494",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "LB,UB",
          "purpose" : "Wavelet support",
          "htmlid" : "mw_cdbd4076-e33e-40f1-8567-0c889e3ee6d2",
          "value" : 
          [ "scalars" ] },
        
        { "name" : "B",
          "purpose" : "Support of the wavelet",
          "htmlid" : "mw_6cd53f14-54ee-4b9c-907c-785acdd41cb1",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wavsupport.html#mw_9f7df4fe-d49f-46ec-8d61-b57e218c16e4",
          "open_command" : "openExample('wavelet\/SupportOfHaarWaveletExample')",
          "title" : "Support of Haar Wavelet" },
        
        { "url" : "wavsupport.html#mw_0584c4d8-c7bc-490e-a079-c2c180a80b19",
          "open_command" : "openExample('wavelet\/SupportOfComplexValuedGaussianWaveletExample')",
          "title" : "Support of Complex-Valued Gaussian Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "wavemngr.html",
          "name" : "wavemngr" } ] },
    { "href" : "ref\/wbmpen.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wbmpen",
          "fcntype" : "simple" } ],
      "refpurpose" : "Penalized threshold for wavelet 1-D or 2-D denoising",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the global threshold thr for denoising.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "thr = wbmpen(c,l,sigma,alpha)",
            "thr = wbmpen(c,l,sigma,alpha,ARG)" ] } ],
      "inputs" : 
      [ 
        { "name" : "c,l",
          "purpose" : "Wavelet decomposition structure",
          "htmlid" : "mw_cd0c67a3-de0b-4150-9230-701ef7c492a2",
          "value" : 
          [ "vectors" ] },
        
        { "name" : "sigma",
          "purpose" : "Standard deviation",
          "htmlid" : "mw_d9503429-b038-4e2e-923d-1f2a7b345135",
          "value" : 
          [ "scalar" ] },
        
        { "name" : "alpha",
          "purpose" : "Tuning parameter",
          "htmlid" : "mw_45462478-9a29-4f5b-9db7-f5e5e6a5cee4",
          "value" : 
          [ "scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "thr",
          "purpose" : "Global threshold",
          "htmlid" : "mw_46aea198-1003-468f-b4e2-7661bd61fc25",
          "value" : 
          [ "scalar" ] } ],
      "examples" : 
      [ 
        { "url" : "wbmpen.html#mw_87000823-dfc4-4915-bbb0-cc7a4a9eb80c",
          "open_command" : "openExample('wavelet\/ApplyThresholdForSignalDenoisingExample')",
          "title" : "Apply Threshold for Signal Denoising" },
        
        { "url" : "wbmpen.html#mw_91571f78-30db-4a6c-8d06-5b688755f90f",
          "open_command" : "openExample('wavelet\/ApplyThresholdForImageDenoisingExample')",
          "title" : "Apply Threshold for Image Denoising" } ],
      "seealso" : 
      [ 
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wden.html",
          "name" : "wden" },
        
        { "url" : "wdencmp.html",
          "name" : "wdencmp" },
        
        { "url" : "wpbmpen.html",
          "name" : "wpbmpen" },
        
        { "url" : "wpdencmp.html",
          "name" : "wpdencmp" } ] },
    { "href" : "ref\/wcodemat.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wcodemat",
          "fcntype" : "simple" } ],
      "refpurpose" : "Extended pseudocolor matrix scaling",
      "introduced" : "preR2006a",
      "description" : "wcodemat rescales an input matrix to a specified range for display.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "y = wcodemat(x)",
            "y = wcodemat(x,nbcodes)",
            "y = wcodemat(x,nbcodes,opt)",
            "y = wcodemat(x,nbcodes,opt,absol)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input",
          "htmlid" : "mw_a025838b-dabd-4c70-934c-c1c0f2bc80d2",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "nbcodes",
          "purpose" : "Upper bound",
          "htmlid" : "mw_a9c86238-badf-4386-a445-f87403e444d2",
          "value" : 
          [ "16",
            "positive integer" ],
          "defaultvalue" : "16" },
        
        { "name" : "opt",
          "purpose" : "Dimension",
          "htmlid" : "mw_e5978d55-8e1f-4ece-85bb-34b3fa56223e",
          "value" : 
          [ "\"mat\"",
            "\"m\"",
            "\"column\"",
            "\"c\"",
            "\"row\"",
            "\"r\"" ],
          "defaultvalue" : "\"mat\"" },
        
        { "name" : "absol",
          "purpose" : "Rescale basis",
          "htmlid" : "mw_e0b0088c-9f10-4d90-80dc-1577d029ddcd",
          "value" : 
          [ "1",
            "scalar" ],
          "defaultvalue" : "1" } ],
      "examples" : 
      [ 
        { "url" : "wcodemat.html#mw_8e06feee-1743-49ee-9c2f-427d42ff919c",
          "open_command" : "openExample('wavelet\/ExtendedPseudocolorMatrixScalingExample')",
          "title" : "Extended Pseudocolor Matrix Scaling" } ],
      "seealso" : 
      [ 
        { "url" : "dwt2.html",
          "name" : "dwt2" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" } ] },
    { "href" : "ref\/wcoherence.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wcoherence",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet coherence and cross-spectrum",
      "introduced" : "R2016a",
      "description" : "This MATLAB function returns the magnitude-squared wavelet coherence, which is a measure of the correlation between signals x and y in the time-frequency plane.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wcoh = wcoherence(x,y)",
            "[wcoh,wcs] = wcoherence(x,y)",
            "[wcoh,wcs,period] = wcoherence(x,y,ts)",
            "[wcoh,wcs,f] = wcoherence(x,y,fs)",
            "[wcoh,wcs,f,coi] = wcoherence(___)",
            "[wcoh,wcs,period,coi] = wcoherence(___,ts)",
            "[___,coi,wtx,wty] = wcoherence(___)",
            "[___] = wcoherence(___,Name,Value)",
            "wcoherence(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "bu5yyz8-x",
          "value" : 
          [ "vector of real values" ] },
        
        { "name" : "y",
          "purpose" : "Input signal",
          "htmlid" : "bu5yyz8-y",
          "value" : 
          [ "vector of real values" ] },
        
        { "name" : "ts",
          "purpose" : "Sampling interval",
          "htmlid" : "bu5yyz8-ts",
          "value" : 
          [ "duration with positive scalar input" ] },
        
        { "name" : "fs",
          "purpose" : "Sampling frequency",
          "htmlid" : "bu5yyz8-fs",
          "value" : 
          [ "positive scalar",
            "[]" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "FrequencyLimits",
              "purpose" : "Frequency limits",
              "htmlid" : "mw_b51703ce-b99e-4769-8df4-182b96d2ab96",
              "value" : 
              [ "two-element scalar vector" ] },
            
            { "name" : "PeriodLimits",
              "purpose" : "Period limits",
              "htmlid" : "mw_4624582e-b605-461f-89f8-99814646f28d",
              "value" : 
              [ "two-element duration array" ] },
            
            { "name" : "VoicesPerOctave",
              "purpose" : "Number of voices per octave",
              "htmlid" : "bu5yyz8-VoicesPerOctave",
              "value" : 
              [ "12",
                "even integer from 10 to 32" ],
              "defaultvalue" : "12" },
            
            { "name" : "NumScalesToSmooth",
              "purpose" : "Number of scales to smooth",
              "htmlid" : "bu5yyz8-NumScalesToSmooth",
              "value" : 
              [ "positive integer" ] },
            
            { "name" : "NumOctaves",
              "purpose" : "Number of octaves",
              "htmlid" : "bu5yyz8-NumOctaves",
              "value" : 
              [ "positive integer" ] },
            
            { "name" : "PhaseDisplayThreshold",
              "purpose" : "Threshold for displaying phase vectors",
              "htmlid" : "bu5yyz8-PhaseDisplayThreshold",
              "value" : 
              [ "0.5",
                "real scalar between 0 and 1" ],
              "defaultvalue" : "0.5" } ] } ],
      "outputs" : 
      [ 
        { "name" : "wcoh",
          "purpose" : "Wavelet coherence",
          "htmlid" : "bu5yyz8-wcoh",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "wcs",
          "purpose" : "Wavelet cross spectrum",
          "htmlid" : "bu5yyz8-wcs",
          "value" : 
          [ "matrix of complex values" ] },
        
        { "name" : "period",
          "purpose" : "Scale-to-period conversion",
          "htmlid" : "bu5yyz8-period",
          "value" : 
          [ "array of durations" ] },
        
        { "name" : "f",
          "purpose" : "Scale-to-frequency conversion",
          "htmlid" : "bu5yyz8-f",
          "value" : 
          [ "vector" ] },
        
        { "name" : "coi",
          "purpose" : "Cone of influence",
          "htmlid" : "bu5yyz8-coi",
          "value" : 
          [ "array of doubles",
            "array of durations" ] },
        
        { "name" : "wtx",
          "purpose" : "Continuous wavelet transform of x",
          "htmlid" : "mw_5c351cf7-c7e2-48eb-8040-87f9acbf02c8",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "wty",
          "purpose" : "Continuous wavelet transform of y",
          "htmlid" : "mw_189e67c7-11af-4b81-8cd3-ff080ab8b049",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "wcoherence.html#bu5y1j7-2",
          "open_command" : "openExample('wavelet\/WaveletCoherenceUsingDefaultSettingsExample')",
          "title" : "Wavelet Coherence of Two Sine Waves" },
        
        { "url" : "wcoherence.html#bu6e0nr-1",
          "open_command" : "openExample('wavelet\/WaveletCoherenceUsingSamplingIntervalExample')",
          "title" : "Effect of Sampling Interval on Wavelet Coherence" },
        
        { "url" : "wcoherence.html#bu6eq0x-1",
          "open_command" : "openExample('wavelet\/WaveletCoherenceUsingSamplingFrequencyExample')",
          "title" : "Effect of Sampling Frequency on Wavelet Coherence" },
        
        { "url" : "wcoherence.html#bu6erw4-1",
          "open_command" : "openExample('wavelet\/WaveletCoherenceUsingSmoothedNumberOfScalesExample')",
          "title" : "Effect of Number of Smoothed Scales on Wavelet Coherence" },
        
        { "url" : "wcoherence.html#bu6e0rx-1",
          "open_command" : "openExample('wavelet\/WaveletCoherenceUsingPhaseDisplayThresholdExample')",
          "title" : "Effect of Phase Display Threshold on Wavelet Coherence of Weather Data" } ],
      "seealso" : 
      [ 
        { "url" : "cwt.html",
          "name" : "cwt" },
        
        { "url" : "cwtfreqbounds.html",
          "name" : "cwtfreqbounds" },
        
        { "url" : "cwtfilterbank.html",
          "name" : "cwtfilterbank" } ] },
    { "href" : "ref\/wcompress.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wcompress",
          "fcntype" : "simple" } ],
      "refpurpose" : "True compression of images using wavelets",
      "introduced" : "R2008b",
      "description" : "The wcompress function performs either compression or uncompression of grayscale or truecolor images.",
      "syntaxgroup" : 
      [ 
        { "title" : "Compression",
          "syntax" : 
          [ "wcompress('c',x,cname,compmthd)",
            "wcompress('c',fname,___)",
            "wcompress('c',I,___)",
            "wcompress(___,Name,Value)",
            "[comprat,bpp] = wcompress('c',___)" ] },
        
        { "title" : "Uncompression",
          "syntax" : 
          [ "xc = wcompress('u',cname)",
            "xc = wcompress('u',cname,'plot')",
            "xc = wcompress('u',cname,'step')" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input image",
          "htmlid" : "mw_41f5e132-4177-4acd-a43b-7d0a536019f6",
          "value" : 
          [ "2-D matrix",
            "3-D array" ] },
        
        { "name" : "cname",
          "purpose" : "Compressed image filename",
          "htmlid" : "mw_e14d3db6-3527-42f2-b525-3659bd2c4205",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "fname",
          "purpose" : "Image filename",
          "htmlid" : "mw_b9e9bf7e-356f-4216-adf7-d13b7b2de08a",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "compmthd",
          "purpose" : "Compression method",
          "htmlid" : "mw_38536dc3-8bf7-4c87-a2bc-fc0f93c73fb8",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "wname",
              "purpose" : "Wavelet name",
              "htmlid" : "mw_6d3ccc14-f516-490b-969f-60265be6ef95",
              "value" : 
              [ "'bior4.4'",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "'bior4.4'" },
            
            { "name" : "level",
              "purpose" : "Level of wavelet decomposition",
              "htmlid" : "mw_ee31aa0e-e1a6-4412-a04b-909605fd65be",
              "value" : 
              [ "positive integer" ] },
            
            { "name" : "it",
              "purpose" : "Image type transform",
              "htmlid" : "mw_18a8cb05-5c01-4c54-a562-f62ddad06ac3",
              "value" : 
              [ "'n'",
                "'g'",
                "'c'" ],
              "defaultvalue" : "'n'" },
            
            { "name" : "cc",
              "purpose" : "Color conversion parameter",
              "htmlid" : "mw_ca95c526-f9f6-44b4-837e-058ef0717e5c",
              "value" : 
              [ "'rgb' or 'none'",
                "'yuv'",
                "'klt'",
                "'yiq'",
                "'xyz'" ],
              "defaultvalue" : "'rgb' or 'none'" },
            
            { "name" : "maxloop",
              "purpose" : "Maximum number of steps",
              "htmlid" : "mw_04d2ee3b-76c1-49c3-941a-7c984758828b",
              "value" : 
              [ "10",
                "positive integer",
                "Inf" ],
              "defaultvalue" : "10" },
            
            { "name" : "bpp",
              "purpose" : "Bit-per-pixel ratio",
              "htmlid" : "mw_ea407d5c-f22d-46f8-8e89-fa26f02b1b0a",
              "value" : 
              [ "0.25",
                "scalar" ],
              "defaultvalue" : "0.25" },
            
            { "name" : "comprat",
              "purpose" : "Compression ratio",
              "htmlid" : "mw_5c194ceb-9a15-4dc5-b29b-d7607612f21d",
              "value" : 
              [ "0.25",
                "scalar" ],
              "defaultvalue" : "0.25" },
            
            { "name" : "nbclas",
              "purpose" : "Number of classes for quantization",
              "htmlid" : "mw_f86468fd-43cc-41b7-b8d1-55bf5b96ae74",
              "value" : 
              [ "75",
                "positive integer" ],
              "defaultvalue" : "75" },
            
            { "name" : "threshold",
              "purpose" : "Threshold value for compression",
              "htmlid" : "mw_73ff19be-4db7-4525-a0c9-716d4e90b877",
              "value" : 
              [ "nonnegative integer" ] },
            
            { "name" : "nbcfs",
              "purpose" : "Number of preserved coefficients",
              "htmlid" : "mw_3dccd3cb-456f-4d06-b64c-79665bf6135e",
              "value" : 
              [ "nonnegative integer" ] },
            
            { "name" : "percfs",
              "purpose" : "Percentage of preserved coefficients",
              "htmlid" : "mw_f7832661-b353-4797-8050-f58e9cfd5443",
              "value" : 
              [ "real number" ] },
            
            { "name" : "plotpar",
              "purpose" : "Plot parameter",
              "htmlid" : "mw_4c7df82f-d263-49d2-9220-8501a5de4c0f",
              "value" : 
              [ "'plot' or 0",
                "'step' or 1" ] } ] } ],
      "outputs" : 
      [ 
        { "name" : "comprat",
          "purpose" : "Compression ratio",
          "htmlid" : "mw_69b0e5ab-d7be-4b71-92fe-7b52ef51cdfe",
          "value" : 
          [ "scalar" ] },
        
        { "name" : "bpp",
          "purpose" : "Bit-per-pixel ratio",
          "htmlid" : "mw_ead547f5-badb-4195-aa4a-0df3af23e4b7",
          "value" : 
          [ "scalar" ] },
        
        { "name" : "xc",
          "purpose" : "Uncompressed image",
          "htmlid" : "mw_3fd42b8e-0251-42ae-b7a9-f8d21b10205e",
          "value" : 
          [ "2-D array",
            "3-D array" ] } ],
      "examples" : 
      [ 
        { "url" : "wcompress.html#mw_f1bd52d6-7b97-465f-b157-66372d7b37c2",
          "open_command" : "openExample('wavelet\/ImageCompressionUsingBasicParametersExample')",
          "title" : "Image Compression Using Basic Parameters" },
        
        { "url" : "wcompress.html#mw_d8a1727f-45a3-4a78-9c88-29d859b5cef9",
          "open_command" : "openExample('wavelet\/CompressionAndUncompressionOfAGrayscaleImageExample')",
          "title" : "Compression and Uncompression of a Grayscale Image" },
        
        { "url" : "wcompress.html#mw_a0e8bc2d-fb34-4dbc-b758-a644e4f8bb02",
          "open_command" : "openExample('wavelet\/ImageCompressionAndUncompressionUsingAdvancedParametersExample')",
          "title" : "Image Compression and Uncompression Using Advanced Parameters." },
        
        { "url" : "wcompress.html#mw_e5896b22-cf6f-4c01-9602-13bddb9e8100",
          "open_command" : "openExample('wavelet\/CompressionAndUncompressionOfATruecolorImageExample')",
          "title" : "Compression and Uncompression of a Truecolor Image" } ],
      "seealso" : 
      [ 
        { "url" : "..\/..\/matlab\/ref\/imread.html",
          "name" : "imread" },
        
        { "url" : "..\/..\/matlab\/ref\/imwrite.html",
          "name" : "imwrite" },
        
        { "url" : "wmaxlev.html",
          "name" : "wmaxlev" },
        
        { "url" : "..\/..\/matlab\/ref\/tempdir.html",
          "name" : "tempdir" },
        
        { "url" : "..\/..\/matlab\/ref\/path.html",
          "name" : "path" } ] },
    { "href" : "ref\/wdcbm.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wdcbm",
          "fcntype" : "simple" } ],
      "refpurpose" : "Thresholds for wavelet 1-D using Birgé-Massart strategy",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns level-dependent thresholds thr and numbers of coefficients to be kept nkeep, for denoising or compressing a signal.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[thr,nkeep] = wdcbm(C,L,alpha,M)" ] } ],
      "inputs" : 
      [ 
        { "name" : "C",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_518db344-2057-4b7e-b7b5-7acb34a0820c",
          "value" : 
          [ "vector" ] },
        
        { "name" : "L",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "mw_5b3517a1-085b-4207-a2bb-bf625ae9cee1",
          "value" : 
          [ "vector" ] },
        
        { "name" : "alpha",
          "purpose" : "Sparsity parameter",
          "htmlid" : "mw_2156a972-cafc-4f40-bad8-b32601b37f2f",
          "value" : 
          [ "real-valued scalar" ] },
        
        { "name" : "M",
          "purpose" : "Factor",
          "htmlid" : "mw_28ca4613-728a-49ff-9633-506213521d3d",
          "value" : 
          [ "L(1)",
            "real-valued scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "thr",
          "purpose" : "Level-dependent thresholds",
          "htmlid" : "mw_16cdd351-5e6c-4941-a082-2014a89f6ca4",
          "value" : 
          [ "vector" ] },
        
        { "name" : "nkeep",
          "purpose" : "Number of coefficients",
          "htmlid" : "mw_fbd51b4c-528e-456f-8ddb-18ba2b34321f",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wdcbm.html#mw_d9789a10-fddf-4071-a30f-6cd76894e3a3",
          "open_command" : "openExample('wavelet\/CompressSignalUsingBirgMassartStrategyExample')",
          "title" : "Compress Signal Using Birgé-Massart Strategy" } ],
      "seealso" : 
      [ 
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wdencmp.html",
          "name" : "wdencmp" },
        
        { "url" : "wpdencmp.html",
          "name" : "wpdencmp" } ] },
    { "href" : "ref\/wdcbm2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wdcbm2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Thresholds for wavelet 2-D using Birgé-Massart strategy",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns level-dependent thresholds thr and numbers of coefficients to be kept nkeep, for denoising or compressing an image.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[thr,nkeep] = wdcbm2(C,S,alpha,M)" ] } ],
      "inputs" : 
      [ 
        { "name" : "C",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_67165c40-e795-4600-b0b8-1764d3224a83",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "S",
          "purpose" : "Bookkeeping matrix",
          "htmlid" : "mw_4059b654-cb9d-4c39-8860-402ad2b0cea3",
          "value" : 
          [ "integer-valued matrix" ] },
        
        { "name" : "alpha",
          "purpose" : "Sparsity parameter",
          "htmlid" : "mw_9df22331-b08b-4dde-baa1-a05c3dc64b38",
          "value" : 
          [ "real-valued scalar" ] },
        
        { "name" : "M",
          "purpose" : "Factor",
          "htmlid" : "mw_f62b3acb-bc47-4fb6-a3f2-e80a68da1ddf",
          "value" : 
          [ "prod(S(1,:))",
            "real-valued scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "thr",
          "purpose" : "Level-dependent thresholds",
          "htmlid" : "mw_8cb28e5c-04f0-4c81-86b3-ac2f10b0518c",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "nkeep",
          "purpose" : "Number of coefficients",
          "htmlid" : "mw_d078835e-72e9-482d-b5ad-019b1aa2db09",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wdcbm2.html#mw_8bf89e0c-89aa-4106-8243-8553864679d4",
          "open_command" : "openExample('wavelet\/CompressImageUsingBirgeMassartStrategyExample')",
          "title" : "Compress Image Using Birgé-Massart Strategy" } ],
      "seealso" : 
      [ 
        { "url" : "wdenoise2.html",
          "name" : "wdenoise2" },
        
        { "url" : "wdencmp.html",
          "name" : "wdencmp" },
        
        { "url" : "wpdencmp.html",
          "name" : "wpdencmp" } ] },
    { "href" : "ref\/wdecenergy.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wdecenergy",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multisignal 1-D decomposition energy distribution",
      "introduced" : "R2012a",
      "description" : "This MATLAB function computes the vector E that contains the energy (L2-Norm) of each decomposed signal, the matrix PEC that contains the percentage of energy for each wavelet component (approximation and details) of each signal, and the matrix PECFS that contains the percentage of energy for each coefficient.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[E,PEC,PECFS] = wdecenergy(DEC)",
            "[E,PEC,PECFS,IDXSORT,LONGS] = wdecenergy(DEC,'sort')",
            "[E,PEC,PECFS] = wdecenergy(DEC,OPTSORT,IDXSIG)",
            "[E,PEC,PECFS,IDXSORT,LONGS] = wdecenergy(DEC,OPTSORT,IDXSIG)" ] } ],
      "examples" : 
      [ 
        { "url" : "wdecenergy.html#mw_5729b98d-5559-4eb6-901d-e7a64ebbf3dd",
          "open_command" : "openExample('wavelet\/Multisignal1DDecompositionEnergyDistributionExample')",
          "title" : "Multisignal 1-D Decomposition Energy Distribution" } ],
      "seealso" : 
      [ 
        { "url" : "mdwtdec.html",
          "name" : "mdwtdec" },
        
        { "url" : "mdwtrec.html",
          "name" : "mdwtrec" } ] },
    { "href" : "ref\/wden.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wden",
          "fcntype" : "simple" } ],
      "refpurpose" : "Automatic 1-D denoising",
      "deprecationstatus" : "announce",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns a denoised version XD of the signal X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "XD = wden(X,TPTR,SORH,SCAL,N,wname)",
            "XD = wden(C,L,___)",
            "XD = wden(W,'modwtsqtwolog',SORH,'mln',N,wname)",
            "[XD,CXD] = wden(___)",
            "[XD,CXD,LXD] = wden(___)",
            "[XD,CXD,LXD,THR] = wden(___)",
            "[XD,CXD,THR] = wden(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "mw_5eff0648-0170-4026-91a5-06d84603ab4b",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "C",
          "purpose" : "Wavelet expansion coefficients",
          "htmlid" : "mw_69ba670b-e7a4-4e20-8b93-54c31b46efad",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "L",
          "purpose" : "Size of wavelet expansion coefficients",
          "htmlid" : "mw_6aa4c0a0-070d-4c09-939a-4ca63767cffa",
          "value" : 
          [ "vector of positive integers" ] },
        
        { "name" : "W",
          "purpose" : "Maximal overlap wavelet decomposition structure",
          "htmlid" : "mw_eaf7df67-e661-44c3-a88b-640937e39a8d",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "TPTR",
          "purpose" : "Threshold selection rule",
          "htmlid" : "mw_59e080e1-a3ed-4d13-899d-14f08a677001",
          "value" : 
          [ "character array" ] },
        
        { "name" : "SORH",
          "purpose" : "Type of thresholding",
          "htmlid" : "mw_ac170e76-7211-447a-95e4-43cf57c7e7d2",
          "value" : 
          [ "'s'",
            "'h'" ] },
        
        { "name" : "SCAL",
          "purpose" : "Multiplicative threshold rescaling",
          "htmlid" : "mw_60006e93-2a59-4a92-aa81-b4c265fb8c33",
          "value" : 
          [ "'one'",
            "'sln'",
            "'mln'" ] },
        
        { "name" : "N",
          "purpose" : "Level of wavelet decomposition",
          "htmlid" : "mw_8290986f-f043-4bbf-b952-ff59811b293d",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Name of wavelet",
          "htmlid" : "mw_6db701a6-9f60-4527-8d75-9dc064bbfce9",
          "value" : 
          [ "character array" ] } ],
      "outputs" : 
      [ 
        { "name" : "XD",
          "purpose" : "Denoised signal",
          "htmlid" : "mw_ca4253ed-43b3-47af-a3f1-87cc719d6426",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "CXD",
          "purpose" : "Denoised wavelet coefficients",
          "htmlid" : "mw_a27a5a75-00df-4306-a5e6-fa5ef1dbfef8",
          "value" : 
          [ "real-valued vector or matrix" ] },
        
        { "name" : "LXD",
          "purpose" : "Size of denoised wavelet coefficients",
          "htmlid" : "mw_637a58b3-2846-4758-a777-02271225f836",
          "value" : 
          [ "vector of positive integers" ] },
        
        { "name" : "THR",
          "purpose" : "Denoising thresholds",
          "htmlid" : "mw_6c2e2923-5482-4bab-9c23-a1a21e146dea",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wden.html#mw_963f1df7-a578-4004-86ba-1e8427112c70",
          "open_command" : "openExample('wavelet\/Automatic1DDenoisingExample')",
          "title" : "Automatic 1-D Denoising Using Wavelets" },
        
        { "url" : "wden.html#mw_32b16ab0-328a-480d-b6bf-9c6b592224c8",
          "open_command" : "openExample('wavelet\/CompareDWTAndMODWTDenoisingExample')",
          "title" : "Compare DWT and MODWT Denoising of a Sinusoid with Two Jumps" },
        
        { "url" : "wden.html#mw_b51515d2-a5d2-45f5-804f-f38b32491597",
          "open_command" : "openExample('wavelet\/CompareDWTAndMODWTDenoisingBlockySignalExample')",
          "title" : "Compare DWT and MODWT Denoising of a Blocky Signal" } ],
      "seealso" : 
      [ 
        { "url" : "thselect.html",
          "name" : "thselect" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "wdencmp.html",
          "name" : "wdencmp" },
        
        { "url" : "wfilters.html",
          "name" : "wfilters" },
        
        { "url" : "wthresh.html",
          "name" : "wthresh" },
        
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wavemngr.html",
          "name" : "wavemngr" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" } ] },
    { "href" : "ref\/wdencmp.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wdencmp",
          "fcntype" : "simple" } ],
      "refpurpose" : "Denoising or compression",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns a denoised or compressed version XC of the input data X obtained by wavelet coefficients thresholding using the global positive threshold THR.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[XC,CXC,LXC,PERF0,PERFL2] = wdencmp('gbl',X,wname,N,THR,SORH,KEEPAPP)",
            "[___] = wdencmp('gbl',C,L,wname,N,THR,SORH,KEEPAPP)",
            "[___] = wdencmp('lvl',X,wname,N,THR,SORH)",
            "[___] = wdencmp('lvl',C,L,wname,N,THR,SORH)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "mw_c5b9e071-9bc6-423f-9306-235a198b2536",
          "value" : 
          [ "real-valued vector",
            "real-valued matrix" ] },
        
        { "name" : "C",
          "purpose" : "Wavelet expansion coefficients",
          "htmlid" : "mw_f33540ed-b7de-4a4a-9f69-d059fd12c36c",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "L",
          "purpose" : "Size of wavelet expansion coefficients",
          "htmlid" : "mw_71bc2bb3-81b6-403a-b4bb-ddba5928833c",
          "value" : 
          [ "vector of positive integers",
            "matrix of positive integers" ] },
        
        { "name" : "wname",
          "purpose" : "Name of wavelet",
          "htmlid" : "mw_fe7d4267-7b25-4c47-8f8c-18b95c935446",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "N",
          "purpose" : "Level of wavelet decomposition",
          "htmlid" : "mw_7e61789f-9cb9-4ea9-ade8-a9ab675c64a1",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "THR",
          "purpose" : "Threshold",
          "htmlid" : "mw_83ae2a8e-a874-45d8-ac30-9c1a0cd661d3",
          "value" : 
          [ "scalar",
            "real-valued vector",
            "real-valued matrix" ] },
        
        { "name" : "SORH",
          "purpose" : "Type of thresholding",
          "htmlid" : "mw_600745d9-8f9f-4e19-8a50-ebcd6b89f401",
          "value" : 
          [ "'s'",
            "'h'" ] },
        
        { "name" : "KEEPAPP",
          "purpose" : "Threshold approximation setting",
          "htmlid" : "mw_68c58183-cb2c-40b4-94cf-95d32db5fdae",
          "value" : 
          [ "0",
            "1" ] } ],
      "outputs" : 
      [ 
        { "name" : "XC",
          "purpose" : "Denoised or compressed data",
          "htmlid" : "mw_6e365991-42d6-418a-ada5-da3cdef2b874",
          "value" : 
          [ "real-valued vector",
            "real-valued matrix" ] },
        
        { "name" : "CXC",
          "purpose" : "Wavelet expansion coefficients",
          "htmlid" : "mw_af4f916c-5a76-4431-b30b-d73b2f687c60",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "LXC",
          "purpose" : "Size of wavelet expansion coefficients",
          "htmlid" : "mw_4b2f57fb-c616-4263-bea7-1d904d383eb8",
          "value" : 
          [ "vector of positive integers",
            "matrix of positive integers" ] },
        
        { "name" : "PERF0",
          "purpose" : "Compression score",
          "htmlid" : "mw_c1067c9a-76cd-4922-8fc0-0089d2aebd23",
          "value" : 
          [ "scalar" ] },
        
        { "name" : "PERFL2",
          "purpose" : "L^{2} energy recovery",
          "htmlid" : "mw_fa3262a5-dd1c-4b1f-9824-a1e427681c78",
          "value" : 
          [ "scalar" ] } ],
      "examples" : 
      [ 
        { "url" : "wdencmp.html#mw_ce25f202-3ef8-45bb-b1c6-ee312a4dbb2c",
          "open_command" : "openExample('wavelet\/Denoise1DSignalUsingDefaultGlobalThreshExample')",
          "title" : "Denoise 1-D Signal Using Default Global Threshold" },
        
        { "url" : "wdencmp.html#mw_4d887b8e-1ebf-43b3-9356-43b01ef1a88f",
          "open_command" : "openExample('wavelet\/DenoiseImageUsingDefaultGlobalThresholdExample')",
          "title" : "Denoise Image Using Default Global Threshold" } ],
      "seealso" : 
      [ 
        { "url" : "ddencmp.html",
          "name" : "ddencmp" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" },
        
        { "url" : "wbmpen.html",
          "name" : "wbmpen" },
        
        { "url" : "wcompress.html",
          "name" : "wcompress" },
        
        { "url" : "wdcbm2.html",
          "name" : "wdcbm2" },
        
        { "url" : "wpdencmp.html",
          "name" : "wpdencmp" },
        
        { "url" : "wthresh.html",
          "name" : "wthresh" },
        
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" } ] },
    { "href" : "ref\/wdenoise.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wdenoise",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet signal denoising",
      "introduced" : "R2017b",
      "description" : "This MATLAB function denoises the data in X using an empirical Bayesian method with a Cauchy prior.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "XDEN = wdenoise(X)",
            "XDEN = wdenoise(X,LEVEL)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "XDEN = wdenoise(___,Name,Value)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[XDEN,DENOISEDCFS] = wdenoise(___)",
            "[XDEN,DENOISEDCFS,ORIGCFS] = wdenoise(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "d124e134780",
          "value" : 
          [ "vector",
            "matrix",
            "timetable" ] },
        
        { "name" : "LEVEL",
          "purpose" : "Level of wavelet decomposition",
          "htmlid" : "d124e134811",
          "value" : 
          [ "positive integer" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Wavelet",
              "purpose" : "Wavelet",
              "htmlid" : "d124e134903",
              "value" : 
              [ "\"sym4\"",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "\"sym4\"" },
            
            { "name" : "DenoisingMethod",
              "purpose" : "Denoising method",
              "htmlid" : "d124e134980",
              "value" : 
              [ "\"Bayes\"",
                "\"BlockJS\"",
                "\"FDR\"",
                "\"Minimax\"",
                "\"SURE\"",
                "\"UniversalThreshold\"" ],
              "defaultvalue" : "\"Bayes\"" },
            
            { "name" : "ThresholdRule",
              "purpose" : "Threshold rule",
              "htmlid" : "d124e135113",
              "value" : 
              [ "character array" ] },
            
            { "name" : "NoiseEstimate",
              "purpose" : "Method of estimating variance of noise",
              "htmlid" : "d124e135181",
              "value" : 
              [ "\"LevelIndependent\"",
                "\"LevelDependent\"" ],
              "defaultvalue" : "\"LevelIndependent\"" } ] } ],
      "outputs" : 
      [ 
        { "name" : "XDEN",
          "purpose" : "Denoised data",
          "htmlid" : "d124e135225",
          "value" : 
          [ "vector",
            "matrix",
            "timetable" ] },
        
        { "name" : "DENOISEDCFS",
          "purpose" : "Denoised wavelet and scaling coefficients",
          "htmlid" : "d124e135256",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "ORIGCFS",
          "purpose" : "Original wavelet and scaling coefficients",
          "htmlid" : "d124e135285",
          "value" : 
          [ "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "wdenoise.html#mw_bac4ce10-d45e-4418-bc58-153b5124a405",
          "open_command" : "openExample('wavelet\/WdenoiseNoisySignalExample')",
          "title" : "Denoise A Signal Using Default Values" },
        
        { "url" : "wdenoise.html#mw_ebf17f52-d62d-43b8-9482-76fbad38dbc6",
          "open_command" : "openExample('wavelet\/DenoiseTimetableUsingBlockthresholdingExample')",
          "title" : "Denoise a Timetable Using Block Thresholding" },
        
        { "url" : "wdenoise.html#mw_403545ca-de44-4ada-8f11-1f92d5b7ae43",
          "open_command" : "openExample('wavelet\/CompareDenoisedSignalsExample')",
          "title" : "Compare Denoised Signals" } ],
      "seealso" : 
      [ 
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wavemngr.html",
          "name" : "wavemngr" },
        
        { "url" : "wdenoise2.html",
          "name" : "wdenoise2" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" } ] },
    { "href" : "ref\/wdenoise2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wdenoise2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet image denoising",
      "introduced" : "R2019a",
      "description" : "This MATLAB function denoises the grayscale or RGB image IM using an empirical Bayesian method.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "IMDEN = wdenoise2(IM)",
            "IMDEN = wdenoise2(IM,LEVEL)",
            "[IMDEN,DENOISEDCFS] = wdenoise2(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[IMDEN,DENOISEDCFS,ORIGCFS] = wdenoise2(___)",
            "[IMDEN,DENOISEDCFS,ORIGCFS,S] = wdenoise2(___)",
            "[IMDEN,DENOISEDCFS,ORIGCFS,S,SHIFTS] = wdenoise2(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = wdenoise2(___,Name,Value)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "wdenoise2(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "IM",
          "purpose" : "Input image",
          "htmlid" : "mw_ece8bf01-7da3-42c4-a693-986cc16af59d",
          "value" : 
          [ "real-valued 2-D matrix",
            "real-valued 3-D array" ] },
        
        { "name" : "LEVEL",
          "purpose" : "Wavelet decomposition level",
          "htmlid" : "mw_b7fccf45-d62f-41c7-a990-5690dbf9eee8",
          "value" : 
          [ "positive integer" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Wavelet",
              "purpose" : "Name of wavelet",
              "htmlid" : "mw_f7b80494-ec06-4196-80e4-b3aa5278db4c",
              "value" : 
              [ "'bior4.4'",
                "character vector",
                "string scalar" ],
              "defaultvalue" : "'bior4.4'" },
            
            { "name" : "DenoisingMethod",
              "purpose" : "Denoising method",
              "htmlid" : "mw_f59f8dac-c5b8-41e1-b440-d0ece4d0ddf5",
              "value" : 
              [ "'Bayes'",
                "'FDR'",
                "'Minimax'",
                "'SURE'",
                "'UniversalThreshold'" ],
              "defaultvalue" : "'Bayes'" },
            
            { "name" : "ThresholdRule",
              "purpose" : "Threshold rule",
              "htmlid" : "mw_59ad414d-531c-4af1-b98c-5dfeb187ac29",
              "value" : 
              [ "'Hard'",
                "'Soft'",
                "'Mean'",
                "'Median'" ] },
            
            { "name" : "NoiseEstimate",
              "purpose" : "Method of estimating variance of noise",
              "htmlid" : "mw_e4a8c5fb-3152-4d71-904c-0d4f7036d740",
              "value" : 
              [ "'LevelIndependent'",
                "'LevelDependent'" ],
              "defaultvalue" : "'LevelIndependent'" },
            
            { "name" : "NoiseDirection",
              "purpose" : "Wavelet subbands",
              "htmlid" : "mw_aa621e97-9596-4d94-8aea-b86d206cd5a7",
              "value" : 
              [ "[\"h\",\"v\",\"d\"]",
                "string vector",
                "scalar string" ],
              "defaultvalue" : "[\"h\",\"v\",\"d\"]" },
            
            { "name" : "CycleSpinning",
              "purpose" : "Number of circular shifts",
              "htmlid" : "mw_cce20d63-c8cd-4a7c-b638-27b45cd0bdd7",
              "value" : 
              [ "0",
                "nonnegative integer" ],
              "defaultvalue" : "0" },
            
            { "name" : "ColorSpace",
              "purpose" : "Color space",
              "htmlid" : "mw_744da8ef-f29a-4c3c-890e-92ef331cb301",
              "value" : 
              [ "'PCA'",
                "'Original'" ],
              "defaultvalue" : "'PCA'" } ] } ],
      "outputs" : 
      [ 
        { "name" : "IMDEN",
          "purpose" : "Denoised image",
          "htmlid" : "mw_7658cfea-694b-4fef-a58f-2ffaec287b10",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "DENOISEDCFS",
          "purpose" : "Scaling and denoised wavelet coefficients",
          "htmlid" : "mw_fc35db0a-061c-454c-837d-5cdf2aaf6540",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "ORIGCFS",
          "purpose" : "Scaling and wavelet coefficients",
          "htmlid" : "mw_d3464814-0a7e-4759-b6c8-22dfaa94963e",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "S",
          "purpose" : "Bookkeeping matrix",
          "htmlid" : "mw_42d65303-2175-4a5d-bb62-1a0891616f09",
          "value" : 
          [ "integer-valued matrix" ] },
        
        { "name" : "SHIFTS",
          "purpose" : "Image shifts",
          "htmlid" : "mw_9a301f50-f497-4dcd-8e25-fa6ef4fda70b",
          "value" : 
          [ "integer-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "wdenoise2.html#mw_3a51cabd-e6ec-46e9-9273-7deec283575a",
          "open_command" : "openExample('wavelet\/DenoiseGrayscaleImageUsingDefaultSettingsExample')",
          "title" : "Denoise Grayscale Image Using Default Settings" },
        
        { "url" : "wdenoise2.html#mw_cf5b1a39-28c3-4fb1-9468-c105a5f6bb5f",
          "open_command" : "openExample('wavelet\/DenoiseColorImageExample')",
          "title" : "Denoise Color Image Using Cycle Spinning" },
        
        { "url" : "wdenoise2.html#mw_b642e94b-2dcd-447b-8869-586deaa5aa5f",
          "open_command" : "openExample('wavelet\/DenoiseImageUsingSpecificSubbandExample')",
          "title" : "Denoise Image Using Specific Subband" } ],
      "seealso" : 
      [ 
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" } ] },
    { "href" : "ref\/wenergy.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wenergy",
          "fcntype" : "simple" } ],
      "refpurpose" : "Energy for 1-D wavelet or wavelet packet decomposition",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns, for a 1-D wavelet decomposition, Ea, the percentage of energy corresponding to the approximation, and Ed, the percentages of energies corresponding to the details.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[Ea,Ed] = wenergy(c,l)",
            "E = wenergy(wpt)" ] } ],
      "inputs" : 
      [ 
        { "name" : "c",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_7231309d-12ef-48ec-b0f2-c1e1c807a455",
          "value" : 
          [ "vector" ] },
        
        { "name" : "l",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "mw_d87ef316-f7aa-4939-8a68-390ae3ff4f91",
          "value" : 
          [ "vector" ] },
        
        { "name" : "wpt",
          "purpose" : "Wavelet packet tree",
          "htmlid" : "mw_1cc3576c-10a4-43e9-9711-0156b4254478",
          "value" : 
          [ "wptree object" ] } ],
      "outputs" : 
      [ 
        { "name" : "Ea",
          "purpose" : "Percentage of energy corresponding to approximation",
          "htmlid" : "mw_a1109aa0-8512-4595-a63b-c90a02dfc57a",
          "value" : 
          [ "positive scalar" ] },
        
        { "name" : "Ed",
          "purpose" : "Percentage of energy corresponding to details",
          "htmlid" : "mw_ab5fd050-2c30-483e-acbe-4d8c2452115a",
          "value" : 
          [ "vector" ] },
        
        { "name" : "E",
          "purpose" : "Percentage of energy corresponding to terminal nodes",
          "htmlid" : "mw_efbf85c0-c984-403a-86c4-6e3ac23f690b",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wenergy.html#mw_83ba85d2-92bd-46a2-a6f8-db66929f376f",
          "open_command" : "openExample('wavelet\/EnergyOfWaveletDecompositionsExample')",
          "title" : "Energy of Wavelet Decompositions" } ],
      "seealso" : 
      [ 
        { "url" : "wptree.html",
          "name" : "wptree" },
        
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" } ] },
    { "href" : "ref\/wenergy2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wenergy2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Energy for 2-D wavelet decomposition",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns, for the 2-D wavelet decomposition structure C, S: Ea — Percentage of energy corresponding to the approximation.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[Ea,Eh,Ev,Ed] = wenergy2(C,S)",
            "[Ea,EDetail] = wenergy2(C,S)" ] } ],
      "inputs" : 
      [ 
        { "name" : "C",
          "purpose" : "Wavelet decomposition vector",
          "htmlid" : "mw_7aa45856-94be-4d5c-acdf-d3b88340ef9c",
          "value" : 
          [ "vector" ] },
        
        { "name" : "S",
          "purpose" : "Bookkeeping matrix",
          "htmlid" : "mw_c173560b-fa2c-4518-bba8-29202bdb5b12",
          "value" : 
          [ "matrix" ] } ],
      "outputs" : 
      [ 
        { "name" : "Ea",
          "purpose" : "Percentage of energy corresponding to the approximation",
          "htmlid" : "mw_72520c33-63ad-40ff-9ba0-16bafae5632d",
          "value" : 
          [ "scalar" ] },
        
        { "name" : "Eh,Ev,Ed",
          "purpose" : "Percentage of energy corresponding to the details",
          "htmlid" : "mw_d73ac0e1-2a75-4918-8560-7cdf3d754a00",
          "value" : 
          [ "vectors" ] },
        
        { "name" : "EDetail",
          "purpose" : "Sum of percentage of energy corresponding to the details",
          "htmlid" : "mw_27b38b8a-234f-48e6-ab21-1e991d46af0a",
          "value" : 
          [ "vectors" ] } ],
      "examples" : 
      [ 
        { "url" : "wenergy2.html#mw_743e78cb-6a67-4a47-8eda-5f5bdd628140",
          "open_command" : "openExample('wavelet\/EnergyOf2DWaveletDecompositionExample')",
          "title" : "Energy of 2-D Wavelet Decomposition" } ],
      "seealso" : 
      [ 
        { "url" : "wavedec2.html",
          "name" : "wavedec2" } ] },
    { "href" : "ref\/wentropy.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wentropy",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet entropy",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the normalized Shannon wavelet entropy of X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "ent = wentropy(X)",
            "ent = wentropy(X,Name=Value)",
            "[ent,re] = wentropy(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "mw_37644985-cb21-49a4-b007-832c3ff38790",
          "value" : 
          [ "real-valued vector",
            "real-valued matrix",
            "cell array" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "Entropy",
              "purpose" : "Entropy",
              "htmlid" : "mw_a0df69cc-f1d9-4e18-905d-7e1cf7d88b4a",
              "value" : 
              [ "\"Shannon\"",
                "\"Renyi\"",
                "\"Tsallis\"" ],
              "defaultvalue" : "\"Shannon\"" },
            
            { "name" : "Exponent",
              "purpose" : "Exponent",
              "htmlid" : "mw_0fc323f7-459c-48d8-9517-326c8bb7628c",
              "value" : 
              [ "2",
                "real scalar" ],
              "defaultvalue" : "2" },
            
            { "name" : "Transform",
              "purpose" : "Transform",
              "htmlid" : "mw_56fa8d4f-2ff2-497f-9c82-bec89c7b56cb",
              "value" : 
              [ "\"modwt\"",
                "\"dwt\"",
                "\"dwpt\"",
                "\"modwpt\"" ],
              "defaultvalue" : "\"modwt\"" },
            
            { "name" : "Level",
              "purpose" : "Wavelet decomposition level",
              "htmlid" : "mw_294c8a50-39c1-46b1-9e77-53005a70c547",
              "value" : 
              [ "positive integer" ] },
            
            { "name" : "Wavelet",
              "purpose" : "Wavelet",
              "htmlid" : "mw_f80779c7-7d81-40e3-baf7-5c98e78e8e0f",
              "value" : 
              [ "character vector",
                "string scalar" ] },
            
            { "name" : "Distribution",
              "purpose" : "Normalization method",
              "htmlid" : "mw_ca6ab6da-13d8-4663-8c46-61de95577e8c",
              "value" : 
              [ "\"scale\"",
                "\"global\"" ],
              "defaultvalue" : "\"scale\"" },
            
            { "name" : "Scaled",
              "purpose" : "Scale wavelet entropy",
              "htmlid" : "mw_3dccbf9f-b621-4b96-905e-d130eadc0839",
              "value" : 
              [ "true or 1",
                "false or 0" ],
              "defaultvalue" : "true or 1" },
            
            { "name" : "EnergyThreshold",
              "purpose" : "Energy threshold",
              "htmlid" : "mw_22412ce1-ffdb-4cad-ad88-998e0af68071",
              "value" : 
              [ "1e-8",
                "nonnegative scalar" ],
              "defaultvalue" : "1e-8" } ] } ],
      "outputs" : 
      [ 
        { "name" : "ent",
          "purpose" : "Entropy",
          "htmlid" : "mw_214b1241-daa4-4afe-97fb-62ce57d7573e",
          "value" : 
          [ "scalar",
            "vector" ] },
        
        { "name" : "re",
          "purpose" : "Relative wavelet energy",
          "htmlid" : "mw_8b50f8e1-18f8-48b4-ad5f-296c104b91ba",
          "value" : 
          [ "vector",
            "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "wentropy.html#mw_e8272c68-2f26-492c-b762-5d19aeaf479e",
          "open_command" : "openExample('wavelet\/ObtainWaveletEntropyExample')",
          "title" : "Obtain Wavelet Entropy" } ],
      "seealso" : 
      [ 
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "dwpt.html",
          "name" : "dwpt" },
        
        { "url" : "modwt.html",
          "name" : "modwt" },
        
        { "url" : "modwpt.html",
          "name" : "modwpt" } ] },
    { "href" : "ref\/wextend.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wextend",
          "fcntype" : "simple" } ],
      "refpurpose" : "Extend vector or matrix",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function extends real-valued input vector or matrix X by length LEN, using the TYPE method and MODE extension.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "YEXT= wextend(TYPE,MODE,X,LEN)",
            "YEXT = wextend(___,LOC)" ] } ],
      "inputs" : 
      [ 
        { "name" : "TYPE",
          "purpose" : "Extension method",
          "htmlid" : "d124e138960",
          "value" : 
          [ "1",
            "'1'",
            "'1d'",
            "'1D'",
            "2",
            "'2'",
            "'2d'",
            "'2D'",
            "'ar'",
            "'addrow'",
            "'ac'",
            "'addcol'" ] },
        
        { "name" : "MODE",
          "purpose" : "Specific extension",
          "htmlid" : "d124e139074",
          "value" : 
          [ "'zpd'",
            "'sp0'",
            "'spd'",
            "'sp1'",
            "'sym'",
            "'symh'",
            "'symw'",
            "'asym'",
            "'asymh'",
            "'asymw'",
            "'ppd'",
            "'per'" ] },
        
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "d124e139250",
          "value" : 
          [ "real-valued vector or matrix" ] },
        
        { "name" : "LEN",
          "purpose" : "Length of extension",
          "htmlid" : "d124e139291",
          "value" : 
          [ "nonnegative integer",
            "two-element vector of nonnegative integers" ] },
        
        { "name" : "LOC",
          "purpose" : "Location of extension",
          "htmlid" : "d124e139327",
          "value" : 
          [ "'l'",
            "'u'",
            "'r'",
            "'d'",
            "'b'",
            "'n'",
            "two-character array" ] } ],
      "examples" : 
      [ 
        { "url" : "wextend.html#mw_11c459e5-f8ce-4987-a57b-96a6110d9348",
          "open_command" : "openExample('wavelet\/WextendStandardExample')",
          "title" : "Extending Vectors and Matrices" },
        
        { "url" : "wextend.html#mw_d739bfd5-3302-421a-8782-5acf8af15bc3",
          "open_command" : "openExample('wavelet\/ExtendUint8DataExample')",
          "title" : "Extend uint8 Data Beyond Range Limits" },
        
        { "url" : "wextend.html#mw_3d57a610-c369-43a0-a8b7-1862b57c8aac",
          "open_command" : "openExample('wavelet\/ExtendInt8DataExample')",
          "title" : "Extend int8 Data Beyond Range Limits" } ],
      "seealso" : 
      [ 
        { "url" : "dwtmode.html",
          "name" : "dwtmode" } ] },
    { "href" : "ref\/wfbm.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wfbm",
          "fcntype" : "simple" } ],
      "refpurpose" : "Fractional Brownian motion synthesis",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns a fractional Brownian motion signal fBm of the Hurst parameter H (0 < H < 1) and length L, following the algorithm proposed by Abry and Sellan [1].",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "fBm = wfbm(H,L)",
            "fBm = wfbm(H,L,ns,w)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "fBm = wfbm(H,L,'plot')" ] } ],
      "inputs" : 
      [ 
        { "name" : "H",
          "purpose" : "Hurst parameter",
          "htmlid" : "mw_328a58f3-5a2b-4e19-be76-f13aee105c8a",
          "value" : 
          [ "positive scalar" ] },
        
        { "name" : "L",
          "purpose" : "Signal length",
          "htmlid" : "mw_f48d8e67-9746-43db-ab17-1eac6ba0cd81",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "ns",
          "purpose" : "Number of reconstruction steps",
          "htmlid" : "mw_9b77aaaa-5d2e-4afe-a816-839609b2d5ae",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "w",
          "purpose" : "Orthogonal wavelet",
          "htmlid" : "mw_e2414ad6-669a-4c70-bd5c-e581ba19c9f7",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "outputs" : 
      [ 
        { "name" : "fBm",
          "purpose" : "Fractional Brownian motion signal",
          "htmlid" : "mw_b2ba17cc-232d-47ab-85e5-88ff1c09e4e5",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wfbm.html#mw_42a7bca9-b43c-4991-979a-216f0528bda2",
          "open_command" : "openExample('wavelet\/GenerateFractionalBrownianMotionSignalsExample')",
          "title" : "Generate Fractional Brownian Motion Signals" } ],
      "seealso" : 
      [ 
        { "url" : "wfbmesti.html",
          "name" : "wfbmesti" } ] },
    { "href" : "ref\/wfbmesti.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wfbmesti",
          "fcntype" : "simple" } ],
      "refpurpose" : "Parameter estimation of fractional Brownian motion",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns estimates of the fractal index H of the input signal X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "hest = wfbmesti(X)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input signal",
          "htmlid" : "mw_907e19bc-f7b9-4816-a32f-680c35e11bd0",
          "value" : 
          [ "vector" ] } ],
      "outputs" : 
      [ 
        { "name" : "hest",
          "purpose" : "Fractal index estimates",
          "htmlid" : "mw_e9788256-75ec-4a35-bf3e-eb80fae216a9",
          "value" : 
          [ "1-by-3 vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wfbmesti.html#mw_fc3affd1-6e57-47bf-b8ef-850f75faa7ae",
          "open_command" : "openExample('wavelet\/HurstParameterEstimationExample')",
          "title" : "Hurst Parameter Estimation" } ],
      "seealso" : 
      [ 
        { "url" : "wfbm.html",
          "name" : "wfbm" } ] },
    { "href" : "ref\/wfilters.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wfilters",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet filters",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the four lowpass and highpass, decomposition and reconstruction filters associated with the orthogonal or biorthogonal wavelet wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[LoD,HiD,LoR,HiR] = wfilters(wname)",
            "[F1,F2] = wfilters(wname,type)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wname",
          "purpose" : "Name of orthogonal or biorthogonal wavelet",
          "htmlid" : "d124e140354",
          "value" : 
          [ "\"haar\"",
            "\"db1\"",
            "\"db2\"",
            "\"coif1\"",
            "\"coif2\"" ] },
        
        { "name" : "type",
          "purpose" : "Type of filter pair",
          "htmlid" : "d124e140609",
          "value" : 
          [ "\"d\"",
            "\"r\"",
            "\"l\"",
            "\"h\"" ] } ],
      "outputs" : 
      [ 
        { "name" : "LoD",
          "purpose" : "Decomposition lowpass filter",
          "htmlid" : "d124e140696",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "HiD",
          "purpose" : "Decomposition highpass filter",
          "htmlid" : "d124e140716",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "LoR",
          "purpose" : "Reconstruction lowpass filter",
          "htmlid" : "d124e140736",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "HiR",
          "purpose" : "Reconstruction highpass filter",
          "htmlid" : "d124e140756",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "F1",
          "purpose" : "Filter pair",
          "htmlid" : "d124e140776",
          "value" : 
          [ "real-valued vectors" ] },
        
        { "name" : "F2",
          "purpose" : "Filter pair",
          "htmlid" : "d124e140776",
          "value" : 
          [ "real-valued vectors" ] } ],
      "examples" : 
      [ 
        { "url" : "wfilters.html#mw_8a182d64-655f-4375-9b69-4f3a51a1e9c2",
          "open_command" : "openExample('wavelet\/ComputeFourFiltersExample')",
          "title" : "Compute Four Filters" } ],
      "seealso" : 
      [ 
        { "url" : "biorfilt.html",
          "name" : "biorfilt" },
        
        { "url" : "orthfilt.html",
          "name" : "orthfilt" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wavemngr.html",
          "name" : "wavemngr" } ] },
    { "href" : "ref\/wfusimg.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wfusimg",
          "fcntype" : "simple" } ],
      "refpurpose" : "Fusion of two images",
      "introduced" : "preR2006a",
      "description" : "The principle of image fusion using wavelets is to merge the wavelet decompositions of the two original images using fusion methods applied to approximations coefficients and details coefficients.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "xfus = wfusimg(x1,x2,wname,level,afusmeth,dfusmeth)",
            "[xfus,txfus,tx1,tx2] = wfusimg(x1,x2,wname,level,afusmeth,dfusmeth)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = wfusimg(___,'plot')" ] } ],
      "inputs" : 
      [ 
        { "name" : "x1,x2",
          "purpose" : "Images to merge",
          "htmlid" : "mw_99c3cc07-e5cc-4f8b-b474-3f1fe3f38be9",
          "value" : 
          [ "real-valued 2-D matrix",
            "real-valued 3-D array" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_382a6fdc-140a-4f88-8ca6-10ccee650cb4",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "level",
          "purpose" : "Wavelet decomposition level",
          "htmlid" : "mw_74008f6c-71a0-4014-bb87-3905003918a0",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "afusmeth,dfusmeth",
          "purpose" : "Fusion methods for approximations and details",
          "htmlid" : "mw_8c9120a1-db47-4df4-83d4-721cc0d4a594",
          "value" : 
          [ "'max'",
            "'min'",
            "'mean'",
            "'img1'",
            "'img2'",
            "'rand'",
            "structure array" ] } ],
      "outputs" : 
      [ 
        { "name" : "xfus",
          "purpose" : "Fused image",
          "htmlid" : "mw_5aed2db3-4397-4d38-9d23-1dbe4edb29ae",
          "value" : 
          [ "real-valued 2-D matrix",
            "real-valued 3-D array" ] },
        
        { "name" : "txfus,tx1,tx2",
          "purpose" : "Wavelet decomposition trees",
          "htmlid" : "mw_4eaa0df1-6265-4b4e-a22f-d14aeef1d41e",
          "value" : 
          [ "wdectree object" ] } ],
      "examples" : 
      [ 
        { "url" : "wfusimg.html#mw_72378123-42f6-4bfc-8346-8cdc5e91bc72",
          "open_command" : "openExample('wavelet\/FuseTwoImagesExample')",
          "title" : "Fuse Two Images" },
        
        { "url" : "wfusimg.html#mw_e9cdf42d-6661-471d-a90f-e7332b859d64",
          "open_command" : "openExample('wavelet\/RestoreImageFromTwoFuzzyVersionsExample')",
          "title" : "Restore Image From Two Fuzzy Versions" },
        
        { "url" : "wfusimg.html#mw_7d45de90-0c7a-4839-b765-aa998ce914c9",
          "open_command" : "openExample('wavelet\/FuseTwoImagesWithUserDefinedFusionMethodExample')",
          "title" : "Fuse Two Images With User-Defined Fusion Method" } ],
      "seealso" : 
      [ 
        { "url" : "wfusmat.html",
          "name" : "wfusmat" },
        
        { "url" : "wextend.html",
          "name" : "wextend" } ] },
    { "href" : "ref\/wfusmat.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wfusmat",
          "fcntype" : "simple" } ],
      "refpurpose" : "Fusion of two matrices or arrays",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the fused array C obtained from the arrays A and B using the fusion method specified by method.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "C = wfusmat(A,B,method)",
            "[C,D] = wfusmat(A,B,method)" ] } ],
      "inputs" : 
      [ 
        { "name" : "A,B",
          "purpose" : "Input data",
          "htmlid" : "mw_87db9d76-1657-4d6a-a3be-3cc5de799e8a",
          "value" : 
          [ "array" ] },
        
        { "name" : "method",
          "purpose" : "Fusion method",
          "htmlid" : "mw_6cc0acba-fff4-4964-9857-11a891e41221",
          "value" : 
          [ "'max'",
            "'min'",
            "'mean'",
            "'img1'",
            "'img2'",
            "'rand'",
            "structure array" ] } ],
      "outputs" : 
      [ 
        { "name" : "C",
          "purpose" : "Fused output",
          "htmlid" : "mw_f4be210f-7c43-4c25-9a07-ea0ee94e6ebd",
          "value" : 
          [ "array" ] },
        
        { "name" : "D",
          "purpose" : "Boolean matrix",
          "htmlid" : "mw_ba20f9bf-7f04-454a-87bf-fb889fac84ba",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "wfusmat.html#mw_239c1ab9-484e-4336-b52a-38d133f8dc2a",
          "open_command" : "openExample('wavelet\/MatrixFusionExample')",
          "title" : "Matrix Fusion" } ],
      "seealso" : 
      [ 
        { "url" : "wfusimg.html",
          "name" : "wfusimg" } ] },
    { "href" : "ref\/wkeep.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wkeep",
          "fcntype" : "simple" } ],
      "refpurpose" : "Keep part of vector or matrix",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function extracts the vector Y from the vector X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Y = wkeep(X,L,opt)",
            "Y = wkeep(X,L,first)",
            "Y = wkeep(X,S)",
            "Y = wkeep(X,S,[firstr,firstc])" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input",
          "htmlid" : "mw_cb2fac01-2fb6-46f8-a72e-cc1c78a04a17",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "L",
          "purpose" : "Length of vector to extract",
          "htmlid" : "mw_5a371066-431b-4a6a-a0e8-60416a246327",
          "value" : 
          [ "integer",
            "Inf" ] },
        
        { "name" : "opt",
          "purpose" : "Location of extraction",
          "htmlid" : "mw_fd656795-b74e-428d-bb61-dec108ca71ce",
          "value" : 
          [ "'c'",
            "'l'",
            "'r'" ] },
        
        { "name" : "first",
          "purpose" : "Starting index",
          "htmlid" : "mw_6339d89d-e114-47bc-bb63-58f771932763",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "S",
          "purpose" : "Dimensions of submatrix",
          "htmlid" : "mw_ebe08173-4080-4918-966c-d4499bb5a4c0",
          "value" : 
          [ "two-element vector" ] },
        
        { "name" : "firstr,firstc",
          "purpose" : "Starting row, column indices",
          "htmlid" : "mw_9c57b366-3086-47d7-9514-df08cba34c2d",
          "value" : 
          [ "two positive integers" ] } ],
      "examples" : 
      [ 
        { "url" : "wkeep.html#mw_f32885d3-467b-454a-9e3d-0c6445deba6a",
          "open_command" : "openExample('wavelet\/ExtractFromVectorAndMatrixExample')",
          "title" : "Extract from Vector and Matrix" } ],
      "seealso" : 
      [ 
        { "url" : "wextend.html",
          "name" : "wextend" } ] },
    { "href" : "ref\/wmaxlev.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wmaxlev",
          "fcntype" : "simple" } ],
      "refpurpose" : "Maximum wavelet decomposition level",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the maximum level L possible for a wavelet decomposition of a signal or image of size S using the wavelet specified by wname (see wfilters for more information).",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "L = wmaxlev(S,wname)" ] } ],
      "inputs" : 
      [ 
        { "name" : "S",
          "purpose" : "Size of signal or image",
          "htmlid" : "mw_74be54a8-1bcf-4e9a-8ead-0bde13eb0365",
          "value" : 
          [ "positive integer",
            "two-element vector of positive integers" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_09a5728e-0d2e-43db-992f-658ee49551b2",
          "value" : 
          [ "character vector",
            "string scalar" ] } ],
      "examples" : 
      [ 
        { "url" : "wmaxlev.html#mw_a5751fbe-4ca3-436d-9a03-5957855c457f",
          "open_command" : "openExample('wavelet\/MaximumLevelsOfDecompositionForASignalAndImageExample')",
          "title" : "Maximum Levels of Decomposition for a Signal and Image" } ],
      "seealso" : 
      [ 
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" },
        
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" } ] },
    { "href" : "ref\/wmpalg.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wmpalg",
          "fcntype" : "simple" } ],
      "refpurpose" : "(Not recommended) Matching pursuit",
      "deprecationstatus" : "announce",
      "introduced" : "R2012a",
      "description" : "This MATLAB function returns an adaptive greedy approximation, YFIT, of the input signal, Y, in the dictionary, MPDICT.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "YFIT = wmpalg(MPALG,Y,MPDICT)",
            "[YFIT,R] = wmpalg(___)",
            "[YFIT,R,COEFF] = wmpalg(___)",
            "[YFIT,R,COEFF,IOPT] = wmpalg(___)",
            "[YFIT,R,COEFF,IOPT,QUAL] = wmpalg(___)",
            "[YFIT,R,COEFF,IOPT,QUAL,X] = wmpalg(___)",
            "[YFIT,R,COEFF,IOPT,QUAL,X] = wmpalg(___,Name=Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "MPALG",
          "purpose" : "Matching pursuit algorithm",
          "htmlid" : "mw_b4f2f7f4-5c2f-4cbf-8436-f9783f6e62d7",
          "value" : 
          [ "'BMP'",
            "'OMP'",
            "'WMP'" ],
          "defaultvalue" : "'BMP'" },
        
        { "name" : "MPDICT",
          "purpose" : "Matching pursuit dictionary",
          "htmlid" : "mw_c3cc0b56-ee04-4f76-b54b-a17a4b976b42",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "Y",
          "purpose" : "Signal",
          "htmlid" : "mw_360c5a60-ec8c-4c1b-97e0-0238d9bac427",
          "value" : 
          [ "vector" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "itermax",
              "purpose" : "Maximum number of iterations",
              "htmlid" : "mw_52173259-42b9-47e7-bd9e-929fe17af7d5",
              "value" : 
              [ "25",
                "positive integer" ],
              "defaultvalue" : "25" },
            
            { "name" : "lstcpt",
              "purpose" : "Valid subdictionaries",
              "htmlid" : "mw_6e88d2f6-548d-46a1-b391-994461d3bf89",
              "value" : 
              [ "cell array" ] },
            
            { "name" : "maxerr",
              "purpose" : "Maximum relative error",
              "htmlid" : "mw_98837eec-688c-4bbd-86c6-e63b5949e17c",
              "value" : 
              [ "cell array" ] },
            
            { "name" : "wmpcfs",
              "purpose" : "Optimality factor",
              "htmlid" : "mw_9291e112-facb-4718-a82d-408c165f469a",
              "value" : 
              [ "0.6",
                "scalar" ],
              "defaultvalue" : "0.6" } ] } ],
      "outputs" : 
      [ 
        { "name" : "YFIT",
          "purpose" : "Adaptive greedy approximation",
          "htmlid" : "mw_833df2c9-1fd5-4b24-885b-1318030f9062",
          "value" : 
          [ "vector" ] },
        
        { "name" : "R",
          "purpose" : "Residual",
          "htmlid" : "mw_d8a33420-dae4-44dc-aafb-80dbc261ef99",
          "value" : 
          [ "vector" ] },
        
        { "name" : "COEFF",
          "purpose" : "Expansion coefficients",
          "htmlid" : "mw_2644b364-f108-4e33-a25a-27d082775f0b",
          "value" : 
          [ "vector" ] },
        
        { "name" : "IOPT",
          "purpose" : "Column indices",
          "htmlid" : "mw_6e11de61-d4ad-4d0e-aed5-49a9fa34a55d",
          "value" : 
          [ "vector" ] },
        
        { "name" : "QUAL",
          "purpose" : "Proportion of retained signal energy",
          "htmlid" : "mw_2b40d79c-a54d-4137-a4e6-d02a8b897911",
          "value" : 
          [ "vector" ] },
        
        { "name" : "X",
          "purpose" : "Normalized matching pursuit dictionary",
          "htmlid" : "mw_a0f3fc30-64a9-4056-83db-aa59012e2b6d",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "wmpalg.html#mw_b9397ef6-1094-4d90-a6dc-0345d54082e2",
          "open_command" : "openExample('wavelet\/AdaptiveApproximationusingOrthogonalMatchingPursuitExample')",
          "title" : "Adaptive Approximation using Orthogonal Matching Pursuit" },
        
        { "url" : "wmpalg.html#mw_aae45e61-2a89-4810-a93d-86e0582ae4ee",
          "open_command" : "openExample('wavelet\/ReturnResidualExpansionCoefficientsSelectedAtomsandApproExample')",
          "title" : "Return Residual, Expansion Coefficients, Selected Atoms, and Approximation Quality" },
        
        { "url" : "wmpalg.html#mw_60d1f9a6-3fe0-4b1b-8caf-d123f0134ddc",
          "open_command" : "openExample('wavelet\/SpecifytheMaximumNumberofIterationsExample')",
          "title" : "Specify the Maximum Number of Iterations" },
        
        { "url" : "wmpalg.html#mw_6f81e4f1-7baa-4b40-96d5-40babc42efd9",
          "open_command" : "openExample('wavelet\/ChangeOptimalityFactorForWeakOrthogonalMatchingPursuitExample')",
          "title" : "Change Optimality Factor for Weak Orthogonal Matching Pursuit" },
        
        { "url" : "wmpalg.html#mw_3f106879-44f3-4086-af43-a2006fb0f67b",
          "open_command" : "openExample('wavelet\/MatchingPursuitofElectricityConsumptionDataExample')",
          "title" : "Matching Pursuit of Electricity Consumption Data" } ],
      "seealso" : 
      [ 
        { "url" : "sensingdictionary.html",
          "name" : "sensingDictionary" },
        
        { "url" : "sensingdictionary.matchingpursuit.html",
          "name" : "matchingPursuit" },
        
        { "url" : "sensingdictionary.basispursuit.html",
          "name" : "basisPursuit" } ] },
    { "href" : "ref\/wmpdictionary.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wmpdictionary",
          "fcntype" : "simple" } ],
      "refpurpose" : "(To be removed) Dictionary for matching pursuit",
      "introduced" : "R2012a",
      "description" : "This MATLAB function returns the N-by-P dictionary, MPDICT, for the default subdictionaries {{'sym4',5},{'wpsym4',5},'dct','sin'}.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "MPDICT = wmpdictionary(N)",
            "[MPDICT,NBVECT] = wmpdictionary(N)",
            "[MPDICT,NBVECT]= wmpdictionary(N,Name,Value)",
            "[MPDICT,NBVECT,LST] = wmpdictionary(N,Name,Value)",
            "[MPDICT,NBVECT,LST,LONGS] = wmpdictionary(N,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "N",
          "purpose" : "Input signal length",
          "htmlid" : "mw_b1cc3460-91ea-4422-82f2-ec5024b7bb35",
          "value" : 
          [ "positive integer" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "addbeg",
              "purpose" : "Prepended subdictionary",
              "htmlid" : "mw_72e0c043-26f3-4449-855a-f0e758ece1b5",
              "value" : 
              [ "matrix" ] },
            
            { "name" : "addend",
              "purpose" : "Appended subdictionary",
              "htmlid" : "mw_e4b0ff78-6844-4f7e-ab15-f4f76179cd68",
              "value" : 
              [ "matrix" ] },
            
            { "name" : "lstcpt",
              "purpose" : "Valid subdictionaries",
              "htmlid" : "mw_a7af43a0-ae2c-4da7-9388-7e1e21622df8",
              "value" : 
              [ "cell array" ] } ] } ],
      "outputs" : 
      [ 
        { "name" : "MPDICT",
          "purpose" : "Matching pursuit dictionary",
          "htmlid" : "mw_6db199fa-95c5-4aa0-9a68-df65779e7b2c",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "NBVECT",
          "purpose" : "Number of vectors in subdictionaries",
          "htmlid" : "mw_3ec91ad4-ad41-4151-bb7a-009d7a3282cf",
          "value" : 
          [ "vector" ] },
        
        { "name" : "LST",
          "purpose" : "Dictionary description",
          "htmlid" : "mw_c5b38587-07b4-4e46-a8e3-c9dd97c052de",
          "value" : 
          [ "cell array" ] },
        
        { "name" : "LONGS",
          "purpose" : "Number of elements for each subdictionary",
          "htmlid" : "mw_3278b167-6fce-4313-b717-c0811992d7e7",
          "value" : 
          [ "cell array" ] } ],
      "seealso" : 
      [ 
        { "url" : "sensingdictionary.html",
          "name" : "sensingDictionary" },
        
        { "url" : "sensingdictionary.matchingpursuit.html",
          "name" : "matchingPursuit" },
        
        { "url" : "sensingdictionary.basispursuit.html",
          "name" : "basisPursuit" } ] },
    { "href" : "ref\/wmspca.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wmspca",
          "fcntype" : "simple" } ],
      "refpurpose" : "Multiscale principal component analysis",
      "introduced" : "R2006b",
      "description" : "This MATLAB function returns a simplified version xsim of the input matrix x obtained from the wavelet-based multiscale principal component analysis (PCA).",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[xsim,qual,npc_out,decsim,pca_params] = wmspca(x,level,wname,npc_in)",
            "[___] = wmspca(x,level,wname,'mode',extmode,npc_in)",
            "[___] = wmspca(dec,npc_in)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Multisignal",
          "htmlid" : "mw_14230e8c-45a2-408f-a733-3c3519542c06",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "level",
          "purpose" : "Level of decomposition",
          "htmlid" : "mw_81162414-7458-4a03-ad43-b959ab9d320d",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_e2dce423-4fe4-4dcf-8e8a-0dc8b2ffe4fe",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "npc_in",
          "purpose" : "Principal components parameter",
          "htmlid" : "mw_87e90fbc-32e0-4161-8781-91ab51b14136",
          "value" : 
          [ "vector",
            "\"kais\"",
            "\"heur\"",
            "\"nodet\"" ] },
        
        { "name" : "extmode",
          "purpose" : "Extension mode",
          "htmlid" : "mw_bd89f40a-9f65-4d83-b9c7-9d3e25b5e91c",
          "value" : 
          [ "'zpd'",
            "'sp0'",
            "'spd'" ] },
        
        { "name" : "dec",
          "purpose" : "Wavelet decomposition structure",
          "htmlid" : "mw_47db3d1f-5fcc-4def-94bd-5122a8a5c5a4",
          "value" : 
          [ "structure" ] } ],
      "outputs" : 
      [ 
        { "name" : "xsim",
          "purpose" : "Simplified multivariate multisignal",
          "htmlid" : "mw_559fc6c4-bbba-4ca5-87f2-3f5480b0f96d",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "qual",
          "purpose" : "Quality of column reconstructions",
          "htmlid" : "mw_66a5cd3b-46a0-4439-8b21-74be2d15499b",
          "value" : 
          [ "vector" ] },
        
        { "name" : "npc_out",
          "purpose" : "Number of retained principal components",
          "htmlid" : "mw_9f154604-e63b-42cc-b04d-7a99a357dfaf",
          "value" : 
          [ "vector" ] },
        
        { "name" : "decsim",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_46072948-5fe1-4f92-9478-29aa374fa6c4",
          "value" : 
          [ "structure" ] },
        
        { "name" : "pca_params",
          "purpose" : "PCA parameters",
          "htmlid" : "mw_d77d6181-547b-4d91-9f75-741e0185d1ee",
          "value" : 
          [ "structure array" ] } ],
      "examples" : 
      [ 
        { "url" : "wmspca.html#mw_a1edc5df-8b29-49bc-b852-b4b157005494",
          "open_command" : "openExample('wavelet\/WaveletPrincipalComponentAnalysisofNoisyMultivariateSignExample')",
          "title" : "Wavelet Principal Component Analysis of Noisy Multivariate Signal" } ],
      "seealso" : 
      [ 
        { "url" : "wmulden.html",
          "name" : "wmulden" } ] },
    { "href" : "ref\/wmulden.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wmulden",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet multivariate denoising",
      "introduced" : "R2006b",
      "description" : "This MATLAB function returns a denoised version x_den of the input matrix x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[x_den,npc,nestcov,dec_den,pca_params,den_params] = wmulden(x,level,wname,npc_app,npc_fin,tptr,sorh)",
            "[___] = wmulden(x,level,wname,\"mode\",extmode,npc_app,npc_fin,tptr,sorh)",
            "[___] = wmulden(dec,npc_app)",
            "[dec,pca_params] = wmulden(\"estimate\",dec,npc_app,npc_fin)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_16925d08-5abb-4df9-9360-6ce4f0803e78",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "level",
          "purpose" : "Level of wavelet decomposition",
          "htmlid" : "mw_63c8486d-c0f5-4485-bd05-013374a725c2",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_4f67bd47-7847-4dfa-8ba7-7e04ac4cf1d5",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "dec",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_45e6c53c-3907-4225-812a-d107decb7aea",
          "value" : 
          [ "structure" ] },
        
        { "name" : "extmode",
          "purpose" : "Extension mode",
          "htmlid" : "mw_650d467d-8d2f-4efe-adbb-b633728c03f3",
          "value" : 
          [ "\"zpd\"",
            "\"sp0\"",
            "\"spd\"" ] },
        
        { "name" : "npc_app",
          "purpose" : "Principal components selection method for approximations",
          "htmlid" : "mw_3a1692d7-d31c-45ef-84e9-7b590c128034",
          "value" : 
          [ "integer",
            "\"kais\"",
            "\"heur\"",
            "\"none\"" ] },
        
        { "name" : "npc_fin",
          "purpose" : "Final PCA selection method",
          "htmlid" : "mw_a00ea43f-cd17-456f-8c34-bd522b514191",
          "value" : 
          [ "integer",
            "\"kais\"",
            "\"heur\"",
            "\"none\"" ] },
        
        { "name" : "tptr",
          "purpose" : "Threshold selection rule",
          "htmlid" : "mw_c14a1f65-cf8b-4c64-831f-165d8c1c6825",
          "value" : 
          [ "\"sqtwolog\"",
            "\"rigsure\"",
            "\"heursure\"",
            "\"minimax\"",
            "\"penalhi\"",
            "\"penalme\"",
            "\"penallo\"" ],
          "defaultvalue" : "\"sqtwolog\"" },
        
        { "name" : "sorh",
          "purpose" : "Type of thresholding",
          "htmlid" : "mw_1d5415c2-1cf6-47f8-91f9-8af78fcbca4c",
          "value" : 
          [ "\"s\"",
            "\"h\"" ],
          "defaultvalue" : "\"s\"" } ],
      "outputs" : 
      [ 
        { "name" : "x_den",
          "purpose" : "Denoised data",
          "htmlid" : "mw_53f16b69-1aee-4c7a-b50d-b64c933aff70",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "npc",
          "purpose" : "Selected numbers of retained principal components",
          "htmlid" : "mw_8b473df2-714e-44c0-a74c-0f4e872083c9",
          "value" : 
          [ "vector" ] },
        
        { "name" : "nestcov",
          "purpose" : "Estimated noise covariance matrix",
          "htmlid" : "mw_9f79b500-a3ec-41d8-ae7b-f7bf986bbcf3",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "dec_den",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_4fcb62bf-747a-41db-bc68-1f97a3942e77",
          "value" : 
          [ "structure" ] },
        
        { "name" : "pca_params",
          "purpose" : "Principal components estimates",
          "htmlid" : "mw_a1e4ac0c-8645-4f94-a115-69027d2fc539",
          "value" : 
          [ "structure" ] },
        
        { "name" : "den_params",
          "purpose" : "Denoising parameters",
          "htmlid" : "mw_ec7ef85c-753f-4ba4-bf9c-8855b6f2a206",
          "value" : 
          [ "structure" ] } ],
      "examples" : 
      [ 
        { "url" : "wmulden.html#mw_6843cf94-90b3-4f20-8d99-2e5cb400cca6",
          "open_command" : "openExample('wavelet\/DenoiseMultivariateSignalExample')",
          "title" : "Denoise Multivariate Signal" } ],
      "seealso" : 
      [ 
        { "url" : "wmspca.html",
          "name" : "wmspca" },
        
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" } ] },
    { "href" : "ref\/wnoise.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wnoise",
          "fcntype" : "simple" } ],
      "refpurpose" : "Noisy wavelet test data",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns values x of the test signal fun evaluated at 2n linearly spaced points from 0 to 1.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "x = wnoise(fun,n)",
            "[x,xn] = wnoise(fun,n,sqrtsnr)",
            "[x,xn] = wnoise(___,init)" ] } ],
      "inputs" : 
      [ 
        { "name" : "fun",
          "purpose" : "Wavelet test function",
          "htmlid" : "mw_494a21df-fcb5-4cf6-bc8d-f5a4809e444e",
          "value" : 
          [ "positive integer",
            "character array" ] },
        
        { "name" : "n",
          "purpose" : "Exponent",
          "htmlid" : "mw_d9fce712-83b3-45f2-b251-eee249407af9",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "sqrtsnr",
          "purpose" : "Square root of SNR",
          "htmlid" : "mw_533a3c65-6848-4b3c-b975-8e80c72f68f5",
          "value" : 
          [ "positive real number" ] },
        
        { "name" : "init",
          "purpose" : "Seed",
          "htmlid" : "mw_900dbef1-6af3-4174-a0d7-cc6c386684c9",
          "value" : 
          [ "nonnegative integer" ] } ],
      "outputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Test signal",
          "htmlid" : "mw_3e76ea53-2761-48b9-802b-f0d384a7acf7",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "xn",
          "purpose" : "Noisy test signal",
          "htmlid" : "mw_a40be6b7-0fb1-4a51-9385-03c7db6bf086",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wnoise.html#mw_17d81bee-1139-4903-8985-912fd42166e2",
          "open_command" : "openExample('wavelet\/PlotWaveletTestSignalsExample')",
          "title" : "Plot Wavelet Test Signals" } ],
      "seealso" : 
      [ 
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wden.html",
          "name" : "wden" } ] },
    { "href" : "ref\/wnoisest.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wnoisest",
          "fcntype" : "simple" } ],
      "refpurpose" : "Estimate noise of 1-D wavelet coefficients",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns estimates of the detail coefficients' standard deviation for levels specified in s.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "stdc = wnoisest(c,l,s)",
            "stdc = wnoisest(c)" ] } ],
      "inputs" : 
      [ 
        { "name" : "c",
          "purpose" : "Input",
          "htmlid" : "mw_a3189ebf-05a7-4da4-9690-0a3d4054fbd3",
          "value" : 
          [ "vector",
            "matrix",
            "cell array" ] },
        
        { "name" : "l",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "mw_eea02127-dd51-4de7-8173-be79d85db695",
          "value" : 
          [ "vector" ] },
        
        { "name" : "s",
          "purpose" : "Detail coefficient levels",
          "htmlid" : "mw_fcbdef8b-029c-4d5e-9643-5fcc51acc63c",
          "value" : 
          [ "vector" ] } ],
      "outputs" : 
      [ 
        { "name" : "stdc",
          "purpose" : "Standard deviation estimates",
          "htmlid" : "mw_3a52d046-840c-420c-a123-9a4402b780f1",
          "value" : 
          [ "vector",
            "cell array" ] } ],
      "examples" : 
      [ 
        { "url" : "wnoisest.html#mw_ba5866cc-f042-4132-bcfd-11027ba74d10",
          "open_command" : "openExample('wavelet\/EstimateNoiseStandardDeviationinThePresenceofOutliersExample')",
          "title" : "Estimate Noise Standard Deviation in The Presence of Outliers" } ],
      "seealso" : 
      [ 
        { "url" : "thselect.html",
          "name" : "thselect" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" } ] },
    { "href" : "ref\/wpbmpen.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wpbmpen",
          "fcntype" : "simple" } ],
      "refpurpose" : "Penalized threshold for wavelet packet denoising",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns a global threshold THR for denoising.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "THR = wpbmpen(T,SIGMA,ALPHA)",
            "wpbmpen(T,SIGMA,ALPHA,ARG)" ] } ],
      "seealso" : 
      [ 
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wbmpen.html",
          "name" : "wbmpen" },
        
        { "url" : "wden.html",
          "name" : "wden" },
        
        { "url" : "wdencmp.html",
          "name" : "wdencmp" },
        
        { "url" : "wpdencmp.html",
          "name" : "wpdencmp" } ] },
    { "href" : "ref\/wpdec.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wpdec",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet packet decomposition 1-D",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns a wavelet packet tree object tobj corresponding to the wavelet packet decomposition of the vector x at level n, using Shannon entropy and the wavelet specified by wname (see wfilters for more information).",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "tobj = wpdec(x,n,wname)",
            "tobj = wpdec(x,n,wname,etype,p)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_0b920f44-c0cb-4530-8e37-a8fd2898798f",
          "value" : 
          [ "real-valued numeric vector" ] },
        
        { "name" : "n",
          "purpose" : "Decomposition level",
          "htmlid" : "mw_e080fcfe-d756-472e-8d86-902a04c1284e",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_aa3bc7fc-7758-401e-b083-58f0ed75848a",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "etype",
          "purpose" : "Entropy type",
          "htmlid" : "mw_bc156704-de8e-4faf-80d3-7662cdb07385",
          "value" : 
          [ "'shannon'",
            "'log energy'",
            "'threshold'",
            "'sure'",
            "'norm'",
            "'user'",
            "'FunName'" ] },
        
        { "name" : "p",
          "purpose" : "Threshold parameter",
          "htmlid" : "mw_2904fb7f-ea91-4a95-84c2-3b26ef46eae0",
          "value" : 
          [ "real number",
            "character vector",
            "string scalar" ] } ],
      "examples" : 
      [ 
        { "url" : "wpdec.html#mw_3bd6d0f7-155b-43b3-bf0c-ebf955a73050",
          "open_command" : "openExample('wavelet\/VisualizeWaveletPacketTreeExample')",
          "title" : "Visualize Wavelet Packet Tree" } ],
      "seealso" : 
      [ 
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wenergy.html",
          "name" : "wenergy" },
        
        { "url" : "wptree.wprec.html",
          "name" : "wprec" },
        
        { "url" : "dwpt.html",
          "name" : "dwpt" },
        
        { "url" : "idwpt.html",
          "name" : "idwpt" } ] },
    { "href" : "ref\/wpdec2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wpdec2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet packet decomposition 2-D",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns a wavelet packet tree T corresponding to the wavelet packet decomposition of the matrix X, at level N, with the specified wavelet wname using Shannon entropy.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = wpdec2(X,N,wname)",
            "T = wpdec2(X,N,wname,E,P)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "mw_4580b4ce-cd7c-4e67-8af4-d368b8035d0d",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "N",
          "purpose" : "Decomposition level",
          "htmlid" : "mw_48743799-8d1c-45f6-ab61-675d8a4d7b99",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_6dab8db9-1851-45e0-9e7a-cca3efa73203",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "E",
          "purpose" : "Entropy type",
          "htmlid" : "mw_0bab282b-fc4b-4dfd-b578-8001158deef6",
          "value" : 
          [ "'shannon'",
            "'log energy'",
            "'threshold'",
            "'sure'",
            "'norm'",
            "'user'",
            "'FunName'" ] },
        
        { "name" : "P",
          "purpose" : "Threshold parameter",
          "htmlid" : "mw_8856f1bc-bcf3-49c0-a87c-aa359463b54c",
          "value" : 
          [ "real number",
            "character vector",
            "string scalar" ] } ],
      "examples" : 
      [ 
        { "url" : "wpdec2.html#mw_5818c3bb-c3df-4b7f-aef7-5d832398a8a9",
          "open_command" : "openExample('wavelet\/Obtain2DWaveletPacketDecompositionExample')",
          "title" : "Obtain 2-D Wavelet Packet Decomposition" } ],
      "seealso" : 
      [ 
        { "url" : "wavedec2.html",
          "name" : "wavedec2" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" },
        
        { "url" : "wenergy.html",
          "name" : "wenergy" },
        
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wptree.wprec2.html",
          "name" : "wprec2" },
        
        { "url" : "dwpt.html",
          "name" : "dwpt" },
        
        { "url" : "idwpt.html",
          "name" : "idwpt" } ] },
    { "href" : "ref\/wpdencmp.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wpdencmp",
          "fcntype" : "simple" } ],
      "refpurpose" : "Denoising or compression using wavelet packets",
      "introduced" : "preR2006a",
      "description" : "wpdencmp performs a denoising or compression process of a signal or image using wavelet packets.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[xd,treed,perf0,perfl2] = wpdencmp(x,sorh,n,wname,crit,par,keepapp)",
            "[___] = wpdencmp(tree,sorh,crit,par,keepapp)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_a8147160-cda0-40a6-b823-33e5e88c0625",
          "value" : 
          [ "real-valued vector or matrix" ] },
        
        { "name" : "tree",
          "purpose" : "Wavelet packet decomposition",
          "htmlid" : "mw_01ed61aa-bbc2-4867-a410-baf784ab1825",
          "value" : 
          [ "wavelet packet decomposition" ] },
        
        { "name" : "sorh",
          "purpose" : "Type of thresholding",
          "htmlid" : "mw_96158b02-714c-4d3e-9a6a-c753b6ea9ac6",
          "value" : 
          [ "'s'",
            "'h'" ] },
        
        { "name" : "n",
          "purpose" : "Wavelet packet decomposition level",
          "htmlid" : "mw_fd717ad3-f005-4e54-8339-3a1a3995e1e1",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "wname",
          "purpose" : "Name of wavelet",
          "htmlid" : "mw_a33bc503-5441-486f-9171-decfe094792d",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "crit",
          "purpose" : "Entropy type",
          "htmlid" : "mw_eb6331a1-cb81-41db-b0ef-027d48d19dc3",
          "value" : 
          [ "'shannon'",
            "'log energy'",
            "'threshold'",
            "'sure'",
            "'norm'",
            "'user'" ] },
        
        { "name" : "par",
          "purpose" : "Threshold parameter",
          "htmlid" : "mw_563f6504-dda7-44c9-87c5-0e795b8fae3f",
          "value" : 
          [ "real number",
            "character vector",
            "string scalar" ] },
        
        { "name" : "keepapp",
          "purpose" : "Threshold approximation setting",
          "htmlid" : "mw_2dc6778b-796e-4c65-bcc7-2b0db495b093",
          "value" : 
          [ "0",
            "1" ] } ],
      "outputs" : 
      [ 
        { "name" : "xd",
          "purpose" : "Denoised or compressed data",
          "htmlid" : "mw_912711ac-11bd-4185-847c-9562dcaeb2af",
          "value" : 
          [ "real-valued vector or matrix" ] },
        
        { "name" : "treed",
          "purpose" : "Wavelet packet best tree decomposition",
          "htmlid" : "mw_d27b4460-c4ac-474f-8738-5135d7fb3fa0",
          "value" : 
          [ "wavelet packet tree" ] },
        
        { "name" : "perf0",
          "purpose" : "Compression score",
          "htmlid" : "mw_92372927-813f-4b56-81b9-e3a1fb2ec01b",
          "value" : 
          [ "real number" ] },
        
        { "name" : "perfl2",
          "purpose" : "L^{2} energy recovery",
          "htmlid" : "mw_76ef27f1-ec74-45d9-89aa-f835870b9577",
          "value" : 
          [ "real number" ] } ],
      "examples" : 
      [ 
        { "url" : "wpdencmp.html#mw_5cb061e9-a53d-4df0-b6fb-7f3b152c8670",
          "open_command" : "openExample('wavelet\/OneDDenoisingUsingWaveletPacketsExample')",
          "title" : "1-D Denoising Using Wavelet Packets" },
        
        { "url" : "wpdencmp.html#mw_f49e4368-5401-4acd-be10-436f23fe26cb",
          "open_command" : "openExample('wavelet\/TwoDDenoisingUsingWaveletPacketsExample')",
          "title" : "2-D Denoising Using Wavelet Packets" },
        
        { "url" : "wpdencmp.html#mw_c225f0e2-9964-4929-8a6d-7b291455cc3c",
          "open_command" : "openExample('wavelet\/OneDCompressionUsingWaveletPacketsExample')",
          "title" : "1-D Compression Using Wavelet Packets" } ],
      "seealso" : 
      [ 
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wptree.besttree.html",
          "name" : "besttree" },
        
        { "url" : "ddencmp.html",
          "name" : "ddencmp" },
        
        { "url" : "wdencmp.html",
          "name" : "wdencmp" },
        
        { "url" : "wenergy.html",
          "name" : "wenergy" },
        
        { "url" : "wpbmpen.html",
          "name" : "wpbmpen" },
        
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" },
        
        { "url" : "wthresh.html",
          "name" : "wthresh" },
        
        { "url" : "wden.html",
          "name" : "wden" },
        
        { "url" : "wentropy.html",
          "name" : "wentropy" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" } ] },
    { "href" : "ref\/wpfun.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wpfun",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet packet functions",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function computes the wavelet packets for a wavelet 'wname' (see wfilters for more information), on dyadic intervals of length 2-PREC.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[WPWS,X] = wpfun('wname',NUM,PREC)",
            "[WPWS,X] = wpfun('wname',NUM)",
            "[WPWS,X] = wpfun('wname',NUM,7)" ] } ],
      "seealso" : 
      [ 
        { "url" : "wavefun.html",
          "name" : "wavefun" },
        
        { "url" : "waveinfo.html",
          "name" : "waveinfo" } ] },
    { "href" : "ref\/wpspectrum.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wpspectrum",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet packet spectrum",
      "introduced" : "R2010b",
      "description" : "This MATLAB function returns a matrix of wavelet packet spectrum estimates, spec, for the binary wavelet packet tree object, wpt.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[spec,times,freq] = wpspectrum(wpt,fs)",
            "[___] = wpspectrum(wpt,fs,'plot')",
            "[___,tinfo] = wpspectrum(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wpt",
          "purpose" : "Binary wavelet packet tree",
          "htmlid" : "mw_d3313d9e-9393-43cb-bbc8-1cbec299e075",
          "value" : 
          [ "wptree object" ] },
        
        { "name" : "fs",
          "purpose" : "Sampling frequency",
          "htmlid" : "mw_55c59d6d-1ac9-4a37-86e0-86a6ffc7a96b",
          "value" : 
          [ "1",
            "positive scalar" ],
          "defaultvalue" : "1" } ],
      "outputs" : 
      [ 
        { "name" : "spec",
          "purpose" : "Wavelet packet spectrum estimates",
          "htmlid" : "mw_61263e24-eeca-4b23-a1d4-22143feb5a78",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "times",
          "purpose" : "Times",
          "htmlid" : "mw_d25f8895-a388-46df-9c3f-d1eb98f7e298",
          "value" : 
          [ "vector" ] },
        
        { "name" : "freq",
          "purpose" : "Frequencies",
          "htmlid" : "mw_0a0fa0e5-9b21-47d2-9b41-2e4218849a29",
          "value" : 
          [ "vector" ] },
        
        { "name" : "tinfo",
          "purpose" : "Terminal nodes",
          "htmlid" : "mw_aa591d47-42b5-402c-9da9-bf98dbd2bf70",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wpspectrum.html#mw_5580810e-0f6e-4d19-b824-74b4bbad1214",
          "open_command" : "openExample('wavelet\/WaveletPacketSpectrumForSinusoidsExample')",
          "title" : "Wavelet Packet Spectrum for Sinusoids" },
        
        { "url" : "wpspectrum.html#mw_15615f03-c739-43fc-8874-a523c9249331",
          "open_command" : "openExample('wavelet\/WaveletPacketSpectrumOfChirpExample')",
          "title" : "Wavelet Packet Spectrum of Chirp Signal" } ],
      "seealso" : 
      [ 
        { "url" : "otnodes.html",
          "name" : "otnodes" },
        
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "dwpt.html",
          "name" : "dwpt" },
        
        { "url" : "modwpt.html",
          "name" : "modwpt" } ] },
    { "href" : "ref\/wptree.bestlevt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "bestlevt",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.bestlevt",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Best level tree wavelet packet analysis",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function computes the modified wavelet packet tree T corresponding to the best level tree decomposition.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = bestlevt(T)",
            "[T,E] = bestlevt(T)" ] } ],
      "seealso" : 
      [ 
        { "url" : "wptree.besttree.html",
          "name" : "besttree" },
        
        { "url" : "wenergy.html",
          "name" : "wenergy" },
        
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" } ] },
    { "href" : "ref\/wptree.besttree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "besttree",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.besttree",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Best tree wavelet packet analysis",
      "introduced" : "preR2006a",
      "description" : "besttree is a one- or two-dimensional wavelet packet analysis function that computes the optimal subtree of an initial tree with respect to an entropy type criterion.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "B = besttree(T)",
            "[B,E] = besttree(T)",
            "[B,E,N] = besttree(T)" ] } ],
      "inputs" : 
      [ 
        { "name" : "T",
          "purpose" : "Wavelet packet tree",
          "htmlid" : "mw_8258375f-598c-4961-a3f4-664c90fa3e19",
          "value" : 
          [ "wptree object" ] } ],
      "outputs" : 
      [ 
        { "name" : "B",
          "purpose" : "Best tree",
          "htmlid" : "mw_aa574191-f136-451a-b128-cd91d7406ad0",
          "value" : 
          [ "wptree object" ] },
        
        { "name" : "E",
          "purpose" : "Optimal entropy",
          "htmlid" : "mw_5bd2c625-a035-4a2c-97b5-d4ea46bb668e",
          "value" : 
          [ "vector" ] },
        
        { "name" : "N",
          "purpose" : "Merged node indices",
          "htmlid" : "mw_12d9a3e1-3db1-4231-8754-09c22f843a46",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wptree.besttree.html#mw_11a293f0-692d-4c4d-a126-83a171103a46",
          "open_command" : "openExample('wavelet\/BestWaveletPacketTreeExample')",
          "title" : "Best Wavelet Packet Tree" } ],
      "seealso" : 
      [ 
        { "url" : "wptree.bestlevt.html",
          "name" : "bestlevt" },
        
        { "url" : "wenergy.html",
          "name" : "wenergy" },
        
        { "url" : "wptree.wpcoef.html",
          "name" : "wpcoef" },
        
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" },
        
        { "url" : "wptree.wprcoef.html",
          "name" : "wprcoef" } ] },
    { "href" : "ref\/wptree.entrupd.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "entrupd",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.entrupd",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Entropy update (wavelet packet)",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function or T = entrupd(T,ENT,PAR) returns for a given wavelet packet tree T, the updated tree using the entropy function ENT with the optional parameter PAR (see wenergy for more information).",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = entrupd(T,ENT)",
            "T = entrupd(T,ENT,PAR)" ] } ],
      "seealso" : 
      [ 
        { "url" : "wenergy.html",
          "name" : "wenergy" },
        
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" } ] },
    { "href" : "ref\/wptree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wptree",
          "fcntype" : "simple" } ],
      "refpurpose" : "WPTREE constructor",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns a complete wavelet packet tree T of order order corresponding to a wavelet packet decomposition of x at level depth, using Shannon entropy and the wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = wptree(order,depth,x,wname)",
            "T = wptree(order,depth,x,wname,enttype,entpar)",
            "T = wptree(order,depth,x,wname,enttype,entpar,userdata)" ] } ],
      "inputs" : 
      [ 
        { "name" : "order",
          "purpose" : "Order of the tree",
          "htmlid" : "mw_6ade6017-1d94-4db4-a3b4-bd970fe1901f",
          "value" : 
          [ "2",
            "4" ] },
        
        { "name" : "depth",
          "purpose" : "Level of wavelet packet decomposition",
          "htmlid" : "mw_e09520a9-27bb-4a42-b3d7-5c0671795a93",
          "value" : 
          [ "positive integer" ] },
        
        { "name" : "x",
          "purpose" : "Input data",
          "htmlid" : "mw_bdd79d0e-76bf-4929-90a5-823819f08a7e",
          "value" : 
          [ "vector",
            "matrix" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet name",
          "htmlid" : "mw_5bc55510-4a13-439d-a822-7ca44868ed3d",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "enttype",
          "purpose" : "Entropy type",
          "htmlid" : "mw_dfaf81e8-4fcc-4924-a518-4b43d7081658",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "entpar",
          "purpose" : "Optional parameter",
          "htmlid" : "mw_e10a61cb-45bf-499b-a2fe-647d3677eccd",
          "value" : 
          [ "real number",
            "character vector",
            "string scalar" ] },
        
        { "name" : "userdata",
          "purpose" : "User data",
          "htmlid" : "mw_59cbeb4d-d345-444b-a072-4815d02b19d5",
          "value" : 
          [ "array",
            "cell array",
            "structure array" ] } ],
      "outputs" : 
      [ 
        { "name" : "T",
          "purpose" : "Wavelet packet tree",
          "htmlid" : "mw_9c306805-05eb-4500-a5d8-18cc3a6751f0",
          "value" : 
          [ "WPTREE object" ] } ],
      "examples" : 
      [ 
        { "url" : "wptree.html#mw_286435f1-bba7-4290-a932-a2e870a3323e",
          "open_command" : "openExample('wavelet\/CreateWaveletPacketTreeExample')",
          "title" : "Create Wavelet Packet Tree" } ],
      "seealso" : 
      [ 
        { "url" : "dtree.html",
          "name" : "dtree" },
        
        { "url" : "ntree.html",
          "name" : "ntree" } ] },
    { "href" : "ref\/wptree.read.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "read",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.read",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Read values of WPTREE",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the value of the wavelet packet tree T property specified by propname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "value = read(T,propname,propparam)" ] } ],
      "inputs" : 
      [ 
        { "name" : "T",
          "purpose" : "Wavelet packet tree",
          "htmlid" : "mw_e162b275-e715-479a-acc9-22b2814cae00",
          "value" : 
          [ "WPTREE object" ] },
        
        { "name" : "propname",
          "purpose" : "Wavelet packet tree property name",
          "htmlid" : "mw_c55c93a3-600c-4ee3-b129-a64e51c86dfb",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "propparam",
          "purpose" : "Property parameter",
          "htmlid" : "mw_690f17f0-c8b3-4913-b8c1-1c415b05650d",
          "value" : 
          [ "integer",
            "vector of integers" ] } ],
      "examples" : 
      [ 
        { "url" : "wptree.read.html#mw_d614264b-cf89-4964-8e47-b790116c4288",
          "open_command" : "openExample('wavelet\/WaveletPacketTreePropertiesExample')",
          "title" : "Wavelet Packet Tree Properties" } ],
      "seealso" : 
      [ 
        { "url" : "disp.html",
          "name" : "disp" },
        
        { "url" : "get.html",
          "name" : "get" },
        
        { "url" : "set.html",
          "name" : "set" },
        
        { "url" : "wptree.html",
          "name" : "wptree" },
        
        { "url" : "write.html",
          "name" : "write" } ] },
    { "href" : "ref\/wptree.wp2wtree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wp2wtree",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.wp2wtree",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Extract wavelet tree from wavelet packet tree",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function computes the modified wavelet packet tree T corresponding to the wavelet decomposition tree.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = wp2wtree(T)" ] } ],
      "seealso" : 
      [ 
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" } ] },
    { "href" : "ref\/wptree.wpcoef.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wpcoef",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.wpcoef",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Wavelet packet coefficients",
      "introduced" : "preR2006a",
      "description" : "wpcoef is a one- or two-dimensional wavelet packet analysis function.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "x = wpcoef(wpt,n)",
            "x = wpcoef(wpt)" ] } ],
      "inputs" : 
      [ 
        { "name" : "wpt",
          "purpose" : "Wavelet packet tree",
          "htmlid" : "mw_d8bdffbc-cce3-4a44-9a18-49998ed62a45",
          "value" : 
          [ "wptree object" ] },
        
        { "name" : "n",
          "purpose" : "Node",
          "htmlid" : "mw_587fc952-d061-4465-ac7d-9a5b126d1cbf",
          "value" : 
          [ "0",
            "nonnegative integer",
            "1-by-2 vector" ],
          "defaultvalue" : "0" } ],
      "outputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Node coefficients",
          "htmlid" : "mw_56584f75-4fec-41da-ad62-102f4c592c3b",
          "value" : 
          [ "vector",
            "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "wptree.wpcoef.html#mw_d18af641-4c85-4a7d-8926-9e62911d8662",
          "open_command" : "openExample('wavelet\/ObtainWaveletPacketCoefficientsExample')",
          "title" : "Obtain Wavelet Packet Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" },
        
        { "url" : "wptree.wprcoef.html",
          "name" : "wprcoef" },
        
        { "url" : "plot.html",
          "name" : "plot" } ] },
    { "href" : "ref\/wptree.wpcutree.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wpcutree",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.wpcutree",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Cut wavelet packet tree",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function cuts the tree T at level L.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = wpcutree(T,L)",
            "[T,RN] = wpcutree(T,L)" ] } ],
      "seealso" : 
      [ 
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" } ] },
    { "href" : "ref\/wptree.wpjoin.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wpjoin",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.wpjoin",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Recompose wavelet packet",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the modified wavelet packet tree T corresponding to a recomposition of the node N.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = wpjoin(T,N)",
            "[T,X] = wpjoin(T,N)",
            "T = wpjoin(T)",
            "T = wpjoin(T,0)",
            "[T,X] = wpjoin(T)",
            "[T,X] = wpjoin(T,0)" ] } ],
      "seealso" : 
      [ 
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" },
        
        { "url" : "wptree.wpsplt.html",
          "name" : "wpsplt" } ] },
    { "href" : "ref\/wptree.wprcoef.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wprcoef",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.wprcoef",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Reconstruct wavelet packet coefficients",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function reconstructs coefficients of the node 0 of the wavelet packet tree T.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "X = wprcoef(T)",
            "X = wprcoef(T,N)" ] } ],
      "inputs" : 
      [ 
        { "name" : "T",
          "purpose" : "Wavelet packet tree",
          "htmlid" : "mw_bba58759-6690-464e-84d2-e3a9ba8be8f8",
          "value" : 
          [ "wptree object" ] },
        
        { "name" : "N",
          "purpose" : "Node in wavelet packet tree",
          "htmlid" : "mw_6e054751-cbc7-4c09-80a7-362a50726346",
          "value" : 
          [ "0",
            "nonnegative integer",
            "1-by-2 vector" ],
          "defaultvalue" : "0" } ],
      "outputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Reconstructed coefficients",
          "htmlid" : "mw_f30e53b9-f1fb-4ec3-97f6-09137dcaea31",
          "value" : 
          [ "row vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wptree.wprcoef.html#mw_d70247d6-0701-4e2a-b9ab-430270298039",
          "open_command" : "openExample('wavelet\/ReconstructWaveletPacketCoefficientsExample')",
          "title" : "Reconstruct Wavelet Packet Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" },
        
        { "url" : "wptree.wprec.html",
          "name" : "wprec" },
        
        { "url" : "wptree.wprec2.html",
          "name" : "wprec2" } ] },
    { "href" : "ref\/wptree.wprec.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wprec",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.wprec",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Wavelet packet reconstruction 1-D",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the reconstructed vector x corresponding to the wavelet packet tree object tobj.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "x = wprec(tobj)" ] } ],
      "inputs" : 
      [ 
        { "name" : "tobj",
          "purpose" : "Wavelet packet tree",
          "htmlid" : "mw_5d69dc96-4d75-4d93-a7ab-c72211d9a24a",
          "value" : 
          [ "wavelet packet tree object" ] } ],
      "examples" : 
      [ 
        { "url" : "wptree.wprec.html#mw_4114c441-2641-4a61-9475-d57c05ca4830",
          "open_command" : "openExample('wavelet\/ReconstructSignalFromWaveletTreeObjectExample')",
          "title" : "Reconstruct Signal from Wavelet Packet Tree Object" } ],
      "seealso" : 
      [ 
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" },
        
        { "url" : "wptree.wpjoin.html",
          "name" : "wpjoin" },
        
        { "url" : "wptree.wprec2.html",
          "name" : "wprec2" },
        
        { "url" : "wptree.wpsplt.html",
          "name" : "wpsplt" },
        
        { "url" : "dwpt.html",
          "name" : "dwpt" },
        
        { "url" : "idwpt.html",
          "name" : "idwpt" } ] },
    { "href" : "ref\/wptree.wprec2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wprec2",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.wprec2",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Wavelet packet reconstruction 2-D",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the reconstructed matrix X corresponding to a wavelet packet tree T.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "X = wprec2(T)" ] } ],
      "seealso" : 
      [ 
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" },
        
        { "url" : "wptree.wpjoin.html",
          "name" : "wpjoin" },
        
        { "url" : "wptree.wprec.html",
          "name" : "wprec" },
        
        { "url" : "wptree.wpsplt.html",
          "name" : "wpsplt" },
        
        { "url" : "dwpt.html",
          "name" : "dwpt" },
        
        { "url" : "idwpt.html",
          "name" : "idwpt" } ] },
    { "href" : "ref\/wptree.wpsplt.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wpsplt",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.wpsplt",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Split (decompose) wavelet packet",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the modified wavelet packet tree T corresponding to the decomposition of the node N.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = wpsplt(T,N)",
            "[T,cA,cD] = wpsplt(T,N)",
            "[T,cA,cH,cV,cD] = wpsplt(T,N)" ] } ],
      "seealso" : 
      [ 
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" },
        
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" },
        
        { "url" : "wptree.wpjoin.html",
          "name" : "wpjoin" } ] },
    { "href" : "ref\/wptree.wpthcoef.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wpthcoef",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.wpthcoef",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Wavelet packet coefficients thresholding",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns a new wavelet packet tree NT obtained from the wavelet packet tree T by coefficients thresholding.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "NT = wpthcoef(T,KEEPAPP,SORH,THR)" ] } ],
      "seealso" : 
      [ 
        { "url" : "wpdec.html",
          "name" : "wpdec" },
        
        { "url" : "wpdec2.html",
          "name" : "wpdec2" },
        
        { "url" : "wpdencmp.html",
          "name" : "wpdencmp" },
        
        { "url" : "wthresh.html",
          "name" : "wthresh" } ] },
    { "href" : "ref\/wptree.wpviewcf.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wpviewcf",
          "fcntype" : "instancemethod" },
        
        { "type" : "method",
          "name" : "wptree.wpviewcf",
          "fcntype" : "instancemethod" } ],
      "refpurpose" : "Plot wavelet packets colored coefficients",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function plots the colored coefficients for the terminal nodes of the wavelet packet tree T using the color mode cmode.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wpviewcf(T,cmode)",
            "wpviewcf(T,cmode,nbcol)" ] } ],
      "inputs" : 
      [ 
        { "name" : "T",
          "purpose" : "Wavelet packet tree",
          "htmlid" : "mw_79230503-dab7-4c42-b2f8-fc0799c1ddba",
          "value" : 
          [ "wptree object" ] },
        
        { "name" : "cmode",
          "purpose" : "Color mode",
          "htmlid" : "mw_a902c21c-dbb5-412a-b519-0e903d83c924",
          "value" : 
          [ "1",
            "2",
            "3",
            "4" ] },
        
        { "name" : "nbcol",
          "purpose" : "Number of colors",
          "htmlid" : "mw_78d4f97f-a954-42c5-b654-a40259eb2492",
          "value" : 
          [ "positive integer" ] } ],
      "examples" : 
      [ 
        { "url" : "wptree.wpviewcf.html#mw_6a2685d0-0317-4490-9a3b-29d40846e244",
          "open_command" : "openExample('wavelet\/ViewWaveletPacketCoefficientsExample')",
          "title" : "View Wavelet Packet Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "wpdec.html",
          "name" : "wpdec" } ] },
    { "href" : "ref\/wrcoef.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wrcoef",
          "fcntype" : "simple" } ],
      "refpurpose" : "Reconstruct single branch from 1-D wavelet coefficients",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function reconstructs the coefficients vector of type type based on the wavelet decomposition structure [c,l] of a 1-D signal (see wavedec for more information) using the wavelet specified by wname.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "x = wrcoef(type,c,l,wname)",
            "x = wrcoef(type,c,l,LoR,HiR)",
            "x = wrcoef(___,n)" ] } ],
      "inputs" : 
      [ 
        { "name" : "type",
          "purpose" : "Coefficients to reconstruct",
          "htmlid" : "mw_86ad382d-573b-4230-bdb0-3fd6afa330aa",
          "value" : 
          [ "'a'",
            "'d'" ] },
        
        { "name" : "c",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_ab67ab1f-f9ed-4245-bd16-b39e1e140c72",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "l",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "mw_f5e52ad4-7c39-4534-a4c7-aad5ffd76d52",
          "value" : 
          [ "vector of positive integers" ] },
        
        { "name" : "wname",
          "purpose" : "Analyzing wavelet",
          "htmlid" : "mw_891b4a5b-12d6-4696-914c-f041e2c86921",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_963c8f93-078a-4194-9578-e46fa3152303",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "n",
          "purpose" : "Coefficients level",
          "htmlid" : "mw_df107f84-7c58-4f0b-9b0e-f1e3a95c7ddc",
          "value" : 
          [ "length(l)-2",
            "nonnegative integer" ] } ],
      "examples" : 
      [ 
        { "url" : "wrcoef.html#mw_4aa78b11-e862-4368-a85a-28059549ef7c",
          "open_command" : "openExample('wavelet\/ReconstructWaveletCoefficientsExample')",
          "title" : "Reconstruct Wavelet Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "appcoef.html",
          "name" : "appcoef" },
        
        { "url" : "detcoef.html",
          "name" : "detcoef" },
        
        { "url" : "wavedec.html",
          "name" : "wavedec" } ] },
    { "href" : "ref\/wrcoef2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wrcoef2",
          "fcntype" : "simple" } ],
      "refpurpose" : "Reconstruct single branch from 2-D wavelet coefficients",
      "introduced" : "preR2006a",
      "description" : "wrcoef2 is a two-dimensional wavelet analysis function.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "x = wrcoef2(type,c,s,wname)",
            "x = wrcoef2(type,c,s,LoR,HiR)",
            "x = wrcoef2(___,n)" ] } ],
      "inputs" : 
      [ 
        { "name" : "type",
          "purpose" : "Coefficients to reconstruct",
          "htmlid" : "mw_e8ef2513-e0bd-4cb0-8627-0cd7725f54bc",
          "value" : 
          [ "\"a\"",
            "\"h\"",
            "\"v\"",
            "\"d\"" ] },
        
        { "name" : "c",
          "purpose" : "Wavelet decomposition vector",
          "htmlid" : "mw_177fae65-edf4-44c3-aecd-9b55acdb796c",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "s",
          "purpose" : "Bookkeeping matrix",
          "htmlid" : "mw_34affb98-fb55-4113-8dd1-8faf2f83de0a",
          "value" : 
          [ "integer-valued matrix" ] },
        
        { "name" : "wname",
          "purpose" : "Wavelet",
          "htmlid" : "mw_6d9d77b8-5a90-459f-9f09-0edd798f673a",
          "value" : 
          [ "character vector",
            "string scalar" ] },
        
        { "name" : "LoR,HiR",
          "purpose" : "Wavelet reconstruction filters",
          "htmlid" : "mw_6ad273b2-323b-4ce3-b1aa-b5a538e87ea6",
          "value" : 
          [ "even-length real-valued vectors" ] },
        
        { "name" : "n",
          "purpose" : "Coefficients level",
          "htmlid" : "mw_a9b2dc99-a704-411d-abae-b457af6da565",
          "value" : 
          [ "size(s,1)-2",
            "integer" ],
          "defaultvalue" : "size(s,1)-2" } ],
      "outputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Reconstructed coefficients",
          "htmlid" : "mw_9150039f-ca62-418b-8ca4-60dd701e1d07",
          "value" : 
          [ "matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "wrcoef2.html#mw_f840828d-fcc0-4556-a8a4-464f60a749c3",
          "open_command" : "openExample('wavelet\/Reconstruct2DWaveletCoefficientsExample')",
          "title" : "Reconstruct 2-D Wavelet Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "appcoef2.html",
          "name" : "appcoef2" },
        
        { "url" : "detcoef2.html",
          "name" : "detcoef2" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" } ] },
    { "href" : "ref\/wrev.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wrev",
          "fcntype" : "simple" } ],
      "refpurpose" : "Flip vector",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function reverses the vector x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "y = wrev(x)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input",
          "htmlid" : "mw_be5ae829-846d-4b1d-ae8e-7bf65dd35954",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wrev.html#mw_d5f14a03-5d0b-4d60-9c77-2f332412a3e1",
          "open_command" : "openExample('wavelet\/FlipVectorExample')",
          "title" : "Flip Vector" } ],
      "seealso" : 
      [ 
        { "url" : "..\/..\/matlab\/ref\/fliplr.html",
          "name" : "fliplr" },
        
        { "url" : "..\/..\/matlab\/ref\/flipud.html",
          "name" : "flipud" } ] },
    { "href" : "ref\/write.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "write",
          "fcntype" : "simple" } ],
      "refpurpose" : "Write values in WPTREE fields",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function writes coefficients for the terminal node NODE.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "T = write(T,'cfs',NODE,COEFS)",
            "T = write(T,'cfs',N1,CFS1,'cfs',N2,CFS2, ...)" ] } ],
      "seealso" : 
      [ 
        { "url" : "disp.html",
          "name" : "disp" },
        
        { "url" : "get.html",
          "name" : "get" },
        
        { "url" : "wptree.read.html",
          "name" : "read" },
        
        { "url" : "set.html",
          "name" : "set" } ] },
    { "href" : "ref\/wscalogram.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wscalogram",
          "fcntype" : "simple" } ],
      "refpurpose" : "(Not recommended) Scalogram for continuous wavelet transform",
      "deprecationstatus" : "announce",
      "introduced" : "R2008a",
      "description" : "This MATLAB function computes the scalogram SC which represents the percentage of energy for each coefficient.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "SC = wscalogram(TYPEPLOT,COEFS)",
            "SC = wscalogram(TYPEPLOT,COEFS,'PropName1',PropVal1,...)" ] } ],
      "seealso" : 
      [ 
        { "url" : "cwt.html",
          "name" : "cwt" } ] },
    { "href" : "ref\/wsst.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wsst",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet synchrosqueezed transform",
      "introduced" : "R2016a",
      "description" : "This MATLAB function returns the wavelet synchrosqueezed transform, sst, which you use to examine data in the time-frequency plane.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "sst = wsst(x)",
            "[sst,f] = wsst(x)",
            "[___] = wsst(x,fs)",
            "[___] = wsst(x,ts)",
            "[___] = wsst(___,wav)",
            "wsst(___)",
            "[___] = wsst(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "bu6weod-x",
          "value" : 
          [ "row or column vector of real values" ] },
        
        { "name" : "fs",
          "purpose" : "Sampling frequency",
          "htmlid" : "bu6weod-fs",
          "value" : 
          [ "positive scalar" ] },
        
        { "name" : "ts",
          "purpose" : "Sampling interval",
          "htmlid" : "bu6weod-ts",
          "value" : 
          [ "duration with positive scalar input" ] },
        
        { "name" : "wav",
          "purpose" : "Analytic wavelet",
          "htmlid" : "bu6weod-wav",
          "value" : 
          [ "'amor'",
            "'bump'" ],
          "defaultvalue" : "'amor'" },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "VoicesPerOctave",
              "purpose" : "Number of voices per octave",
              "htmlid" : "bu6weod-VoicesPerOctave",
              "value" : 
              [ "32",
                "even integer from 10 to 48" ],
              "defaultvalue" : "32" },
            
            { "name" : "ExtendSignal",
              "purpose" : "Extend input signal symmetrically",
              "htmlid" : "bu6weod-ExtendSignal",
              "value" : 
              [ "false",
                "true" ],
              "defaultvalue" : "false" } ] } ],
      "outputs" : 
      [ 
        { "name" : "sst",
          "purpose" : "Synchrosqueezed transform",
          "htmlid" : "bu6weod-sst",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "f",
          "purpose" : "Frequencies",
          "htmlid" : "bu6weod-f",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wsst.html#bu7fbp7-2",
          "open_command" : "openExample('wavelet\/WaveletSynchrosqueezedTransformOfSpeechSignalExample')",
          "title" : "Synchrosqueezed Transform of Speech Signal" },
        
        { "url" : "wsst.html#bu71gr8-1",
          "open_command" : "openExample('wavelet\/SynchrosqueezedTxAndReconstructionOfSpeechExample')",
          "title" : "Synchrosqueezed Transform and Reconstruction of Speech Signal" },
        
        { "url" : "wsst.html#bu7fbp7-3",
          "open_command" : "openExample('wavelet\/WaveletSynchrosqueezedTransformOfQuadraticChirpExample')",
          "title" : "Synchrosqueezed Transform of Quadratic Chirp" },
        
        { "url" : "wsst.html#bu7fbp7-5",
          "open_command" : "openExample('wavelet\/WaveletSynchronizedTransformOfSunspotDataExample')",
          "title" : "Synchrosqueezed Transform of Sunspot Data" },
        
        { "url" : "wsst.html#bu7fbsb-1",
          "open_command" : "openExample('wavelet\/WaveletSynchronizedTxOfSunspotDataBumpWaveletExample')",
          "title" : "Synchrosqueezed Transform of Sunspot Data Using Bump Wavelet" } ],
      "seealso" : 
      [ 
        { "url" : "iwsst.html",
          "name" : "iwsst" },
        
        { "url" : "wsstridge.html",
          "name" : "wsstridge" },
        
        { "url" : "..\/..\/matlab\/ref\/duration.years.html",
          "name" : "years" },
        
        { "url" : "..\/..\/matlab\/ref\/duration.days.html",
          "name" : "days" },
        
        { "url" : "..\/..\/matlab\/ref\/duration.hours.html",
          "name" : "hours" },
        
        { "url" : "..\/..\/matlab\/ref\/duration.minutes.html",
          "name" : "minutes" },
        
        { "url" : "..\/..\/matlab\/ref\/duration.seconds.html",
          "name" : "seconds" },
        
        { "url" : "..\/..\/matlab\/ref\/duration.html",
          "name" : "duration" } ] },
    { "href" : "ref\/wsstridge.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wsstridge",
          "fcntype" : "simple" } ],
      "refpurpose" : "Time-frequency ridges from wavelet synchrosqueezing",
      "introduced" : "R2016a",
      "description" : "This MATLAB function extracts the maximum energy time-frequency ridge in cycles per sample from the wavelet synchrosqueezed transform, sst.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "fridge = wsstridge(sst)",
            "[fridge,iridge] = wsstridge(sst)",
            "[___] = wsstridge(sst,penalty)",
            "[___] = wsstridge(___,f)",
            "[___]= wsstridge(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "sst",
          "purpose" : "Synchrosqueezed transform",
          "htmlid" : "bu6we25-sst",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "penalty",
          "purpose" : "Frequency bins scaling penalty",
          "htmlid" : "bu6we25-penalty",
          "value" : 
          [ "0",
            "nonnegative scalar" ],
          "defaultvalue" : "0" },
        
        { "name" : "f",
          "purpose" : "Synchrosqueezed transform frequencies",
          "htmlid" : "bu6we25-f",
          "value" : 
          [ "vector" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "NumRidges",
              "purpose" : "Number of highest energy time-frequency ridges",
              "htmlid" : "bu6we25-NumRidges",
              "value" : 
              [ "1",
                "positive integer" ],
              "defaultvalue" : "1" },
            
            { "name" : "NumFrequencyBins",
              "purpose" : "Number of frequency bins to remove",
              "htmlid" : "bu6we25-NumFrequencyBins",
              "value" : 
              [ "4",
                "positive integer" ],
              "defaultvalue" : "4" } ] } ],
      "outputs" : 
      [ 
        { "name" : "fridge",
          "purpose" : "Time-frequency ridge frequencies",
          "htmlid" : "bu6we25-fridge",
          "value" : 
          [ "vector or matrix" ] },
        
        { "name" : "iridge",
          "purpose" : "Time-frequency ridge indices",
          "htmlid" : "bu6we25-iridge",
          "value" : 
          [ "vector or matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "wsstridge.html#bu64s33-2",
          "open_command" : "openExample('wavelet\/WaveletTimeFreqRidgeExtractionDefaultExample')",
          "title" : "Extract Time-Frequency Ridge from Chirp Signal" },
        
        { "url" : "wsstridge.html#bu7fbim-2_1",
          "open_command" : "openExample('wavelet\/TimeFreqRidgeExtractionMulticomponentSignalExample')",
          "title" : "Extract Time-Frequency Ridge from Multicomponent Signal" } ],
      "seealso" : 
      [ 
        { "url" : "wsst.html",
          "name" : "wsst" },
        
        { "url" : "iwsst.html",
          "name" : "iwsst" } ] },
    { "href" : "ref\/wtbo.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wtbo",
          "fcntype" : "simple" } ],
      "refpurpose" : "WTBO constructor",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns a WTBO object.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "OBJ = wtbo",
            "OBJ = wtbo(USERDATA)" ] } ] },
    { "href" : "ref\/wtbxmngr.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wtbxmngr",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet Toolbox manager",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function sets a toolbox option.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "wtbxmngr(OPTION)",
            "V = wtbxmngr('version')" ] } ] },
    { "href" : "ref\/wthcoef.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wthcoef",
          "fcntype" : "simple" } ],
      "refpurpose" : "1-D wavelet coefficient thresholding",
      "introduced" : "preR2006a",
      "description" : "wthcoef thresholds wavelet coefficients for the denoising or compression of a 1-D signal.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "nc = wthcoef(\"a\",c,l)",
            "nc = wthcoef(\"d\",c,l,n)",
            "nc = wthcoef(\"d\",c,l,n,p)",
            "nc = wthcoef(\"t\",c,l,n,t,sorh)" ] } ],
      "inputs" : 
      [ 
        { "name" : "c",
          "purpose" : "Wavelet decomposition",
          "htmlid" : "mw_25307c98-d79a-4634-a1ba-672cab181af3",
          "value" : 
          [ "vector" ] },
        
        { "name" : "l",
          "purpose" : "Bookkeeping vector",
          "htmlid" : "mw_16cf1e18-b8bc-4ed8-aa85-64b42034445e",
          "value" : 
          [ "vector" ] },
        
        { "name" : "n",
          "purpose" : "Detail levels",
          "htmlid" : "mw_b067152c-8868-4892-9926-2a16c1ad16af",
          "value" : 
          [ "vector" ] },
        
        { "name" : "p",
          "purpose" : "Percentages",
          "htmlid" : "mw_0d20da12-921a-46d8-a35f-dbf8bcaaef40",
          "value" : 
          [ "vector" ] },
        
        { "name" : "t",
          "purpose" : "Thresholds",
          "htmlid" : "mw_74a0feea-2bd9-4dcc-b56d-0932af6f1f13",
          "value" : 
          [ "vector" ] },
        
        { "name" : "sorh",
          "purpose" : "Type of thresholding",
          "htmlid" : "mw_07ebdf42-083d-4b5b-97a0-54fda41dd0b1",
          "value" : 
          [ "\"s\"",
            "\"h\"" ] } ],
      "outputs" : 
      [ 
        { "name" : "nc",
          "purpose" : "Modified wavelet decomposition",
          "htmlid" : "mw_b0ca7374-6ae0-46f9-a47c-4fed706d16c0",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wthcoef.html#mw_fc973292-c91d-4637-af77-47b06e3ff8a1",
          "open_command" : "openExample('wavelet\/ModifyApproximationCoefficientsExample')",
          "title" : "Modify Approximation Coefficients" },
        
        { "url" : "wthcoef.html#mw_e8fbefb9-4bee-475d-8bfc-61898d98379f",
          "open_command" : "openExample('wavelet\/ThresholdWaveletCoefficientsExample')",
          "title" : "Threshold Wavelet Coefficients" } ],
      "seealso" : 
      [ 
        { "url" : "wavedec.html",
          "name" : "wavedec" },
        
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wthresh.html",
          "name" : "wthresh" } ] },
    { "href" : "ref\/wthcoef2.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wthcoef2",
          "fcntype" : "simple" } ],
      "refpurpose" : "2-D wavelet coefficient thresholding",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the horizontal, vertical, or diagonal coefficients obtained from the wavelet decomposition structure [C,S] by soft or hard thresholding defined in vectors N and T.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "NC = wthcoef2('type',C,S,N,T,SORH)",
            "NC = wthcoef2('type',C,S,N)",
            "NC = wthcoef2('a',C,S)",
            "NC = wthcoef2('t',C,S,N,T,SORH)" ] } ],
      "inputs" : 
      [ 
        { "name" : "'type'",
          "purpose" : "Type of coefficients",
          "htmlid" : "mw_d7085963-e765-49f9-a1e8-50e7e5148506",
          "value" : 
          [ "'h'",
            "'v'",
            "'d'" ] },
        
        { "name" : "C",
          "purpose" : "Wavelet decomposition vector",
          "htmlid" : "mw_6d3122d8-d112-4751-8ff8-3182df7982df",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "S",
          "purpose" : "Bookkeeping matrix",
          "htmlid" : "mw_44f6158e-d9ea-4257-8f4f-84fa3050a46a",
          "value" : 
          [ "integer-valued matrix" ] },
        
        { "name" : "N",
          "purpose" : "Threshold vector",
          "htmlid" : "mw_87e89516-d2fd-43f8-9afb-b7d858daa8d8",
          "value" : 
          [ "1 ≤ N(i) ≤ size(S,1)-2" ] },
        
        { "name" : "T",
          "purpose" : "Threshold vector",
          "htmlid" : "mw_dc592532-de1b-431f-8d49-3e663aeb88db",
          "value" : 
          [ "nonnegative vectors" ] },
        
        { "name" : "SORH",
          "purpose" : "Soft or hard threshold",
          "htmlid" : "mw_710d1bf3-fec2-49cf-892a-40475945d338",
          "value" : 
          [ "'s'",
            "'h'" ] } ],
      "outputs" : 
      [ 
        { "name" : "NC",
          "purpose" : "Wavelet coefficient threshold",
          "htmlid" : "mw_2ca5f649-1582-4871-9979-2773d73c80de",
          "value" : 
          [ "real-valued vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wthcoef2.html#mw_29f67f4c-5b90-4bb5-bc78-072ae63292ea",
          "open_command" : "openExample('wavelet\/WaveletCoefficientThresholdingExample')",
          "title" : "Calculate Coefficients Obtained From Wavelet Decomposition Structure" } ],
      "seealso" : 
      [ 
        { "url" : "wthcoef.html",
          "name" : "wthcoef" },
        
        { "url" : "wavedec2.html",
          "name" : "wavedec2" },
        
        { "url" : "wthresh.html",
          "name" : "wthresh" } ] },
    { "href" : "ref\/wthresh.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wthresh",
          "fcntype" : "simple" } ],
      "refpurpose" : "Soft or hard thresholding",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function returns the soft or hard thresholding, indicated by sorh, of the vector or matrix X.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "Y = wthresh(X,sorh,T)" ] } ],
      "inputs" : 
      [ 
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "mw_e45aa115-2663-4771-a16a-e564c663588f",
          "value" : 
          [ "real-valued vector or matrix" ] },
        
        { "name" : "sorh",
          "purpose" : "Type of thresholding",
          "htmlid" : "mw_0056930c-9e06-4abe-9be5-42c998069e37",
          "value" : 
          [ "'s'",
            "'h'" ] },
        
        { "name" : "T",
          "purpose" : "Threshold value",
          "htmlid" : "mw_060358aa-0c1a-407c-9016-a303933952f8",
          "value" : 
          [ "positive real number" ] } ],
      "outputs" : 
      [ 
        { "name" : "Y",
          "purpose" : "Thresholded data",
          "htmlid" : "mw_b944908c-7613-472f-a75d-883a07402f2b",
          "value" : 
          [ "real-valued vector or matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "wthresh.html#mw_46d0ef59-ed2e-4a29-98b0-f046611a4868",
          "open_command" : "openExample('wavelet\/HardAndSoftThresholdingExample')",
          "title" : "Hard and Soft Thresholding" } ],
      "seealso" : 
      [ 
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wden.html",
          "name" : "wden" },
        
        { "url" : "wdencmp.html",
          "name" : "wdencmp" },
        
        { "url" : "wpdencmp.html",
          "name" : "wpdencmp" },
        
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" } ] },
    { "href" : "ref\/wthrmngr.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wthrmngr",
          "fcntype" : "simple" } ],
      "refpurpose" : "Threshold settings manager",
      "introduced" : "preR2006a",
      "description" : "wthrmngr returns a global threshold or level-dependent thresholds for wavelet-based denoising and compression.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "thr = wthrmngr(opt,method,C,L)",
            "thr = wthrmngr(opt,method,C,L,alpha)",
            "thr = wthrmngr(opt,method,C,L,scale)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "thr = wthrmngr(opt,method,swtdec,alpha)",
            "thr = wthrmngr(opt,method,swtdec,scale)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "thr = wthrmngr(opt,method,wpt)",
            "thr = wthrmngr(opt,'rem_n0',X)" ] } ],
      "inputs" : 
      [ 
        { "name" : "opt",
          "purpose" : "Type and dimension of compression or denoising",
          "htmlid" : "d124e156010",
          "value" : 
          [ "'dw1dcompGBL'",
            "'dw1dcompLVL'",
            "'dw1ddenoLVL'",
            "'sw1ddenoLVL'",
            "'dw2dcompGBL'",
            "'dw2dcompLVL'" ] },
        
        { "name" : "method",
          "purpose" : "Thresholding method",
          "htmlid" : "d124e156697",
          "value" : 
          [ "'scarcehi'",
            "'scarceme'",
            "'scarcelo'",
            "'sqtwolog'",
            "'sqtwologuwn'",
            "'sqtwologswn'" ] },
        
        { "name" : "X",
          "purpose" : "Input data",
          "htmlid" : "d124e156872",
          "value" : 
          [ "real-valued vector",
            "real-valued matrix" ] },
        
        { "name" : "C",
          "purpose" : "Wavelet expansion coefficients",
          "htmlid" : "d124e156896",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "L",
          "purpose" : "Size of wavelet expansion coefficients",
          "htmlid" : "d124e156932",
          "value" : 
          [ "vector of positive integers",
            "matrix of positive integers" ] },
        
        { "name" : "alpha",
          "purpose" : "Sparsity parameter",
          "htmlid" : "d124e156973",
          "value" : 
          [ "positive scalar" ] },
        
        { "name" : "scale",
          "purpose" : "Multiplicative threshold rescaling",
          "htmlid" : "d124e157005",
          "value" : 
          [ "'one'",
            "'sln'",
            "'mln'" ] },
        
        { "name" : "swtdec",
          "purpose" : "Stationary wavelet decomposition structure",
          "htmlid" : "d124e157047",
          "value" : 
          [ "real-valued matrix" ] },
        
        { "name" : "wpt",
          "purpose" : "Wavelet packet decomposition structure",
          "htmlid" : "d124e157083",
          "value" : 
          [ "wavelet packet object structure" ] } ],
      "outputs" : 
      [ 
        { "name" : "thr",
          "purpose" : "Threshold",
          "htmlid" : "d124e157118",
          "value" : 
          [ "real-valued scalar",
            "real-valued vector",
            "real-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "wthrmngr.html#mw_445608b4-d0bf-4e30-8c29-f64206f2fd02",
          "open_command" : "openExample('wavelet\/GlobalThresholdDiscreteWaveletDecompositionExample')",
          "title" : "Global Threshold — Discrete Wavelet Decomposition" },
        
        { "url" : "wthrmngr.html#mw_79c97b5c-63f9-42b3-bf60-29bdc725378c",
          "open_command" : "openExample('wavelet\/ImageCompressionBirgMassartThresholdsExample')",
          "title" : "Image Compression — Birgé-Massart Thresholds" },
        
        { "url" : "wthrmngr.html#mw_8013c788-f410-4ebe-ab1c-3b4e8c76af33",
          "open_command" : "openExample('wavelet\/LevelDependentThresholdStationaryWaveletTransformExample')",
          "title" : "Level-Dependent Threshold — Stationary Wavelet Transform" },
        
        { "url" : "wthrmngr.html#mw_8108ecbf-2cd4-426a-b3de-c7b1e1639511",
          "open_command" : "openExample('wavelet\/GlobalThresholdWaveletPacketDecompositionExample')",
          "title" : "Global Threshold — Wavelet Packet Decomposition" },
        
        { "url" : "wthrmngr.html#mw_87804362-5302-47eb-b15d-153e60a68832",
          "open_command" : "openExample('wavelet\/LevelIndependentThresholdStationaryWaveletTransformExample')",
          "title" : "Level-Independent Threshold — Stationary Wavelet Transform" } ],
      "seealso" : 
      [ 
        { "url" : "waveletsignaldenoiser-app.html",
          "name" : "Wavelet Signal Denoiser" },
        
        { "url" : "wdenoise.html",
          "name" : "wdenoise" },
        
        { "url" : "wbmpen.html",
          "name" : "wbmpen" },
        
        { "url" : "wdcbm2.html",
          "name" : "wdcbm2" },
        
        { "url" : "wdcbm.html",
          "name" : "wdcbm" },
        
        { "url" : "wpbmpen.html",
          "name" : "wpbmpen" } ] },
    { "href" : "ref\/wtmm.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wtmm",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wavelet transform modulus maxima",
      "introduced" : "R2016b",
      "description" : "This MATLAB function returns an estimate of the global Holder exponent, hexp, for the real-valued, 1-D input signal, x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "hexp = wtmm(x)",
            "[hexp,tauq] = wtmm(x)",
            "[___] = wtmm(x,'MinRegressionScale',scale)",
            "[hexp,tauq,structfunc] = wtmm(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[localhexp,wt,wavscales] = wtmm(x,'ScalingExponent','local')" ] },
        
        { "title" : "",
          "syntax" : 
          [ "wtmm(___,'ScalingExponent','local')" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[___] = wtmm(___,Name,Value)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "bveevfh-x",
          "value" : 
          [ "real-valued vector" ] },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "MinRegressionScale",
              "purpose" : "Minimum scale for regression",
              "htmlid" : "bveevfh-MinRegressionScale",
              "value" : 
              [ "4",
                "scalar greater than or equal to 4" ],
              "defaultvalue" : "4" },
            
            { "name" : "VoicesPerOctave",
              "purpose" : "Number of voices per octave",
              "htmlid" : "bveevfh-VoicesPerOctave",
              "value" : 
              [ "10",
                "even integer from 8 to 32" ],
              "defaultvalue" : "10" },
            
            { "name" : "NumOctaves",
              "purpose" : "Number of octaves",
              "htmlid" : "bveevfh-NumOctaves",
              "value" : 
              [ "minimum of 7 and floor(log2(numel(x)\/(3*sqrt(1.1666))))",
                "integer greater than or equal to 4" ],
              "defaultvalue" : "minimum of 7 and floor(log2(numel(x)\/(3*sqrt(1.1666))))" },
            
            { "name" : "ScalingExponent",
              "purpose" : "Type of scaling exponents",
              "htmlid" : "bveevfh-ScalingExponent",
              "value" : 
              [ "'global'",
                "'local'" ],
              "defaultvalue" : "'global'" } ] } ],
      "outputs" : 
      [ 
        { "name" : "hexp",
          "purpose" : "Global Holder exponent",
          "htmlid" : "bveevfh-hexp",
          "value" : 
          [ "real scalar" ] },
        
        { "name" : "tauq",
          "purpose" : "Scaling exponents",
          "htmlid" : "bveevfh-tauq",
          "value" : 
          [ "column vector" ] },
        
        { "name" : "structfunc",
          "purpose" : "Multiresolution structure functions",
          "htmlid" : "bveevfh-structfunc",
          "value" : 
          [ "struct" ] },
        
        { "name" : "localhexp",
          "purpose" : "Local Holder exponent estimates",
          "htmlid" : "bveevfh-localhexp",
          "value" : 
          [ "array of real values" ] },
        
        { "name" : "wt",
          "purpose" : "Continuous wavelet transform",
          "htmlid" : "bveevfh-wt",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "wavscales",
          "purpose" : "Wavelet scales",
          "htmlid" : "bveevfh-wavscales",
          "value" : 
          [ "column vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wtmm.html#bvet1c6-1",
          "open_command" : "openExample('wavelet\/GlobalHolderExponentForBrownianMotionExample')",
          "title" : "Global Holder Exponent for Brownian Motion" },
        
        { "url" : "wtmm.html#bve32qe-1",
          "open_command" : "openExample('wavelet\/LinearityOfWTMMCoeffsForMonofractalExample')",
          "title" : "Linearity of Scaling Exponents for Monofractal Signal" },
        
        { "url" : "wtmm.html#bve32se-1",
          "open_command" : "openExample('wavelet\/WTMMStructureFunctionExample')",
          "title" : "Structure Function of Wavelet Transform Modulus Maxima" },
        
        { "url" : "wtmm.html#bveevqv-2",
          "open_command" : "openExample('wavelet\/LocalHolderExponentsForCuspSignalAndDeltaFunctionsExample')",
          "title" : "Local Holder Exponents for Cusp Signal and Delta Functions" } ],
      "seealso" : 
      [ 
        { "url" : "dwtleader.html",
          "name" : "dwtleader" },
        
        { "url" : "wfbm.html",
          "name" : "wfbm" } ] },
    { "href" : "ref\/wvarchg.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wvarchg",
          "fcntype" : "simple" } ],
      "refpurpose" : "Find variance change points",
      "introduced" : "preR2006a",
      "description" : "This MATLAB function computes estimated variation change points for the signal Y for six change points, where the minimum delay between two change points is 10.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "[chgpts,kopt,est] = wvarchg(Y)",
            "[___] = wvarchg(Y,K)",
            "[___] = wvarchg(Y,K,D)" ] } ],
      "inputs" : 
      [ 
        { "name" : "Y",
          "purpose" : "Input signal",
          "htmlid" : "mw_2dc976f4-86b5-4e18-886e-740206e1014b",
          "value" : 
          [ "real-valued vector" ] },
        
        { "name" : "K",
          "purpose" : "Number of change points",
          "htmlid" : "mw_d87883b0-3334-41eb-8b36-f658ea39da50",
          "value" : 
          [ "6",
            "positive integer" ],
          "defaultvalue" : "6" },
        
        { "name" : "D",
          "purpose" : "Minimum delay",
          "htmlid" : "mw_723c175f-0f99-4f92-941d-49c86abb7ede",
          "value" : 
          [ "10",
            "positive integer" ],
          "defaultvalue" : "10" } ],
      "outputs" : 
      [ 
        { "name" : "chgpts",
          "purpose" : "Estimated variance change points",
          "htmlid" : "mw_30a5b00b-302f-46a7-9c23-18313c957b3c",
          "value" : 
          [ "vector" ] },
        
        { "name" : "kopt",
          "purpose" : "Proposed number of change points",
          "htmlid" : "mw_29819ae3-2f07-463c-81a1-6b1dfa6abd3f",
          "value" : 
          [ "nonnegative integer" ] },
        
        { "name" : "est",
          "purpose" : "Instants of the variation change points",
          "htmlid" : "mw_d4af07a0-63f2-4e71-9504-e1d44a7e4034",
          "value" : 
          [ "real-valued matrix" ] } ],
      "examples" : 
      [ 
        { "url" : "wvarchg.html#mw_5f58410b-d5d7-47ea-9aec-98b5b237fd39",
          "open_command" : "openExample('wavelet\/DetectVarianceChangePointsExample')",
          "title" : "Detect Variance Change Points" } ],
      "seealso" : 
      [ 
        { "url" : "cmddenoise.html",
          "name" : "cmddenoise" } ] },
    { "href" : "ref\/wvd.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "wvd",
          "fcntype" : "simple" } ],
      "refpurpose" : "Wigner-Ville distribution and smoothed pseudo Wigner-Ville distribution",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the Wigner-Ville distribution of x.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "d = wvd(x)",
            "d = wvd(x,fs)",
            "d = wvd(x,ts)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "d = wvd(___,\"smoothedPseudo\")",
            "d = wvd(___,\"smoothedPseudo\",twin,fwin)",
            "d = wvd(___,\"smoothedPseudo\",Name=Value)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "d = wvd(___,MinThreshold=thresh)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[d,f,t] = wvd(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "wvd(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signal",
          "htmlid" : "mw_0991efad-4ac5-4473-88de-71897cef3df6",
          "value" : 
          [ "vector",
            "timetable" ] },
        
        { "name" : "fs",
          "purpose" : "Sample rate",
          "htmlid" : "mw_20f92600-e5fe-4979-849d-a3094138b400_sep_mw_35701acd-eb5f-4c82-b4ed-f665e3a947c2",
          "value" : 
          [ "2*pi",
            "positive numeric scalar" ],
          "defaultvalue" : "2*pi" },
        
        { "name" : "ts",
          "purpose" : "Sample time",
          "htmlid" : "mw_20f92600-e5fe-4979-849d-a3094138b400_sep_mw_109b8599-7d14-4be0-8d68-158c359c0cbf",
          "value" : 
          [ "duration scalar" ] },
        
        { "name" : "twin",
          "purpose" : "Time and frequency windows",
          "htmlid" : "mw_20f92600-e5fe-4979-849d-a3094138b400_sep_mw_8e174f90-cbf2-4f37-935e-1419767ae163",
          "value" : 
          [ "vectors of odd length" ] },
        
        { "name" : "fwin",
          "purpose" : "Time and frequency windows",
          "htmlid" : "mw_20f92600-e5fe-4979-849d-a3094138b400_sep_mw_8e174f90-cbf2-4f37-935e-1419767ae163",
          "value" : 
          [ "vectors of odd length" ] },
        
        { "name" : "thresh",
          "purpose" : "Minimum nonzero value",
          "htmlid" : "mw_20f92600-e5fe-4979-849d-a3094138b400_sep_mw_93b129f2-f005-4d73-a6b0-003d711e82ec",
          "value" : 
          [ "-Inf",
            "real scalar" ],
          "defaultvalue" : "-Inf" },
        
        { "namevaluepairs" : 
          [ 
            { "name" : "NumFrequencyPoints",
              "purpose" : "Number of frequency points",
              "htmlid" : "mw_9c031d2b-87e2-4148-a547-055d63101ce4",
              "value" : 
              [ "2*ceil(length(x)\/2)",
                "integer" ],
              "defaultvalue" : "2*ceil(length(x)\/2)" },
            
            { "name" : "NumTimePoints",
              "purpose" : "Number of time points",
              "htmlid" : "mw_a0b2c6b7-55d8-4518-bb3a-abcc51db93b1",
              "value" : 
              [ "4*ceil(length(x)\/2)",
                "even integer" ],
              "defaultvalue" : "4*ceil(length(x)\/2)" } ] } ],
      "outputs" : 
      [ 
        { "name" : "d",
          "purpose" : "Wigner-Ville distribution",
          "htmlid" : "mw_4c787bb0-1dcd-49b6-bdf0-1ccb4a5dbf5c",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "f",
          "purpose" : "Frequencies",
          "htmlid" : "mw_20f92600-e5fe-4979-849d-a3094138b400_sep_mw_5c546b6a-6bb9-42fd-9d24-29bb54d28c6e",
          "value" : 
          [ "vector" ] },
        
        { "name" : "t",
          "purpose" : "Time instants",
          "htmlid" : "mw_20f92600-e5fe-4979-849d-a3094138b400_sep_mw_692838a7-6156-465e-ac9b-f254ac7569e9",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "wvd.html#mw_935852c5-fdf2-4ca4-b962-219af08a255f",
          "open_command" : "openExample('predmaint_shared\/WignerVilleDistributionOfComplexSignalExample')",
          "title" : "Wigner-Ville Distribution of Impulse and Tone" },
        
        { "url" : "wvd.html#mw_ec154fd0-8ae0-4c85-a7bb-cbee14d45268",
          "open_command" : "openExample('predmaint_shared\/WignerVilleDistributionOfSinusoidExample')",
          "title" : "Wigner-Ville Distribution of Sinusoids" },
        
        { "url" : "wvd.html#mw_da6b2fd3-c2dc-4c86-81db-034ea253481c",
          "open_command" : "openExample('predmaint_shared\/WignerVilleDistributionOfChirpsExample')",
          "title" : "Wigner-Ville Distribution of Chirps" },
        
        { "url" : "wvd.html#mw_afec9521-e465-4157-a44b-5fd55fe3f164",
          "open_command" : "openExample('predmaint_shared\/SmoothedPseudoWignerVilleDistributionOfComplexSignalExample')",
          "title" : "Smoothed Pseudo Wigner-Ville Distribution of Complex Signal" },
        
        { "url" : "wvd.html#mw_1319921e-38d6-4c8e-bbb4-38e87d94ed61",
          "open_command" : "openExample('predmaint_shared\/InterferenceTermsExample')",
          "title" : "Interference Terms" } ],
      "seealso" : 
      [ 
        { "url" : "xwvd.html",
          "name" : "xwvd" } ] },
    { "href" : "ref\/xwvd.html",
      "refentity" : 
      [ 
        { "type" : "function",
          "name" : "xwvd",
          "fcntype" : "simple" } ],
      "refpurpose" : "Cross Wigner-Ville distribution and cross smoothed pseudo Wigner-Ville distribution",
      "introduced" : "R2018b",
      "description" : "This MATLAB function returns the cross Wigner-Ville distribution of x and y.",
      "syntaxgroup" : 
      [ 
        { "title" : "",
          "syntax" : 
          [ "d = xwvd(x,y)",
            "d = xwvd(x,y,fs)",
            "d = xwvd(x,y,ts)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "d = xwvd(___,\"smoothedPseudo\")",
            "d = xwvd(___,\"smoothedPseudo\",twin,fwin)",
            "d = xwvd(___,\"smoothedPseudo\",NumFrequencyPoints=nf)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "d = xwvd(___,MinThreshold=thresh)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "[d,f,t] = xwvd(___)" ] },
        
        { "title" : "",
          "syntax" : 
          [ "xwvd(___)" ] } ],
      "inputs" : 
      [ 
        { "name" : "x",
          "purpose" : "Input signals",
          "htmlid" : "mw_e33f3b2c-c95d-42ce-9441-6eeea22b44d0",
          "value" : 
          [ "vectors",
            "timetables" ] },
        
        { "name" : "y",
          "purpose" : "Input signals",
          "htmlid" : "mw_e33f3b2c-c95d-42ce-9441-6eeea22b44d0",
          "value" : 
          [ "vectors",
            "timetables" ] },
        
        { "name" : "fs",
          "purpose" : "Sample rate",
          "htmlid" : "mw_ba0c191c-5ae9-4a6f-b06e-0672226ffd8b_sep_mw_35701acd-eb5f-4c82-b4ed-f665e3a947c2",
          "value" : 
          [ "2*pi",
            "positive numeric scalar" ],
          "defaultvalue" : "2*pi" },
        
        { "name" : "ts",
          "purpose" : "Sample time",
          "htmlid" : "mw_ba0c191c-5ae9-4a6f-b06e-0672226ffd8b_sep_mw_109b8599-7d14-4be0-8d68-158c359c0cbf",
          "value" : 
          [ "duration scalar" ] },
        
        { "name" : "twin",
          "purpose" : "Time and frequency windows",
          "htmlid" : "mw_ba0c191c-5ae9-4a6f-b06e-0672226ffd8b_sep_mw_8e174f90-cbf2-4f37-935e-1419767ae163",
          "value" : 
          [ "vectors of odd length" ] },
        
        { "name" : "fwin",
          "purpose" : "Time and frequency windows",
          "htmlid" : "mw_ba0c191c-5ae9-4a6f-b06e-0672226ffd8b_sep_mw_8e174f90-cbf2-4f37-935e-1419767ae163",
          "value" : 
          [ "vectors of odd length" ] },
        
        { "name" : "nf",
          "purpose" : "Number of frequency points",
          "htmlid" : "mw_af62e960-517b-4c67-b4ee-dd776ed131f6",
          "value" : 
          [ "2*ceil(length(x)\/2)",
            "integer" ],
          "defaultvalue" : "2*ceil(length(x)\/2)" },
        
        { "name" : "thresh",
          "purpose" : "Minimum nonzero value",
          "htmlid" : "mw_ba0c191c-5ae9-4a6f-b06e-0672226ffd8b_sep_mw_93b129f2-f005-4d73-a6b0-003d711e82ec",
          "value" : 
          [ "-Inf",
            "real scalar" ],
          "defaultvalue" : "-Inf" } ],
      "outputs" : 
      [ 
        { "name" : "d",
          "purpose" : "Cross Wigner-Ville distribution",
          "htmlid" : "mw_fc176f79-399a-4488-94db-683db7ecf909",
          "value" : 
          [ "matrix" ] },
        
        { "name" : "f",
          "purpose" : "Frequencies",
          "htmlid" : "mw_ba0c191c-5ae9-4a6f-b06e-0672226ffd8b_sep_mw_5c546b6a-6bb9-42fd-9d24-29bb54d28c6e",
          "value" : 
          [ "vector" ] },
        
        { "name" : "t",
          "purpose" : "Time instants",
          "htmlid" : "mw_ba0c191c-5ae9-4a6f-b06e-0672226ffd8b_sep_mw_692838a7-6156-465e-ac9b-f254ac7569e9",
          "value" : 
          [ "vector" ] } ],
      "examples" : 
      [ 
        { "url" : "xwvd.html#mw_4804e5cd-a710-46dd-a674-4b36fdf6a7f4",
          "open_command" : "openExample('predmaint_shared\/CrossWignerVilleDistributionOfSinusoidsExample')",
          "title" : "Cross Wigner-Ville Distribution of Signals" },
        
        { "url" : "xwvd.html#mw_3b09a3a0-983e-47b7-9298-e3612b21e51f",
          "open_command" : "openExample('predmaint_shared\/CrossWignerVilleDistributionOfChirpsExample')",
          "title" : "Cross Wigner-Ville Distribution of Chirps" },
        
        { "url" : "xwvd.html#mw_5c34d4c8-c424-45e0-9e8c-ee45eff3eee5",
          "open_command" : "openExample('predmaint_shared\/UseXWVDToEstimateInstantaneousFrequencyExample')",
          "title" : "Use Cross Wigner-Ville Distribution to Estimate Instantaneous Frequency" } ],
      "seealso" : 
      [ 
        { "url" : "..\/..\/signal\/ref\/xspectrogram.html",
          "name" : "xspectrogram" },
        
        { "url" : "wvd.html",
          "name" : "wvd" } ] }
  ]
}